/* automatically generated by rust-bindgen 0.56.0 */
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(improper_ctypes)]
#![allow(non_snake_case)]
#![allow(deref_nullptr)]

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const SPANDSP_USE_EXPORT_CAPABILITY: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
#[allow(clippy::approx_constant)]
pub const M_E: f64 = 2.718281828459045;
#[allow(clippy::approx_constant)]
pub const M_LOG2E: f64 = 1.4426950408889634;
#[allow(clippy::approx_constant)]
pub const M_LOG10E: f64 = 0.4342944819032518;
#[allow(clippy::approx_constant)]
pub const M_LN2: f64 = 0.6931471805599453;
#[allow(clippy::approx_constant)]
pub const M_LN10: f64 = 2.302585092994046;
#[allow(clippy::approx_constant)]
pub const M_PI: f64 = 3.141592653589793;
#[allow(clippy::approx_constant)]
pub const M_PI_2: f64 = 1.5707963267948966;
#[allow(clippy::approx_constant)]
pub const M_PI_4: f64 = 0.7853981633974483;
#[allow(clippy::approx_constant)]
pub const M_1_PI: f64 = 0.3183098861837907;
#[allow(clippy::approx_constant)]
pub const M_2_PI: f64 = 0.6366197723675814;
#[allow(clippy::approx_constant)]
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
#[allow(clippy::approx_constant)]
pub const M_SQRT2: f64 = 1.4142135623730951;
#[allow(clippy::approx_constant)]
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const HAVE_IEEEFP: u32 = 1;
pub const HOST_BIGENDIAN: u32 = 0;
pub const CCITT_SUPPORT: u32 = 1;
pub const JPEG_SUPPORT: u32 = 1;
pub const JBIG_SUPPORT: u32 = 1;
pub const LOGLUV_SUPPORT: u32 = 1;
pub const LZW_SUPPORT: u32 = 1;
pub const NEXT_SUPPORT: u32 = 1;
pub const OJPEG_SUPPORT: u32 = 1;
pub const PACKBITS_SUPPORT: u32 = 1;
pub const PIXARLOG_SUPPORT: u32 = 1;
pub const THUNDER_SUPPORT: u32 = 1;
pub const ZIP_SUPPORT: u32 = 1;
pub const SUBIFD_SUPPORT: u32 = 1;
pub const DEFAULT_EXTRASAMPLE_AS_ALPHA: u32 = 1;
pub const CHECK_JPEG_YCBCR_SUBSAMPLING: u32 = 1;
pub const MDI_SUPPORT: u32 = 1;
pub const TIFF_VERSION_CLASSIC: u32 = 42;
pub const TIFF_VERSION_BIG: u32 = 43;
pub const TIFF_BIGENDIAN: u32 = 19789;
pub const TIFF_LITTLEENDIAN: u32 = 18761;
pub const MDI_LITTLEENDIAN: u32 = 20549;
pub const MDI_BIGENDIAN: u32 = 17744;
pub const TIFFTAG_SUBFILETYPE: u32 = 254;
pub const FILETYPE_REDUCEDIMAGE: u32 = 1;
pub const FILETYPE_PAGE: u32 = 2;
pub const FILETYPE_MASK: u32 = 4;
pub const TIFFTAG_OSUBFILETYPE: u32 = 255;
pub const OFILETYPE_IMAGE: u32 = 1;
pub const OFILETYPE_REDUCEDIMAGE: u32 = 2;
pub const OFILETYPE_PAGE: u32 = 3;
pub const TIFFTAG_IMAGEWIDTH: u32 = 256;
pub const TIFFTAG_IMAGELENGTH: u32 = 257;
pub const TIFFTAG_BITSPERSAMPLE: u32 = 258;
pub const TIFFTAG_COMPRESSION: u32 = 259;
pub const COMPRESSION_NONE: u32 = 1;
pub const COMPRESSION_CCITTRLE: u32 = 2;
pub const COMPRESSION_CCITTFAX3: u32 = 3;
pub const COMPRESSION_CCITT_T4: u32 = 3;
pub const COMPRESSION_CCITTFAX4: u32 = 4;
pub const COMPRESSION_CCITT_T6: u32 = 4;
pub const COMPRESSION_LZW: u32 = 5;
pub const COMPRESSION_OJPEG: u32 = 6;
pub const COMPRESSION_JPEG: u32 = 7;
pub const COMPRESSION_T85: u32 = 9;
pub const COMPRESSION_T43: u32 = 10;
pub const COMPRESSION_NEXT: u32 = 32766;
pub const COMPRESSION_CCITTRLEW: u32 = 32771;
pub const COMPRESSION_PACKBITS: u32 = 32773;
pub const COMPRESSION_THUNDERSCAN: u32 = 32809;
pub const COMPRESSION_IT8CTPAD: u32 = 32895;
pub const COMPRESSION_IT8LW: u32 = 32896;
pub const COMPRESSION_IT8MP: u32 = 32897;
pub const COMPRESSION_IT8BL: u32 = 32898;
pub const COMPRESSION_PIXARFILM: u32 = 32908;
pub const COMPRESSION_PIXARLOG: u32 = 32909;
pub const COMPRESSION_DEFLATE: u32 = 32946;
pub const COMPRESSION_ADOBE_DEFLATE: u32 = 8;
pub const COMPRESSION_DCS: u32 = 32947;
pub const COMPRESSION_JBIG: u32 = 34661;
pub const COMPRESSION_SGILOG: u32 = 34676;
pub const COMPRESSION_SGILOG24: u32 = 34677;
pub const COMPRESSION_JP2000: u32 = 34712;
pub const COMPRESSION_LZMA: u32 = 34925;
pub const TIFFTAG_PHOTOMETRIC: u32 = 262;
pub const PHOTOMETRIC_MINISWHITE: u32 = 0;
pub const PHOTOMETRIC_MINISBLACK: u32 = 1;
pub const PHOTOMETRIC_RGB: u32 = 2;
pub const PHOTOMETRIC_PALETTE: u32 = 3;
pub const PHOTOMETRIC_MASK: u32 = 4;
pub const PHOTOMETRIC_SEPARATED: u32 = 5;
pub const PHOTOMETRIC_YCBCR: u32 = 6;
pub const PHOTOMETRIC_CIELAB: u32 = 8;
pub const PHOTOMETRIC_ICCLAB: u32 = 9;
pub const PHOTOMETRIC_ITULAB: u32 = 10;
pub const PHOTOMETRIC_CFA: u32 = 32803;
pub const PHOTOMETRIC_LOGL: u32 = 32844;
pub const PHOTOMETRIC_LOGLUV: u32 = 32845;
pub const TIFFTAG_THRESHHOLDING: u32 = 263;
pub const THRESHHOLD_BILEVEL: u32 = 1;
pub const THRESHHOLD_HALFTONE: u32 = 2;
pub const THRESHHOLD_ERRORDIFFUSE: u32 = 3;
pub const TIFFTAG_CELLWIDTH: u32 = 264;
pub const TIFFTAG_CELLLENGTH: u32 = 265;
pub const TIFFTAG_FILLORDER: u32 = 266;
pub const FILLORDER_MSB2LSB: u32 = 1;
pub const FILLORDER_LSB2MSB: u32 = 2;
pub const TIFFTAG_DOCUMENTNAME: u32 = 269;
pub const TIFFTAG_IMAGEDESCRIPTION: u32 = 270;
pub const TIFFTAG_MAKE: u32 = 271;
pub const TIFFTAG_MODEL: u32 = 272;
pub const TIFFTAG_STRIPOFFSETS: u32 = 273;
pub const TIFFTAG_ORIENTATION: u32 = 274;
pub const ORIENTATION_TOPLEFT: u32 = 1;
pub const ORIENTATION_TOPRIGHT: u32 = 2;
pub const ORIENTATION_BOTRIGHT: u32 = 3;
pub const ORIENTATION_BOTLEFT: u32 = 4;
pub const ORIENTATION_LEFTTOP: u32 = 5;
pub const ORIENTATION_RIGHTTOP: u32 = 6;
pub const ORIENTATION_RIGHTBOT: u32 = 7;
pub const ORIENTATION_LEFTBOT: u32 = 8;
pub const TIFFTAG_SAMPLESPERPIXEL: u32 = 277;
pub const TIFFTAG_ROWSPERSTRIP: u32 = 278;
pub const TIFFTAG_STRIPBYTECOUNTS: u32 = 279;
pub const TIFFTAG_MINSAMPLEVALUE: u32 = 280;
pub const TIFFTAG_MAXSAMPLEVALUE: u32 = 281;
pub const TIFFTAG_XRESOLUTION: u32 = 282;
pub const TIFFTAG_YRESOLUTION: u32 = 283;
pub const TIFFTAG_PLANARCONFIG: u32 = 284;
pub const PLANARCONFIG_CONTIG: u32 = 1;
pub const PLANARCONFIG_SEPARATE: u32 = 2;
pub const TIFFTAG_PAGENAME: u32 = 285;
pub const TIFFTAG_XPOSITION: u32 = 286;
pub const TIFFTAG_YPOSITION: u32 = 287;
pub const TIFFTAG_FREEOFFSETS: u32 = 288;
pub const TIFFTAG_FREEBYTECOUNTS: u32 = 289;
pub const TIFFTAG_GRAYRESPONSEUNIT: u32 = 290;
pub const GRAYRESPONSEUNIT_10S: u32 = 1;
pub const GRAYRESPONSEUNIT_100S: u32 = 2;
pub const GRAYRESPONSEUNIT_1000S: u32 = 3;
pub const GRAYRESPONSEUNIT_10000S: u32 = 4;
pub const GRAYRESPONSEUNIT_100000S: u32 = 5;
pub const TIFFTAG_GRAYRESPONSECURVE: u32 = 291;
pub const TIFFTAG_GROUP3OPTIONS: u32 = 292;
pub const TIFFTAG_T4OPTIONS: u32 = 292;
pub const GROUP3OPT_2DENCODING: u32 = 1;
pub const GROUP3OPT_UNCOMPRESSED: u32 = 2;
pub const GROUP3OPT_FILLBITS: u32 = 4;
pub const TIFFTAG_GROUP4OPTIONS: u32 = 293;
pub const TIFFTAG_T6OPTIONS: u32 = 293;
pub const GROUP4OPT_UNCOMPRESSED: u32 = 2;
pub const TIFFTAG_RESOLUTIONUNIT: u32 = 296;
pub const RESUNIT_NONE: u32 = 1;
pub const RESUNIT_INCH: u32 = 2;
pub const RESUNIT_CENTIMETER: u32 = 3;
pub const TIFFTAG_PAGENUMBER: u32 = 297;
pub const TIFFTAG_COLORRESPONSEUNIT: u32 = 300;
pub const COLORRESPONSEUNIT_10S: u32 = 1;
pub const COLORRESPONSEUNIT_100S: u32 = 2;
pub const COLORRESPONSEUNIT_1000S: u32 = 3;
pub const COLORRESPONSEUNIT_10000S: u32 = 4;
pub const COLORRESPONSEUNIT_100000S: u32 = 5;
pub const TIFFTAG_TRANSFERFUNCTION: u32 = 301;
pub const TIFFTAG_SOFTWARE: u32 = 305;
pub const TIFFTAG_DATETIME: u32 = 306;
pub const TIFFTAG_ARTIST: u32 = 315;
pub const TIFFTAG_HOSTCOMPUTER: u32 = 316;
pub const TIFFTAG_PREDICTOR: u32 = 317;
pub const PREDICTOR_NONE: u32 = 1;
pub const PREDICTOR_HORIZONTAL: u32 = 2;
pub const PREDICTOR_FLOATINGPOINT: u32 = 3;
pub const TIFFTAG_WHITEPOINT: u32 = 318;
pub const TIFFTAG_PRIMARYCHROMATICITIES: u32 = 319;
pub const TIFFTAG_COLORMAP: u32 = 320;
pub const TIFFTAG_HALFTONEHINTS: u32 = 321;
pub const TIFFTAG_TILEWIDTH: u32 = 322;
pub const TIFFTAG_TILELENGTH: u32 = 323;
pub const TIFFTAG_TILEOFFSETS: u32 = 324;
pub const TIFFTAG_TILEBYTECOUNTS: u32 = 325;
pub const TIFFTAG_BADFAXLINES: u32 = 326;
pub const TIFFTAG_CLEANFAXDATA: u32 = 327;
pub const CLEANFAXDATA_CLEAN: u32 = 0;
pub const CLEANFAXDATA_REGENERATED: u32 = 1;
pub const CLEANFAXDATA_UNCLEAN: u32 = 2;
pub const TIFFTAG_CONSECUTIVEBADFAXLINES: u32 = 328;
pub const TIFFTAG_SUBIFD: u32 = 330;
pub const TIFFTAG_INKSET: u32 = 332;
pub const INKSET_CMYK: u32 = 1;
pub const INKSET_MULTIINK: u32 = 2;
pub const TIFFTAG_INKNAMES: u32 = 333;
pub const TIFFTAG_NUMBEROFINKS: u32 = 334;
pub const TIFFTAG_DOTRANGE: u32 = 336;
pub const TIFFTAG_TARGETPRINTER: u32 = 337;
pub const TIFFTAG_EXTRASAMPLES: u32 = 338;
pub const EXTRASAMPLE_UNSPECIFIED: u32 = 0;
pub const EXTRASAMPLE_ASSOCALPHA: u32 = 1;
pub const EXTRASAMPLE_UNASSALPHA: u32 = 2;
pub const TIFFTAG_SAMPLEFORMAT: u32 = 339;
pub const SAMPLEFORMAT_UINT: u32 = 1;
pub const SAMPLEFORMAT_INT: u32 = 2;
pub const SAMPLEFORMAT_IEEEFP: u32 = 3;
pub const SAMPLEFORMAT_VOID: u32 = 4;
pub const SAMPLEFORMAT_COMPLEXINT: u32 = 5;
pub const SAMPLEFORMAT_COMPLEXIEEEFP: u32 = 6;
pub const TIFFTAG_SMINSAMPLEVALUE: u32 = 340;
pub const TIFFTAG_SMAXSAMPLEVALUE: u32 = 341;
pub const TIFFTAG_CLIPPATH: u32 = 343;
pub const TIFFTAG_XCLIPPATHUNITS: u32 = 344;
pub const TIFFTAG_YCLIPPATHUNITS: u32 = 345;
pub const TIFFTAG_INDEXED: u32 = 346;
pub const TIFFTAG_JPEGTABLES: u32 = 347;
pub const TIFFTAG_OPIPROXY: u32 = 351;
pub const TIFFTAG_GLOBALPARAMETERSIFD: u32 = 400;
pub const TIFFTAG_PROFILETYPE: u32 = 401;
pub const PROFILETYPE_UNSPECIFIED: u32 = 0;
pub const PROFILETYPE_G3_FAX: u32 = 1;
pub const TIFFTAG_FAXPROFILE: u32 = 402;
pub const FAXPROFILE_S: u32 = 1;
pub const FAXPROFILE_F: u32 = 2;
pub const FAXPROFILE_J: u32 = 3;
pub const FAXPROFILE_C: u32 = 4;
pub const FAXPROFILE_L: u32 = 5;
pub const FAXPROFILE_M: u32 = 6;
pub const TIFFTAG_CODINGMETHODS: u32 = 403;
pub const CODINGMETHODS_T4_1D: u32 = 2;
pub const CODINGMETHODS_T4_2D: u32 = 4;
pub const CODINGMETHODS_T6: u32 = 8;
pub const CODINGMETHODS_T85: u32 = 16;
pub const CODINGMETHODS_T42: u32 = 32;
pub const CODINGMETHODS_T43: u32 = 64;
pub const TIFFTAG_VERSIONYEAR: u32 = 404;
pub const TIFFTAG_MODENUMBER: u32 = 405;
pub const TIFFTAG_DECODE: u32 = 433;
pub const TIFFTAG_IMAGEBASECOLOR: u32 = 434;
pub const TIFFTAG_T82OPTIONS: u32 = 435;
pub const TIFFTAG_JPEGPROC: u32 = 512;
pub const JPEGPROC_BASELINE: u32 = 1;
pub const JPEGPROC_LOSSLESS: u32 = 14;
pub const TIFFTAG_JPEGIFOFFSET: u32 = 513;
pub const TIFFTAG_JPEGIFBYTECOUNT: u32 = 514;
pub const TIFFTAG_JPEGRESTARTINTERVAL: u32 = 515;
pub const TIFFTAG_JPEGLOSSLESSPREDICTORS: u32 = 517;
pub const TIFFTAG_JPEGPOINTTRANSFORM: u32 = 518;
pub const TIFFTAG_JPEGQTABLES: u32 = 519;
pub const TIFFTAG_JPEGDCTABLES: u32 = 520;
pub const TIFFTAG_JPEGACTABLES: u32 = 521;
pub const TIFFTAG_YCBCRCOEFFICIENTS: u32 = 529;
pub const TIFFTAG_YCBCRSUBSAMPLING: u32 = 530;
pub const TIFFTAG_YCBCRPOSITIONING: u32 = 531;
pub const YCBCRPOSITION_CENTERED: u32 = 1;
pub const YCBCRPOSITION_COSITED: u32 = 2;
pub const TIFFTAG_REFERENCEBLACKWHITE: u32 = 532;
pub const TIFFTAG_STRIPROWCOUNTS: u32 = 559;
pub const TIFFTAG_XMLPACKET: u32 = 700;
pub const TIFFTAG_OPIIMAGEID: u32 = 32781;
pub const TIFFTAG_REFPTS: u32 = 32953;
pub const TIFFTAG_REGIONTACKPOINT: u32 = 32954;
pub const TIFFTAG_REGIONWARPCORNERS: u32 = 32955;
pub const TIFFTAG_REGIONAFFINE: u32 = 32956;
pub const TIFFTAG_MATTEING: u32 = 32995;
pub const TIFFTAG_DATATYPE: u32 = 32996;
pub const TIFFTAG_IMAGEDEPTH: u32 = 32997;
pub const TIFFTAG_TILEDEPTH: u32 = 32998;
pub const TIFFTAG_PIXAR_IMAGEFULLWIDTH: u32 = 33300;
pub const TIFFTAG_PIXAR_IMAGEFULLLENGTH: u32 = 33301;
pub const TIFFTAG_PIXAR_TEXTUREFORMAT: u32 = 33302;
pub const TIFFTAG_PIXAR_WRAPMODES: u32 = 33303;
pub const TIFFTAG_PIXAR_FOVCOT: u32 = 33304;
pub const TIFFTAG_PIXAR_MATRIX_WORLDTOSCREEN: u32 = 33305;
pub const TIFFTAG_PIXAR_MATRIX_WORLDTOCAMERA: u32 = 33306;
pub const TIFFTAG_WRITERSERIALNUMBER: u32 = 33405;
pub const TIFFTAG_CFAREPEATPATTERNDIM: u32 = 33421;
pub const TIFFTAG_CFAPATTERN: u32 = 33422;
pub const TIFFTAG_COPYRIGHT: u32 = 33432;
pub const TIFFTAG_RICHTIFFIPTC: u32 = 33723;
pub const TIFFTAG_IT8SITE: u32 = 34016;
pub const TIFFTAG_IT8COLORSEQUENCE: u32 = 34017;
pub const TIFFTAG_IT8HEADER: u32 = 34018;
pub const TIFFTAG_IT8RASTERPADDING: u32 = 34019;
pub const TIFFTAG_IT8BITSPERRUNLENGTH: u32 = 34020;
pub const TIFFTAG_IT8BITSPEREXTENDEDRUNLENGTH: u32 = 34021;
pub const TIFFTAG_IT8COLORTABLE: u32 = 34022;
pub const TIFFTAG_IT8IMAGECOLORINDICATOR: u32 = 34023;
pub const TIFFTAG_IT8BKGCOLORINDICATOR: u32 = 34024;
pub const TIFFTAG_IT8IMAGECOLORVALUE: u32 = 34025;
pub const TIFFTAG_IT8BKGCOLORVALUE: u32 = 34026;
pub const TIFFTAG_IT8PIXELINTENSITYRANGE: u32 = 34027;
pub const TIFFTAG_IT8TRANSPARENCYINDICATOR: u32 = 34028;
pub const TIFFTAG_IT8COLORCHARACTERIZATION: u32 = 34029;
pub const TIFFTAG_IT8HCUSAGE: u32 = 34030;
pub const TIFFTAG_IT8TRAPINDICATOR: u32 = 34031;
pub const TIFFTAG_IT8CMYKEQUIVALENT: u32 = 34032;
pub const TIFFTAG_FRAMECOUNT: u32 = 34232;
pub const TIFFTAG_PHOTOSHOP: u32 = 34377;
pub const TIFFTAG_EXIFIFD: u32 = 34665;
pub const TIFFTAG_ICCPROFILE: u32 = 34675;
pub const TIFFTAG_IMAGELAYER: u32 = 34732;
pub const TIFFTAG_JBIGOPTIONS: u32 = 34750;
pub const TIFFTAG_GPSIFD: u32 = 34853;
pub const TIFFTAG_FAXRECVPARAMS: u32 = 34908;
pub const TIFFTAG_FAXSUBADDRESS: u32 = 34909;
pub const TIFFTAG_FAXRECVTIME: u32 = 34910;
pub const TIFFTAG_FAXDCS: u32 = 34911;
pub const TIFFTAG_STONITS: u32 = 37439;
pub const TIFFTAG_FEDEX_EDR: u32 = 34929;
pub const TIFFTAG_INTEROPERABILITYIFD: u32 = 40965;
pub const TIFFTAG_DNGVERSION: u32 = 50706;
pub const TIFFTAG_DNGBACKWARDVERSION: u32 = 50707;
pub const TIFFTAG_UNIQUECAMERAMODEL: u32 = 50708;
pub const TIFFTAG_LOCALIZEDCAMERAMODEL: u32 = 50709;
pub const TIFFTAG_CFAPLANECOLOR: u32 = 50710;
pub const TIFFTAG_CFALAYOUT: u32 = 50711;
pub const TIFFTAG_LINEARIZATIONTABLE: u32 = 50712;
pub const TIFFTAG_BLACKLEVELREPEATDIM: u32 = 50713;
pub const TIFFTAG_BLACKLEVEL: u32 = 50714;
pub const TIFFTAG_BLACKLEVELDELTAH: u32 = 50715;
pub const TIFFTAG_BLACKLEVELDELTAV: u32 = 50716;
pub const TIFFTAG_WHITELEVEL: u32 = 50717;
pub const TIFFTAG_DEFAULTSCALE: u32 = 50718;
pub const TIFFTAG_DEFAULTCROPORIGIN: u32 = 50719;
pub const TIFFTAG_DEFAULTCROPSIZE: u32 = 50720;
pub const TIFFTAG_COLORMATRIX1: u32 = 50721;
pub const TIFFTAG_COLORMATRIX2: u32 = 50722;
pub const TIFFTAG_CAMERACALIBRATION1: u32 = 50723;
pub const TIFFTAG_CAMERACALIBRATION2: u32 = 50724;
pub const TIFFTAG_REDUCTIONMATRIX1: u32 = 50725;
pub const TIFFTAG_REDUCTIONMATRIX2: u32 = 50726;
pub const TIFFTAG_ANALOGBALANCE: u32 = 50727;
pub const TIFFTAG_ASSHOTNEUTRAL: u32 = 50728;
pub const TIFFTAG_ASSHOTWHITEXY: u32 = 50729;
pub const TIFFTAG_BASELINEEXPOSURE: u32 = 50730;
pub const TIFFTAG_BASELINENOISE: u32 = 50731;
pub const TIFFTAG_BASELINESHARPNESS: u32 = 50732;
pub const TIFFTAG_BAYERGREENSPLIT: u32 = 50733;
pub const TIFFTAG_LINEARRESPONSELIMIT: u32 = 50734;
pub const TIFFTAG_CAMERASERIALNUMBER: u32 = 50735;
pub const TIFFTAG_LENSINFO: u32 = 50736;
pub const TIFFTAG_CHROMABLURRADIUS: u32 = 50737;
pub const TIFFTAG_ANTIALIASSTRENGTH: u32 = 50738;
pub const TIFFTAG_SHADOWSCALE: u32 = 50739;
pub const TIFFTAG_DNGPRIVATEDATA: u32 = 50740;
pub const TIFFTAG_MAKERNOTESAFETY: u32 = 50741;
pub const TIFFTAG_CALIBRATIONILLUMINANT1: u32 = 50778;
pub const TIFFTAG_CALIBRATIONILLUMINANT2: u32 = 50779;
pub const TIFFTAG_BESTQUALITYSCALE: u32 = 50780;
pub const TIFFTAG_RAWDATAUNIQUEID: u32 = 50781;
pub const TIFFTAG_ORIGINALRAWFILENAME: u32 = 50827;
pub const TIFFTAG_ORIGINALRAWFILEDATA: u32 = 50828;
pub const TIFFTAG_ACTIVEAREA: u32 = 50829;
pub const TIFFTAG_MASKEDAREAS: u32 = 50830;
pub const TIFFTAG_ASSHOTICCPROFILE: u32 = 50831;
pub const TIFFTAG_ASSHOTPREPROFILEMATRIX: u32 = 50832;
pub const TIFFTAG_CURRENTICCPROFILE: u32 = 50833;
pub const TIFFTAG_CURRENTPREPROFILEMATRIX: u32 = 50834;
pub const TIFFTAG_DCSHUESHIFTVALUES: u32 = 65535;
pub const TIFFTAG_FAXMODE: u32 = 65536;
pub const FAXMODE_CLASSIC: u32 = 0;
pub const FAXMODE_NORTC: u32 = 1;
pub const FAXMODE_NOEOL: u32 = 2;
pub const FAXMODE_BYTEALIGN: u32 = 4;
pub const FAXMODE_WORDALIGN: u32 = 8;
pub const FAXMODE_CLASSF: u32 = 1;
pub const TIFFTAG_JPEGQUALITY: u32 = 65537;
pub const TIFFTAG_JPEGCOLORMODE: u32 = 65538;
pub const JPEGCOLORMODE_RAW: u32 = 0;
pub const JPEGCOLORMODE_RGB: u32 = 1;
pub const TIFFTAG_JPEGTABLESMODE: u32 = 65539;
pub const JPEGTABLESMODE_QUANT: u32 = 1;
pub const JPEGTABLESMODE_HUFF: u32 = 2;
pub const TIFFTAG_FAXFILLFUNC: u32 = 65540;
pub const TIFFTAG_PIXARLOGDATAFMT: u32 = 65549;
pub const PIXARLOGDATAFMT_8BIT: u32 = 0;
pub const PIXARLOGDATAFMT_8BITABGR: u32 = 1;
pub const PIXARLOGDATAFMT_11BITLOG: u32 = 2;
pub const PIXARLOGDATAFMT_12BITPICIO: u32 = 3;
pub const PIXARLOGDATAFMT_16BIT: u32 = 4;
pub const PIXARLOGDATAFMT_FLOAT: u32 = 5;
pub const TIFFTAG_DCSIMAGERTYPE: u32 = 65550;
pub const DCSIMAGERMODEL_M3: u32 = 0;
pub const DCSIMAGERMODEL_M5: u32 = 1;
pub const DCSIMAGERMODEL_M6: u32 = 2;
pub const DCSIMAGERFILTER_IR: u32 = 0;
pub const DCSIMAGERFILTER_MONO: u32 = 1;
pub const DCSIMAGERFILTER_CFA: u32 = 2;
pub const DCSIMAGERFILTER_OTHER: u32 = 3;
pub const TIFFTAG_DCSINTERPMODE: u32 = 65551;
pub const DCSINTERPMODE_NORMAL: u32 = 0;
pub const DCSINTERPMODE_PREVIEW: u32 = 1;
pub const TIFFTAG_DCSBALANCEARRAY: u32 = 65552;
pub const TIFFTAG_DCSCORRECTMATRIX: u32 = 65553;
pub const TIFFTAG_DCSGAMMA: u32 = 65554;
pub const TIFFTAG_DCSTOESHOULDERPTS: u32 = 65555;
pub const TIFFTAG_DCSCALIBRATIONFD: u32 = 65556;
pub const TIFFTAG_ZIPQUALITY: u32 = 65557;
pub const TIFFTAG_PIXARLOGQUALITY: u32 = 65558;
pub const TIFFTAG_DCSCLIPRECTANGLE: u32 = 65559;
pub const TIFFTAG_SGILOGDATAFMT: u32 = 65560;
pub const SGILOGDATAFMT_FLOAT: u32 = 0;
pub const SGILOGDATAFMT_16BIT: u32 = 1;
pub const SGILOGDATAFMT_RAW: u32 = 2;
pub const SGILOGDATAFMT_8BIT: u32 = 3;
pub const TIFFTAG_SGILOGENCODE: u32 = 65561;
pub const SGILOGENCODE_NODITHER: u32 = 0;
pub const SGILOGENCODE_RANDITHER: u32 = 1;
pub const TIFFTAG_LZMAPRESET: u32 = 65562;
pub const TIFFTAG_PERSAMPLE: u32 = 65563;
pub const PERSAMPLE_MERGED: u32 = 0;
pub const PERSAMPLE_MULTI: u32 = 1;
pub const EXIFTAG_EXPOSURETIME: u32 = 33434;
pub const EXIFTAG_FNUMBER: u32 = 33437;
pub const EXIFTAG_EXPOSUREPROGRAM: u32 = 34850;
pub const EXIFTAG_SPECTRALSENSITIVITY: u32 = 34852;
pub const EXIFTAG_ISOSPEEDRATINGS: u32 = 34855;
pub const EXIFTAG_OECF: u32 = 34856;
pub const EXIFTAG_EXIFVERSION: u32 = 36864;
pub const EXIFTAG_DATETIMEORIGINAL: u32 = 36867;
pub const EXIFTAG_DATETIMEDIGITIZED: u32 = 36868;
pub const EXIFTAG_COMPONENTSCONFIGURATION: u32 = 37121;
pub const EXIFTAG_COMPRESSEDBITSPERPIXEL: u32 = 37122;
pub const EXIFTAG_SHUTTERSPEEDVALUE: u32 = 37377;
pub const EXIFTAG_APERTUREVALUE: u32 = 37378;
pub const EXIFTAG_BRIGHTNESSVALUE: u32 = 37379;
pub const EXIFTAG_EXPOSUREBIASVALUE: u32 = 37380;
pub const EXIFTAG_MAXAPERTUREVALUE: u32 = 37381;
pub const EXIFTAG_SUBJECTDISTANCE: u32 = 37382;
pub const EXIFTAG_METERINGMODE: u32 = 37383;
pub const EXIFTAG_LIGHTSOURCE: u32 = 37384;
pub const EXIFTAG_FLASH: u32 = 37385;
pub const EXIFTAG_FOCALLENGTH: u32 = 37386;
pub const EXIFTAG_SUBJECTAREA: u32 = 37396;
pub const EXIFTAG_MAKERNOTE: u32 = 37500;
pub const EXIFTAG_USERCOMMENT: u32 = 37510;
pub const EXIFTAG_SUBSECTIME: u32 = 37520;
pub const EXIFTAG_SUBSECTIMEORIGINAL: u32 = 37521;
pub const EXIFTAG_SUBSECTIMEDIGITIZED: u32 = 37522;
pub const EXIFTAG_FLASHPIXVERSION: u32 = 40960;
pub const EXIFTAG_COLORSPACE: u32 = 40961;
pub const EXIFTAG_PIXELXDIMENSION: u32 = 40962;
pub const EXIFTAG_PIXELYDIMENSION: u32 = 40963;
pub const EXIFTAG_RELATEDSOUNDFILE: u32 = 40964;
pub const EXIFTAG_FLASHENERGY: u32 = 41483;
pub const EXIFTAG_SPATIALFREQUENCYRESPONSE: u32 = 41484;
pub const EXIFTAG_FOCALPLANEXRESOLUTION: u32 = 41486;
pub const EXIFTAG_FOCALPLANEYRESOLUTION: u32 = 41487;
pub const EXIFTAG_FOCALPLANERESOLUTIONUNIT: u32 = 41488;
pub const EXIFTAG_SUBJECTLOCATION: u32 = 41492;
pub const EXIFTAG_EXPOSUREINDEX: u32 = 41493;
pub const EXIFTAG_SENSINGMETHOD: u32 = 41495;
pub const EXIFTAG_FILESOURCE: u32 = 41728;
pub const EXIFTAG_SCENETYPE: u32 = 41729;
pub const EXIFTAG_CFAPATTERN: u32 = 41730;
pub const EXIFTAG_CUSTOMRENDERED: u32 = 41985;
pub const EXIFTAG_EXPOSUREMODE: u32 = 41986;
pub const EXIFTAG_WHITEBALANCE: u32 = 41987;
pub const EXIFTAG_DIGITALZOOMRATIO: u32 = 41988;
pub const EXIFTAG_FOCALLENGTHIN35MMFILM: u32 = 41989;
pub const EXIFTAG_SCENECAPTURETYPE: u32 = 41990;
pub const EXIFTAG_GAINCONTROL: u32 = 41991;
pub const EXIFTAG_CONTRAST: u32 = 41992;
pub const EXIFTAG_SATURATION: u32 = 41993;
pub const EXIFTAG_SHARPNESS: u32 = 41994;
pub const EXIFTAG_DEVICESETTINGDESCRIPTION: u32 = 41995;
pub const EXIFTAG_SUBJECTDISTANCERANGE: u32 = 41996;
pub const EXIFTAG_IMAGEUNIQUEID: u32 = 42016;
pub const TIFFLIB_VERSION_STR : & 'static [u8 ; 106usize] = b"LIBTIFF, Version 4.0.9\nCopyright (c) 1988-1996 Sam Leffler\nCopyright (c) 1991-1996 Silicon Graphics, Inc.\0" ;
pub const TIFFLIB_VERSION: u32 = 20171118;
pub const TIFFPRINT_NONE: u32 = 0;
pub const TIFFPRINT_STRIPS: u32 = 1;
pub const TIFFPRINT_CURVES: u32 = 2;
pub const TIFFPRINT_COLORMAP: u32 = 4;
pub const TIFFPRINT_JPEGQTABLES: u32 = 256;
pub const TIFFPRINT_JPEGACTABLES: u32 = 512;
pub const TIFFPRINT_JPEGDCTABLES: u32 = 512;
pub const D65_X0: f64 = 95.047;
pub const D65_Y0: f64 = 100.0;
pub const D65_Z0: f64 = 108.8827;
pub const D50_X0: f64 = 96.425;
pub const D50_Y0: f64 = 100.0;
pub const D50_Z0: f64 = 82.468;
pub const CIELABTORGB_TABLE_RANGE: u32 = 1500;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const LOGLUV_PUBLIC: u32 = 1;
pub const TIFF_VARIABLE: i32 = -1;
pub const TIFF_SPP: i32 = -2;
pub const TIFF_VARIABLE2: i32 = -3;
pub const FIELD_CUSTOM: u32 = 65;
pub const U_NEU: f64 = 0.210526316;
pub const V_NEU: f64 = 0.473684211;
pub const UVSCALE: f64 = 410.0;
pub const SAMPLE_RATE: u32 = 8000;
pub const DBM0_MAX_POWER: f64 = 6.16;
#[allow(clippy::approx_constant)]
pub const DBM0_MAX_SINE_POWER: f64 = 3.14;
pub const DBOV_MAX_POWER: f64 = 0.0;
pub const DBOV_MAX_SINE_POWER: f64 = -3.02;
pub const QUEUE_READ_ATOMIC: u32 = 1;
pub const QUEUE_WRITE_ATOMIC: u32 = 2;
pub const G711_ALAW_AMI_MASK: u32 = 85;
pub const G711_ALAW_IDLE_OCTET: u32 = 213;
pub const G711_ULAW_IDLE_OCTET: u32 = 255;
pub const G711_ULAW_BIAS: u32 = 132;
pub const HDLC_MAXFRAME_LEN: u32 = 400;
pub const SUPER_TONE_TX_MAX_LEVELS: u32 = 4;
pub const SUPER_TONE_TX_MAX_TONES: u32 = 4;
pub const MAX_DTMF_DIGITS: u32 = 128;
pub const MAX_BELL_MF_DIGITS: u32 = 128;
pub const FSK_MAX_WINDOW_LEN: u32 = 128;
pub const V29_CONSTELLATION_SCALING_FACTOR: f64 = 1.0;
pub const V17_CONSTELLATION_SCALING_FACTOR: f64 = 1.0;
pub const V22BIS_CONSTELLATION_SCALING_FACTOR: f64 = 1.0;
pub const V27TER_CONSTELLATION_SCALING_FACTOR: f64 = 1.0;
pub const V42BIS_MIN_STRING_SIZE: u32 = 6;
pub const V42BIS_MAX_STRING_SIZE: u32 = 250;
pub const V42BIS_MIN_DICTIONARY_SIZE: u32 = 512;
pub const V42BIS_MAX_BITS: u32 = 12;
pub const V42BIS_MAX_CODEWORDS: u32 = 4096;
pub const V42BIS_MAX_OUTPUT_LENGTH: u32 = 1024;
pub const T30_MAX_DIS_DTC_DCS_LEN: u32 = 22;
pub const T30_MAX_IDENT_LEN: u32 = 20;
pub const T30_MAX_PAGE_HEADER_INFO: u32 = 50;
pub const T38_RX_BUF_LEN: u32 = 2048;
pub const T38_TX_BUF_LEN: u32 = 16384;
pub const T38_NON_ECM_TX_BUF_LEN: u32 = 16384;
pub const MAX_NSX_SUPPRESSION: u32 = 10;
pub const T38_MAX_HDLC_LEN: u32 = 260;
pub const MCLASS_VISUAL_INDICATOR: u32 = 11;
pub const JCLIP_MDMF_CALLERID: u32 = 64;
pub const CLIP_DTMF_HASH_TERMINATED: u8 = 35u8;
pub const CLIP_DTMF_C_TERMINATED: u8 = 67u8;
pub const CLIP_DTMF_HASH_CALLER_NUMBER: u8 = 65u8;
pub const CLIP_DTMF_HASH_ABSENCE: u8 = 68u8;
pub const CLIP_DTMF_HASH_UNSPECIFIED: u32 = 0;
pub const CLIP_DTMF_C_CALLER_NUMBER: u8 = 65u8;
pub const CLIP_DTMF_C_REDIRECT_NUMBER: u8 = 68u8;
pub const CLIP_DTMF_C_ABSENCE: u8 = 66u8;
pub const LPC10_SAMPLES_PER_FRAME: u32 = 180;
pub const LPC10_BITS_IN_COMPRESSED_FRAME: u32 = 54;
pub const PLC_PITCH_MIN: u32 = 120;
pub const PLC_PITCH_MAX: u32 = 40;
pub const PLC_PITCH_OVERLAP_MAX: u32 = 30;
pub const CORRELATION_SPAN: u32 = 160;
pub const PLC_HISTORY_LEN: u32 = 280;
pub const PLAYOUT_TYPE_CONTROL: u32 = 0;
pub const PLAYOUT_TYPE_SILENCE: u32 = 1;
pub const PLAYOUT_TYPE_SPEECH: u32 = 2;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(
        __nptr: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _
                as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>()))
                .__low as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>()))
                .__high as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>()))
                .__low as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>()))
                .__high as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(
        __statebuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<random_data>())).state as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(
        __buf: *mut random_data,
        __result: *mut i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
        -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
        -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(
        __seed16v: *mut ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(
        __numer: ::std::os::raw::c_int,
        __denom: ::std::os::raw::c_int,
    ) -> div_t;
}
extern "C" {
    pub fn ldiv(
        __numer: ::std::os::raw::c_long,
        __denom: ::std::os::raw::c_long,
    ) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(
        __s: *mut ::std::os::raw::c_char,
        __wchar: wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(
        __response: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(
        __loadavg: *mut f64,
        __nelem: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(
        __string: *const ::std::os::raw::c_char,
        __maxlen: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(
        __clock_id: clockid_t,
        __res: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(
        __clock_id: clockid_t,
        __tp: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(
        __clock_id: clockid_t,
        __tp: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(
        __pid: pid_t,
        __clock_id: *mut clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(
        __timerid: timer_t,
        __value: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(
        __x: u128,
        __y: u128,
        __quo: *mut ::std::os::raw::c_int,
    ) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type int8 = ::std::os::raw::c_schar;
pub type uint8 = ::std::os::raw::c_uchar;
pub type int16 = ::std::os::raw::c_short;
pub type uint16 = ::std::os::raw::c_ushort;
pub type int32 = ::std::os::raw::c_int;
pub type uint32 = ::std::os::raw::c_uint;
pub type int64 = ::std::os::raw::c_long;
pub type uint64 = ::std::os::raw::c_ulong;
pub type uint16_vap = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIFFHeaderCommon {
    pub tiff_magic: uint16,
    pub tiff_version: uint16,
}
#[test]
fn bindgen_test_layout_TIFFHeaderCommon() {
    assert_eq!(
        ::std::mem::size_of::<TIFFHeaderCommon>(),
        4usize,
        concat!("Size of: ", stringify!(TIFFHeaderCommon))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFHeaderCommon>(),
        2usize,
        concat!("Alignment of ", stringify!(TIFFHeaderCommon))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFHeaderCommon>())).tiff_magic as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderCommon),
            "::",
            stringify!(tiff_magic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFHeaderCommon>())).tiff_version as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderCommon),
            "::",
            stringify!(tiff_version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIFFHeaderClassic {
    pub tiff_magic: uint16,
    pub tiff_version: uint16,
    pub tiff_diroff: uint32,
}
#[test]
fn bindgen_test_layout_TIFFHeaderClassic() {
    assert_eq!(
        ::std::mem::size_of::<TIFFHeaderClassic>(),
        8usize,
        concat!("Size of: ", stringify!(TIFFHeaderClassic))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFHeaderClassic>(),
        4usize,
        concat!("Alignment of ", stringify!(TIFFHeaderClassic))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFHeaderClassic>())).tiff_magic as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderClassic),
            "::",
            stringify!(tiff_magic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFHeaderClassic>())).tiff_version as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderClassic),
            "::",
            stringify!(tiff_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFHeaderClassic>())).tiff_diroff as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderClassic),
            "::",
            stringify!(tiff_diroff)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIFFHeaderBig {
    pub tiff_magic: uint16,
    pub tiff_version: uint16,
    pub tiff_offsetsize: uint16,
    pub tiff_unused: uint16,
    pub tiff_diroff: uint64,
}
#[test]
fn bindgen_test_layout_TIFFHeaderBig() {
    assert_eq!(
        ::std::mem::size_of::<TIFFHeaderBig>(),
        16usize,
        concat!("Size of: ", stringify!(TIFFHeaderBig))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFHeaderBig>(),
        8usize,
        concat!("Alignment of ", stringify!(TIFFHeaderBig))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFHeaderBig>())).tiff_magic as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderBig),
            "::",
            stringify!(tiff_magic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFHeaderBig>())).tiff_version as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderBig),
            "::",
            stringify!(tiff_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFHeaderBig>())).tiff_offsetsize as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderBig),
            "::",
            stringify!(tiff_offsetsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFHeaderBig>())).tiff_unused as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderBig),
            "::",
            stringify!(tiff_unused)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFHeaderBig>())).tiff_diroff as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderBig),
            "::",
            stringify!(tiff_diroff)
        )
    );
}
pub const TIFFDataType_TIFF_NOTYPE: TIFFDataType = 0;
pub const TIFFDataType_TIFF_BYTE: TIFFDataType = 1;
pub const TIFFDataType_TIFF_ASCII: TIFFDataType = 2;
pub const TIFFDataType_TIFF_SHORT: TIFFDataType = 3;
pub const TIFFDataType_TIFF_LONG: TIFFDataType = 4;
pub const TIFFDataType_TIFF_RATIONAL: TIFFDataType = 5;
pub const TIFFDataType_TIFF_SBYTE: TIFFDataType = 6;
pub const TIFFDataType_TIFF_UNDEFINED: TIFFDataType = 7;
pub const TIFFDataType_TIFF_SSHORT: TIFFDataType = 8;
pub const TIFFDataType_TIFF_SLONG: TIFFDataType = 9;
pub const TIFFDataType_TIFF_SRATIONAL: TIFFDataType = 10;
pub const TIFFDataType_TIFF_FLOAT: TIFFDataType = 11;
pub const TIFFDataType_TIFF_DOUBLE: TIFFDataType = 12;
pub const TIFFDataType_TIFF_IFD: TIFFDataType = 13;
pub const TIFFDataType_TIFF_LONG8: TIFFDataType = 16;
pub const TIFFDataType_TIFF_SLONG8: TIFFDataType = 17;
pub const TIFFDataType_TIFF_IFD8: TIFFDataType = 18;
pub type TIFFDataType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tiff {
    _unused: [u8; 0],
}
pub type TIFF = tiff;
pub type tmsize_t = ::std::os::raw::c_long;
pub type toff_t = uint64;
pub type ttag_t = uint32;
pub type tdir_t = uint16;
pub type tsample_t = uint16;
pub type tstrile_t = uint32;
pub type tstrip_t = tstrile_t;
pub type ttile_t = tstrile_t;
pub type tsize_t = tmsize_t;
pub type tdata_t = *mut ::std::os::raw::c_void;
pub type thandle_t = *mut ::std::os::raw::c_void;
pub type TIFFRGBValue = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIFFDisplay {
    pub d_mat: [[f32; 3usize]; 3usize],
    pub d_YCR: f32,
    pub d_YCG: f32,
    pub d_YCB: f32,
    pub d_Vrwr: uint32,
    pub d_Vrwg: uint32,
    pub d_Vrwb: uint32,
    pub d_Y0R: f32,
    pub d_Y0G: f32,
    pub d_Y0B: f32,
    pub d_gammaR: f32,
    pub d_gammaG: f32,
    pub d_gammaB: f32,
}
#[test]
fn bindgen_test_layout_TIFFDisplay() {
    assert_eq!(
        ::std::mem::size_of::<TIFFDisplay>(),
        84usize,
        concat!("Size of: ", stringify!(TIFFDisplay))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFDisplay>(),
        4usize,
        concat!("Alignment of ", stringify!(TIFFDisplay))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFDisplay>())).d_mat as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDisplay),
            "::",
            stringify!(d_mat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFDisplay>())).d_YCR as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDisplay),
            "::",
            stringify!(d_YCR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFDisplay>())).d_YCG as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDisplay),
            "::",
            stringify!(d_YCG)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFDisplay>())).d_YCB as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDisplay),
            "::",
            stringify!(d_YCB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFDisplay>())).d_Vrwr as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDisplay),
            "::",
            stringify!(d_Vrwr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFDisplay>())).d_Vrwg as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDisplay),
            "::",
            stringify!(d_Vrwg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFDisplay>())).d_Vrwb as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDisplay),
            "::",
            stringify!(d_Vrwb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFDisplay>())).d_Y0R as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDisplay),
            "::",
            stringify!(d_Y0R)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFDisplay>())).d_Y0G as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDisplay),
            "::",
            stringify!(d_Y0G)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFDisplay>())).d_Y0B as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDisplay),
            "::",
            stringify!(d_Y0B)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFDisplay>())).d_gammaR as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDisplay),
            "::",
            stringify!(d_gammaR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFDisplay>())).d_gammaG as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDisplay),
            "::",
            stringify!(d_gammaG)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFDisplay>())).d_gammaB as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDisplay),
            "::",
            stringify!(d_gammaB)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIFFYCbCrToRGB {
    pub clamptab: *mut TIFFRGBValue,
    pub Cr_r_tab: *mut ::std::os::raw::c_int,
    pub Cb_b_tab: *mut ::std::os::raw::c_int,
    pub Cr_g_tab: *mut int32,
    pub Cb_g_tab: *mut int32,
    pub Y_tab: *mut int32,
}
#[test]
fn bindgen_test_layout_TIFFYCbCrToRGB() {
    assert_eq!(
        ::std::mem::size_of::<TIFFYCbCrToRGB>(),
        48usize,
        concat!("Size of: ", stringify!(TIFFYCbCrToRGB))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFYCbCrToRGB>(),
        8usize,
        concat!("Alignment of ", stringify!(TIFFYCbCrToRGB))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFYCbCrToRGB>())).clamptab as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFYCbCrToRGB),
            "::",
            stringify!(clamptab)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFYCbCrToRGB>())).Cr_r_tab as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFYCbCrToRGB),
            "::",
            stringify!(Cr_r_tab)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFYCbCrToRGB>())).Cb_b_tab as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFYCbCrToRGB),
            "::",
            stringify!(Cb_b_tab)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFYCbCrToRGB>())).Cr_g_tab as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFYCbCrToRGB),
            "::",
            stringify!(Cr_g_tab)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFYCbCrToRGB>())).Cb_g_tab as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFYCbCrToRGB),
            "::",
            stringify!(Cb_g_tab)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFYCbCrToRGB>())).Y_tab as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFYCbCrToRGB),
            "::",
            stringify!(Y_tab)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TIFFCIELabToRGB {
    pub range: ::std::os::raw::c_int,
    pub rstep: f32,
    pub gstep: f32,
    pub bstep: f32,
    pub X0: f32,
    pub Y0: f32,
    pub Z0: f32,
    pub display: TIFFDisplay,
    pub Yr2r: [f32; 1501usize],
    pub Yg2g: [f32; 1501usize],
    pub Yb2b: [f32; 1501usize],
}
#[test]
fn bindgen_test_layout_TIFFCIELabToRGB() {
    assert_eq!(
        ::std::mem::size_of::<TIFFCIELabToRGB>(),
        18124usize,
        concat!("Size of: ", stringify!(TIFFCIELabToRGB))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFCIELabToRGB>(),
        4usize,
        concat!("Alignment of ", stringify!(TIFFCIELabToRGB))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFCIELabToRGB>())).range as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFCIELabToRGB),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFCIELabToRGB>())).rstep as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFCIELabToRGB),
            "::",
            stringify!(rstep)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFCIELabToRGB>())).gstep as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFCIELabToRGB),
            "::",
            stringify!(gstep)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFCIELabToRGB>())).bstep as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFCIELabToRGB),
            "::",
            stringify!(bstep)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFCIELabToRGB>())).X0 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFCIELabToRGB),
            "::",
            stringify!(X0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFCIELabToRGB>())).Y0 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFCIELabToRGB),
            "::",
            stringify!(Y0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFCIELabToRGB>())).Z0 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFCIELabToRGB),
            "::",
            stringify!(Z0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFCIELabToRGB>())).display as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFCIELabToRGB),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFCIELabToRGB>())).Yr2r as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFCIELabToRGB),
            "::",
            stringify!(Yr2r)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFCIELabToRGB>())).Yg2g as *const _ as usize
        },
        6116usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFCIELabToRGB),
            "::",
            stringify!(Yg2g)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFCIELabToRGB>())).Yb2b as *const _ as usize
        },
        12120usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFCIELabToRGB),
            "::",
            stringify!(Yb2b)
        )
    );
}
pub type TIFFRGBAImage = _TIFFRGBAImage;
pub type tileContigRoutine = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut TIFFRGBAImage,
        arg2: *mut uint32,
        arg3: uint32,
        arg4: uint32,
        arg5: uint32,
        arg6: uint32,
        arg7: int32,
        arg8: int32,
        arg9: *mut ::std::os::raw::c_uchar,
    ),
>;
pub type tileSeparateRoutine = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut TIFFRGBAImage,
        arg2: *mut uint32,
        arg3: uint32,
        arg4: uint32,
        arg5: uint32,
        arg6: uint32,
        arg7: int32,
        arg8: int32,
        arg9: *mut ::std::os::raw::c_uchar,
        arg10: *mut ::std::os::raw::c_uchar,
        arg11: *mut ::std::os::raw::c_uchar,
        arg12: *mut ::std::os::raw::c_uchar,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TIFFRGBAImage {
    pub tif: *mut TIFF,
    pub stoponerr: ::std::os::raw::c_int,
    pub isContig: ::std::os::raw::c_int,
    pub alpha: ::std::os::raw::c_int,
    pub width: uint32,
    pub height: uint32,
    pub bitspersample: uint16,
    pub samplesperpixel: uint16,
    pub orientation: uint16,
    pub req_orientation: uint16,
    pub photometric: uint16,
    pub redcmap: *mut uint16,
    pub greencmap: *mut uint16,
    pub bluecmap: *mut uint16,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TIFFRGBAImage,
            arg2: *mut uint32,
            arg3: uint32,
            arg4: uint32,
        ) -> ::std::os::raw::c_int,
    >,
    pub put: _TIFFRGBAImage__bindgen_ty_1,
    pub Map: *mut TIFFRGBValue,
    pub BWmap: *mut *mut uint32,
    pub PALmap: *mut *mut uint32,
    pub ycbcr: *mut TIFFYCbCrToRGB,
    pub cielab: *mut TIFFCIELabToRGB,
    pub UaToAa: *mut uint8,
    pub Bitdepth16To8: *mut uint8,
    pub row_offset: ::std::os::raw::c_int,
    pub col_offset: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _TIFFRGBAImage__bindgen_ty_1 {
    pub any: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TIFFRGBAImage)>,
    pub contig: tileContigRoutine,
    pub separate: tileSeparateRoutine,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__TIFFRGBAImage__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_TIFFRGBAImage__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_TIFFRGBAImage__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_TIFFRGBAImage__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_TIFFRGBAImage__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage__bindgen_ty_1>())).any as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage__bindgen_ty_1),
            "::",
            stringify!(any)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage__bindgen_ty_1>())).contig
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage__bindgen_ty_1),
            "::",
            stringify!(contig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage__bindgen_ty_1>())).separate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage__bindgen_ty_1),
            "::",
            stringify!(separate)
        )
    );
}
#[test]
fn bindgen_test_layout__TIFFRGBAImage() {
    assert_eq!(
        ::std::mem::size_of::<_TIFFRGBAImage>(),
        144usize,
        concat!("Size of: ", stringify!(_TIFFRGBAImage))
    );
    assert_eq!(
        ::std::mem::align_of::<_TIFFRGBAImage>(),
        8usize,
        concat!("Alignment of ", stringify!(_TIFFRGBAImage))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).tif as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(tif)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).stoponerr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(stoponerr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).isContig as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(isContig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).alpha as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(alpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).width as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).height as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).bitspersample as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(bitspersample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).samplesperpixel as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(samplesperpixel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).orientation as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).req_orientation as *const _
                as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(req_orientation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).photometric as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(photometric)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).redcmap as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(redcmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).greencmap as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(greencmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).bluecmap as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(bluecmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).get as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).put as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(put)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).Map as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(Map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).BWmap as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(BWmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).PALmap as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(PALmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).ycbcr as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(ycbcr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).cielab as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(cielab)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).UaToAa as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(UaToAa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).Bitdepth16To8 as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(Bitdepth16To8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).row_offset as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(row_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIFFRGBAImage>())).col_offset as *const _
                as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFRGBAImage),
            "::",
            stringify!(col_offset)
        )
    );
}
pub type TIFFInitMethod = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut TIFF,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIFFCodec {
    pub name: *mut ::std::os::raw::c_char,
    pub scheme: uint16,
    pub init: TIFFInitMethod,
}
#[test]
fn bindgen_test_layout_TIFFCodec() {
    assert_eq!(
        ::std::mem::size_of::<TIFFCodec>(),
        24usize,
        concat!("Size of: ", stringify!(TIFFCodec))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFCodec>(),
        8usize,
        concat!("Alignment of ", stringify!(TIFFCodec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TIFFCodec>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFCodec),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TIFFCodec>())).scheme as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFCodec),
            "::",
            stringify!(scheme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TIFFCodec>())).init as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFCodec),
            "::",
            stringify!(init)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize
        },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize
        },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(
        __filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(
        __fd: ::std::os::raw::c_int,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    );
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(
        __w: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(
        __stream: *mut FILE,
        __pos: *const fpos_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type TIFFErrorHandler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ),
>;
pub type TIFFErrorHandlerExt = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: thandle_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ),
>;
pub type TIFFReadWriteProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: thandle_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: tmsize_t,
    ) -> tmsize_t,
>;
pub type TIFFSeekProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: thandle_t,
        arg2: toff_t,
        arg3: ::std::os::raw::c_int,
    ) -> toff_t,
>;
pub type TIFFCloseProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: thandle_t) -> ::std::os::raw::c_int,
>;
pub type TIFFSizeProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: thandle_t) -> toff_t>;
pub type TIFFMapFileProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: thandle_t,
        base: *mut *mut ::std::os::raw::c_void,
        size: *mut toff_t,
    ) -> ::std::os::raw::c_int,
>;
pub type TIFFUnmapFileProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: thandle_t,
        base: *mut ::std::os::raw::c_void,
        size: toff_t,
    ),
>;
pub type TIFFExtendProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut TIFF)>;
extern "C" {
    pub fn TIFFGetVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TIFFFindCODEC(arg1: uint16) -> *const TIFFCodec;
}
extern "C" {
    pub fn TIFFRegisterCODEC(
        arg1: uint16,
        arg2: *const ::std::os::raw::c_char,
        arg3: TIFFInitMethod,
    ) -> *mut TIFFCodec;
}
extern "C" {
    pub fn TIFFUnRegisterCODEC(arg1: *mut TIFFCodec);
}
extern "C" {
    pub fn TIFFIsCODECConfigured(arg1: uint16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFGetConfiguredCODECs() -> *mut TIFFCodec;
}
extern "C" {
    pub fn _TIFFmalloc(s: tmsize_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _TIFFcalloc(
        nmemb: tmsize_t,
        siz: tmsize_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _TIFFrealloc(
        p: *mut ::std::os::raw::c_void,
        s: tmsize_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _TIFFmemset(
        p: *mut ::std::os::raw::c_void,
        v: ::std::os::raw::c_int,
        c: tmsize_t,
    );
}
extern "C" {
    pub fn _TIFFmemcpy(
        d: *mut ::std::os::raw::c_void,
        s: *const ::std::os::raw::c_void,
        c: tmsize_t,
    );
}
extern "C" {
    pub fn _TIFFmemcmp(
        p1: *const ::std::os::raw::c_void,
        p2: *const ::std::os::raw::c_void,
        c: tmsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _TIFFfree(p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn TIFFGetTagListCount(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFGetTagListEntry(
        arg1: *mut TIFF,
        tag_index: ::std::os::raw::c_int,
    ) -> uint32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TIFFField {
    _unused: [u8; 0],
}
pub type TIFFField = _TIFFField;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TIFFFieldArray {
    _unused: [u8; 0],
}
pub type TIFFFieldArray = _TIFFFieldArray;
extern "C" {
    pub fn TIFFFindField(
        arg1: *mut TIFF,
        arg2: uint32,
        arg3: TIFFDataType,
    ) -> *const TIFFField;
}
extern "C" {
    pub fn TIFFFieldWithTag(arg1: *mut TIFF, arg2: uint32) -> *const TIFFField;
}
extern "C" {
    pub fn TIFFFieldWithName(
        arg1: *mut TIFF,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const TIFFField;
}
extern "C" {
    pub fn TIFFFieldTag(arg1: *const TIFFField) -> uint32;
}
extern "C" {
    pub fn TIFFFieldName(arg1: *const TIFFField) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TIFFFieldDataType(arg1: *const TIFFField) -> TIFFDataType;
}
extern "C" {
    pub fn TIFFFieldPassCount(arg1: *const TIFFField) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFFieldReadCount(arg1: *const TIFFField) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFFieldWriteCount(arg1: *const TIFFField) -> ::std::os::raw::c_int;
}
pub type TIFFVSetMethod = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut TIFF,
        arg2: uint32,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int,
>;
pub type TIFFVGetMethod = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut TIFF,
        arg2: uint32,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int,
>;
pub type TIFFPrintMethod = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut TIFF,
        arg2: *mut FILE,
        arg3: ::std::os::raw::c_long,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIFFTagMethods {
    pub vsetfield: TIFFVSetMethod,
    pub vgetfield: TIFFVGetMethod,
    pub printdir: TIFFPrintMethod,
}
#[test]
fn bindgen_test_layout_TIFFTagMethods() {
    assert_eq!(
        ::std::mem::size_of::<TIFFTagMethods>(),
        24usize,
        concat!("Size of: ", stringify!(TIFFTagMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFTagMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(TIFFTagMethods))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFTagMethods>())).vsetfield as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFTagMethods),
            "::",
            stringify!(vsetfield)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFTagMethods>())).vgetfield as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFTagMethods),
            "::",
            stringify!(vgetfield)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFTagMethods>())).printdir as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFTagMethods),
            "::",
            stringify!(printdir)
        )
    );
}
extern "C" {
    pub fn TIFFAccessTagMethods(arg1: *mut TIFF) -> *mut TIFFTagMethods;
}
extern "C" {
    pub fn TIFFGetClientInfo(
        arg1: *mut TIFF,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TIFFSetClientInfo(
        arg1: *mut TIFF,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn TIFFCleanup(tif: *mut TIFF);
}
extern "C" {
    pub fn TIFFClose(tif: *mut TIFF);
}
extern "C" {
    pub fn TIFFFlush(tif: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFFlushData(tif: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFGetField(tif: *mut TIFF, tag: uint32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFVGetField(
        tif: *mut TIFF,
        tag: uint32,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFGetFieldDefaulted(
        tif: *mut TIFF,
        tag: uint32,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFVGetFieldDefaulted(
        tif: *mut TIFF,
        tag: uint32,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFReadDirectory(tif: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFReadCustomDirectory(
        tif: *mut TIFF,
        diroff: toff_t,
        infoarray: *const TIFFFieldArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFReadEXIFDirectory(
        tif: *mut TIFF,
        diroff: toff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFScanlineSize64(tif: *mut TIFF) -> uint64;
}
extern "C" {
    pub fn TIFFScanlineSize(tif: *mut TIFF) -> tmsize_t;
}
extern "C" {
    pub fn TIFFRasterScanlineSize64(tif: *mut TIFF) -> uint64;
}
extern "C" {
    pub fn TIFFRasterScanlineSize(tif: *mut TIFF) -> tmsize_t;
}
extern "C" {
    pub fn TIFFStripSize64(tif: *mut TIFF) -> uint64;
}
extern "C" {
    pub fn TIFFStripSize(tif: *mut TIFF) -> tmsize_t;
}
extern "C" {
    pub fn TIFFRawStripSize64(tif: *mut TIFF, strip: uint32) -> uint64;
}
extern "C" {
    pub fn TIFFRawStripSize(tif: *mut TIFF, strip: uint32) -> tmsize_t;
}
extern "C" {
    pub fn TIFFVStripSize64(tif: *mut TIFF, nrows: uint32) -> uint64;
}
extern "C" {
    pub fn TIFFVStripSize(tif: *mut TIFF, nrows: uint32) -> tmsize_t;
}
extern "C" {
    pub fn TIFFTileRowSize64(tif: *mut TIFF) -> uint64;
}
extern "C" {
    pub fn TIFFTileRowSize(tif: *mut TIFF) -> tmsize_t;
}
extern "C" {
    pub fn TIFFTileSize64(tif: *mut TIFF) -> uint64;
}
extern "C" {
    pub fn TIFFTileSize(tif: *mut TIFF) -> tmsize_t;
}
extern "C" {
    pub fn TIFFVTileSize64(tif: *mut TIFF, nrows: uint32) -> uint64;
}
extern "C" {
    pub fn TIFFVTileSize(tif: *mut TIFF, nrows: uint32) -> tmsize_t;
}
extern "C" {
    pub fn TIFFDefaultStripSize(tif: *mut TIFF, request: uint32) -> uint32;
}
extern "C" {
    pub fn TIFFDefaultTileSize(
        arg1: *mut TIFF,
        arg2: *mut uint32,
        arg3: *mut uint32,
    );
}
extern "C" {
    pub fn TIFFFileno(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFSetFileno(
        arg1: *mut TIFF,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFClientdata(arg1: *mut TIFF) -> thandle_t;
}
extern "C" {
    pub fn TIFFSetClientdata(arg1: *mut TIFF, arg2: thandle_t) -> thandle_t;
}
extern "C" {
    pub fn TIFFGetMode(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFSetMode(
        arg1: *mut TIFF,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFIsTiled(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFIsByteSwapped(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFIsUpSampled(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFIsMSB2LSB(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFIsBigEndian(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFGetReadProc(arg1: *mut TIFF) -> TIFFReadWriteProc;
}
extern "C" {
    pub fn TIFFGetWriteProc(arg1: *mut TIFF) -> TIFFReadWriteProc;
}
extern "C" {
    pub fn TIFFGetSeekProc(arg1: *mut TIFF) -> TIFFSeekProc;
}
extern "C" {
    pub fn TIFFGetCloseProc(arg1: *mut TIFF) -> TIFFCloseProc;
}
extern "C" {
    pub fn TIFFGetSizeProc(arg1: *mut TIFF) -> TIFFSizeProc;
}
extern "C" {
    pub fn TIFFGetMapFileProc(arg1: *mut TIFF) -> TIFFMapFileProc;
}
extern "C" {
    pub fn TIFFGetUnmapFileProc(arg1: *mut TIFF) -> TIFFUnmapFileProc;
}
extern "C" {
    pub fn TIFFCurrentRow(arg1: *mut TIFF) -> uint32;
}
extern "C" {
    pub fn TIFFCurrentDirectory(arg1: *mut TIFF) -> uint16;
}
extern "C" {
    pub fn TIFFNumberOfDirectories(arg1: *mut TIFF) -> uint16;
}
extern "C" {
    pub fn TIFFCurrentDirOffset(arg1: *mut TIFF) -> uint64;
}
extern "C" {
    pub fn TIFFCurrentStrip(arg1: *mut TIFF) -> uint32;
}
extern "C" {
    pub fn TIFFCurrentTile(tif: *mut TIFF) -> uint32;
}
extern "C" {
    pub fn TIFFReadBufferSetup(
        tif: *mut TIFF,
        bp: *mut ::std::os::raw::c_void,
        size: tmsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFWriteBufferSetup(
        tif: *mut TIFF,
        bp: *mut ::std::os::raw::c_void,
        size: tmsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFSetupStrips(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFWriteCheck(
        arg1: *mut TIFF,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFFreeDirectory(arg1: *mut TIFF);
}
extern "C" {
    pub fn TIFFCreateDirectory(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFCreateCustomDirectory(
        arg1: *mut TIFF,
        arg2: *const TIFFFieldArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFCreateEXIFDirectory(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFLastDirectory(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFSetDirectory(arg1: *mut TIFF, arg2: uint16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFSetSubDirectory(
        arg1: *mut TIFF,
        arg2: uint64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFUnlinkDirectory(
        arg1: *mut TIFF,
        arg2: uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFSetField(arg1: *mut TIFF, arg2: uint32, ...)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFVSetField(
        arg1: *mut TIFF,
        arg2: uint32,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFUnsetField(arg1: *mut TIFF, arg2: uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFWriteDirectory(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFWriteCustomDirectory(
        arg1: *mut TIFF,
        arg2: *mut uint64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFCheckpointDirectory(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFRewriteDirectory(arg1: *mut TIFF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFPrintDirectory(
        arg1: *mut TIFF,
        arg2: *mut FILE,
        arg3: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn TIFFReadScanline(
        tif: *mut TIFF,
        buf: *mut ::std::os::raw::c_void,
        row: uint32,
        sample: uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFWriteScanline(
        tif: *mut TIFF,
        buf: *mut ::std::os::raw::c_void,
        row: uint32,
        sample: uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFReadRGBAImage(
        arg1: *mut TIFF,
        arg2: uint32,
        arg3: uint32,
        arg4: *mut uint32,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFReadRGBAImageOriented(
        arg1: *mut TIFF,
        arg2: uint32,
        arg3: uint32,
        arg4: *mut uint32,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFReadRGBAStrip(
        arg1: *mut TIFF,
        arg2: uint32,
        arg3: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFReadRGBATile(
        arg1: *mut TIFF,
        arg2: uint32,
        arg3: uint32,
        arg4: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFReadRGBAStripExt(
        arg1: *mut TIFF,
        arg2: uint32,
        arg3: *mut uint32,
        stop_on_error: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFReadRGBATileExt(
        arg1: *mut TIFF,
        arg2: uint32,
        arg3: uint32,
        arg4: *mut uint32,
        stop_on_error: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFRGBAImageOK(
        arg1: *mut TIFF,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFRGBAImageBegin(
        arg1: *mut TIFFRGBAImage,
        arg2: *mut TIFF,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFRGBAImageGet(
        arg1: *mut TIFFRGBAImage,
        arg2: *mut uint32,
        arg3: uint32,
        arg4: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFRGBAImageEnd(arg1: *mut TIFFRGBAImage);
}
extern "C" {
    pub fn TIFFOpen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut TIFF;
}
extern "C" {
    pub fn TIFFFdOpen(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut TIFF;
}
extern "C" {
    pub fn TIFFClientOpen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: thandle_t,
        arg4: TIFFReadWriteProc,
        arg5: TIFFReadWriteProc,
        arg6: TIFFSeekProc,
        arg7: TIFFCloseProc,
        arg8: TIFFSizeProc,
        arg9: TIFFMapFileProc,
        arg10: TIFFUnmapFileProc,
    ) -> *mut TIFF;
}
extern "C" {
    pub fn TIFFFileName(arg1: *mut TIFF) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TIFFSetFileName(
        arg1: *mut TIFF,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TIFFError(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn TIFFErrorExt(
        arg1: thandle_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn TIFFWarning(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn TIFFWarningExt(
        arg1: thandle_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn TIFFSetErrorHandler(arg1: TIFFErrorHandler) -> TIFFErrorHandler;
}
extern "C" {
    pub fn TIFFSetErrorHandlerExt(arg1: TIFFErrorHandlerExt) -> TIFFErrorHandlerExt;
}
extern "C" {
    pub fn TIFFSetWarningHandler(arg1: TIFFErrorHandler) -> TIFFErrorHandler;
}
extern "C" {
    pub fn TIFFSetWarningHandlerExt(
        arg1: TIFFErrorHandlerExt,
    ) -> TIFFErrorHandlerExt;
}
extern "C" {
    pub fn TIFFSetTagExtender(arg1: TIFFExtendProc) -> TIFFExtendProc;
}
extern "C" {
    pub fn TIFFComputeTile(
        tif: *mut TIFF,
        x: uint32,
        y: uint32,
        z: uint32,
        s: uint16,
    ) -> uint32;
}
extern "C" {
    pub fn TIFFCheckTile(
        tif: *mut TIFF,
        x: uint32,
        y: uint32,
        z: uint32,
        s: uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFNumberOfTiles(arg1: *mut TIFF) -> uint32;
}
extern "C" {
    pub fn TIFFReadTile(
        tif: *mut TIFF,
        buf: *mut ::std::os::raw::c_void,
        x: uint32,
        y: uint32,
        z: uint32,
        s: uint16,
    ) -> tmsize_t;
}
extern "C" {
    pub fn TIFFWriteTile(
        tif: *mut TIFF,
        buf: *mut ::std::os::raw::c_void,
        x: uint32,
        y: uint32,
        z: uint32,
        s: uint16,
    ) -> tmsize_t;
}
extern "C" {
    pub fn TIFFComputeStrip(arg1: *mut TIFF, arg2: uint32, arg3: uint16) -> uint32;
}
extern "C" {
    pub fn TIFFNumberOfStrips(arg1: *mut TIFF) -> uint32;
}
extern "C" {
    pub fn TIFFReadEncodedStrip(
        tif: *mut TIFF,
        strip: uint32,
        buf: *mut ::std::os::raw::c_void,
        size: tmsize_t,
    ) -> tmsize_t;
}
extern "C" {
    pub fn TIFFReadRawStrip(
        tif: *mut TIFF,
        strip: uint32,
        buf: *mut ::std::os::raw::c_void,
        size: tmsize_t,
    ) -> tmsize_t;
}
extern "C" {
    pub fn TIFFReadEncodedTile(
        tif: *mut TIFF,
        tile: uint32,
        buf: *mut ::std::os::raw::c_void,
        size: tmsize_t,
    ) -> tmsize_t;
}
extern "C" {
    pub fn TIFFReadRawTile(
        tif: *mut TIFF,
        tile: uint32,
        buf: *mut ::std::os::raw::c_void,
        size: tmsize_t,
    ) -> tmsize_t;
}
extern "C" {
    pub fn TIFFWriteEncodedStrip(
        tif: *mut TIFF,
        strip: uint32,
        data: *mut ::std::os::raw::c_void,
        cc: tmsize_t,
    ) -> tmsize_t;
}
extern "C" {
    pub fn TIFFWriteRawStrip(
        tif: *mut TIFF,
        strip: uint32,
        data: *mut ::std::os::raw::c_void,
        cc: tmsize_t,
    ) -> tmsize_t;
}
extern "C" {
    pub fn TIFFWriteEncodedTile(
        tif: *mut TIFF,
        tile: uint32,
        data: *mut ::std::os::raw::c_void,
        cc: tmsize_t,
    ) -> tmsize_t;
}
extern "C" {
    pub fn TIFFWriteRawTile(
        tif: *mut TIFF,
        tile: uint32,
        data: *mut ::std::os::raw::c_void,
        cc: tmsize_t,
    ) -> tmsize_t;
}
extern "C" {
    pub fn TIFFDataWidth(arg1: TIFFDataType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFSetWriteOffset(tif: *mut TIFF, off: toff_t);
}
extern "C" {
    pub fn TIFFSwabShort(arg1: *mut uint16);
}
extern "C" {
    pub fn TIFFSwabLong(arg1: *mut uint32);
}
extern "C" {
    pub fn TIFFSwabLong8(arg1: *mut uint64);
}
extern "C" {
    pub fn TIFFSwabFloat(arg1: *mut f32);
}
extern "C" {
    pub fn TIFFSwabDouble(arg1: *mut f64);
}
extern "C" {
    pub fn TIFFSwabArrayOfShort(wp: *mut uint16, n: tmsize_t);
}
extern "C" {
    pub fn TIFFSwabArrayOfTriples(tp: *mut uint8, n: tmsize_t);
}
extern "C" {
    pub fn TIFFSwabArrayOfLong(lp: *mut uint32, n: tmsize_t);
}
extern "C" {
    pub fn TIFFSwabArrayOfLong8(lp: *mut uint64, n: tmsize_t);
}
extern "C" {
    pub fn TIFFSwabArrayOfFloat(fp: *mut f32, n: tmsize_t);
}
extern "C" {
    pub fn TIFFSwabArrayOfDouble(dp: *mut f64, n: tmsize_t);
}
extern "C" {
    pub fn TIFFReverseBits(cp: *mut uint8, n: tmsize_t);
}
extern "C" {
    pub fn TIFFGetBitRevTable(
        arg1: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn LogL16toY(arg1: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn LogL10toY(arg1: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn XYZtoRGB24(arg1: *mut f32, arg2: *mut uint8);
}
extern "C" {
    pub fn uv_decode(
        arg1: *mut f64,
        arg2: *mut f64,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LogLuv24toXYZ(arg1: uint32, arg2: *mut f32);
}
extern "C" {
    pub fn LogLuv32toXYZ(arg1: uint32, arg2: *mut f32);
}
extern "C" {
    pub fn LogL16fromY(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LogL10fromY(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uv_encode(
        arg1: f64,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LogLuv24fromXYZ(arg1: *mut f32, arg2: ::std::os::raw::c_int) -> uint32;
}
extern "C" {
    pub fn LogLuv32fromXYZ(arg1: *mut f32, arg2: ::std::os::raw::c_int) -> uint32;
}
extern "C" {
    pub fn TIFFCIELabToRGBInit(
        arg1: *mut TIFFCIELabToRGB,
        arg2: *const TIFFDisplay,
        arg3: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFCIELabToXYZ(
        arg1: *mut TIFFCIELabToRGB,
        arg2: uint32,
        arg3: int32,
        arg4: int32,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut f32,
    );
}
extern "C" {
    pub fn TIFFXYZToRGB(
        arg1: *mut TIFFCIELabToRGB,
        arg2: f32,
        arg3: f32,
        arg4: f32,
        arg5: *mut uint32,
        arg6: *mut uint32,
        arg7: *mut uint32,
    );
}
extern "C" {
    pub fn TIFFYCbCrToRGBInit(
        arg1: *mut TIFFYCbCrToRGB,
        arg2: *mut f32,
        arg3: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TIFFYCbCrtoRGB(
        arg1: *mut TIFFYCbCrToRGB,
        arg2: uint32,
        arg3: int32,
        arg4: int32,
        arg5: *mut uint32,
        arg6: *mut uint32,
        arg7: *mut uint32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIFFFieldInfo {
    pub field_tag: ttag_t,
    pub field_readcount: ::std::os::raw::c_short,
    pub field_writecount: ::std::os::raw::c_short,
    pub field_type: TIFFDataType,
    pub field_bit: ::std::os::raw::c_ushort,
    pub field_oktochange: ::std::os::raw::c_uchar,
    pub field_passcount: ::std::os::raw::c_uchar,
    pub field_name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TIFFFieldInfo() {
    assert_eq!(
        ::std::mem::size_of::<TIFFFieldInfo>(),
        24usize,
        concat!("Size of: ", stringify!(TIFFFieldInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFFieldInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TIFFFieldInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFFieldInfo>())).field_tag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFFieldInfo),
            "::",
            stringify!(field_tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFFieldInfo>())).field_readcount as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFFieldInfo),
            "::",
            stringify!(field_readcount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFFieldInfo>())).field_writecount as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFFieldInfo),
            "::",
            stringify!(field_writecount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFFieldInfo>())).field_type as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFFieldInfo),
            "::",
            stringify!(field_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFFieldInfo>())).field_bit as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFFieldInfo),
            "::",
            stringify!(field_bit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFFieldInfo>())).field_oktochange as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFFieldInfo),
            "::",
            stringify!(field_oktochange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFFieldInfo>())).field_passcount as *const _
                as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFFieldInfo),
            "::",
            stringify!(field_passcount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TIFFFieldInfo>())).field_name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFFieldInfo),
            "::",
            stringify!(field_name)
        )
    );
}
extern "C" {
    pub fn TIFFMergeFieldInfo(
        arg1: *mut TIFF,
        arg2: *const TIFFFieldInfo,
        arg3: uint32,
    ) -> ::std::os::raw::c_int;
}
pub type span_rx_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut ::std::os::raw::c_void,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type span_mod_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut ::std::os::raw::c_void,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type span_rx_fillin_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type span_tx_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut ::std::os::raw::c_void,
        amp: *mut i16,
        max_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type span_aligned_alloc_t = ::std::option::Option<
    unsafe extern "C" fn(
        alignment: size_t,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type span_aligned_free_t =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
pub type span_alloc_t = ::std::option::Option<
    unsafe extern "C" fn(size: size_t) -> *mut ::std::os::raw::c_void,
>;
pub type span_realloc_t = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type span_free_t =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn span_aligned_alloc(
        alignment: size_t,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn span_aligned_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn span_alloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn span_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn span_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn span_mem_allocators(
        custom_alloc: span_alloc_t,
        custom_realloc: span_realloc_t,
        custom_free: span_free_t,
        custom_aligned_alloc: span_aligned_alloc_t,
        custom_aligned_free: span_aligned_free_t,
    ) -> ::std::os::raw::c_int;
}
pub type message_handler_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    ),
>;
pub const SPAN_LOG_SEVERITY_MASK: ::std::os::raw::c_uint = 255;
pub const SPAN_LOG_SHOW_DATE: ::std::os::raw::c_uint = 256;
pub const SPAN_LOG_SHOW_SAMPLE_TIME: ::std::os::raw::c_uint = 512;
pub const SPAN_LOG_SHOW_SEVERITY: ::std::os::raw::c_uint = 1024;
pub const SPAN_LOG_SHOW_PROTOCOL: ::std::os::raw::c_uint = 2048;
pub const SPAN_LOG_SHOW_VARIANT: ::std::os::raw::c_uint = 4096;
pub const SPAN_LOG_SHOW_TAG: ::std::os::raw::c_uint = 8192;
pub const SPAN_LOG_SUPPRESS_LABELLING: ::std::os::raw::c_uint = 32768;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const SPAN_LOG_NONE: ::std::os::raw::c_uint = 0;
pub const SPAN_LOG_ERROR: ::std::os::raw::c_uint = 1;
pub const SPAN_LOG_WARNING: ::std::os::raw::c_uint = 2;
pub const SPAN_LOG_PROTOCOL_ERROR: ::std::os::raw::c_uint = 3;
pub const SPAN_LOG_PROTOCOL_WARNING: ::std::os::raw::c_uint = 4;
pub const SPAN_LOG_FLOW: ::std::os::raw::c_uint = 5;
pub const SPAN_LOG_FLOW_2: ::std::os::raw::c_uint = 6;
pub const SPAN_LOG_FLOW_3: ::std::os::raw::c_uint = 7;
pub const SPAN_LOG_DEBUG: ::std::os::raw::c_uint = 8;
pub const SPAN_LOG_DEBUG_2: ::std::os::raw::c_uint = 9;
pub const SPAN_LOG_DEBUG_3: ::std::os::raw::c_uint = 10;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct logging_state_s {
    _unused: [u8; 0],
}
pub type logging_state_t = logging_state_s;
extern "C" {
    pub fn span_log_test(
        s: *mut logging_state_t,
        level: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn span_log(
        s: *mut logging_state_t,
        level: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_log_buf(
        s: *mut logging_state_t,
        level: ::std::os::raw::c_int,
        tag: *const ::std::os::raw::c_char,
        buf: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_log_get_level(s: *mut logging_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_log_set_level(
        s: *mut logging_state_t,
        level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_log_get_tag(
        s: *mut logging_state_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn span_log_set_tag(
        s: *mut logging_state_t,
        tag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_log_get_protocol(
        s: *mut logging_state_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn span_log_set_protocol(
        s: *mut logging_state_t,
        protocol: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_log_set_sample_rate(
        s: *mut logging_state_t,
        samples_per_second: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_log_bump_samples(
        s: *mut logging_state_t,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_log_set_message_handler(
        s: *mut logging_state_t,
        func: message_handler_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn span_set_message_handler(
        func: message_handler_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn span_log_init(
        s: *mut logging_state_t,
        level: ::std::os::raw::c_int,
        tag: *const ::std::os::raw::c_char,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn span_log_release(s: *mut logging_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_log_free(s: *mut logging_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct complexf_t {
    pub re: f32,
    pub im: f32,
}
#[test]
fn bindgen_test_layout_complexf_t() {
    assert_eq!(
        ::std::mem::size_of::<complexf_t>(),
        8usize,
        concat!("Size of: ", stringify!(complexf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<complexf_t>(),
        4usize,
        concat!("Alignment of ", stringify!(complexf_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<complexf_t>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(complexf_t),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<complexf_t>())).im as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(complexf_t),
            "::",
            stringify!(im)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct complex_t {
    pub re: f64,
    pub im: f64,
}
#[test]
fn bindgen_test_layout_complex_t() {
    assert_eq!(
        ::std::mem::size_of::<complex_t>(),
        16usize,
        concat!("Size of: ", stringify!(complex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<complex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(complex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<complex_t>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(complex_t),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<complex_t>())).im as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(complex_t),
            "::",
            stringify!(im)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct complexi_t {
    pub re: ::std::os::raw::c_int,
    pub im: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_complexi_t() {
    assert_eq!(
        ::std::mem::size_of::<complexi_t>(),
        8usize,
        concat!("Size of: ", stringify!(complexi_t))
    );
    assert_eq!(
        ::std::mem::align_of::<complexi_t>(),
        4usize,
        concat!("Alignment of ", stringify!(complexi_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<complexi_t>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(complexi_t),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<complexi_t>())).im as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(complexi_t),
            "::",
            stringify!(im)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct complexi16_t {
    pub re: i16,
    pub im: i16,
}
#[test]
fn bindgen_test_layout_complexi16_t() {
    assert_eq!(
        ::std::mem::size_of::<complexi16_t>(),
        4usize,
        concat!("Size of: ", stringify!(complexi16_t))
    );
    assert_eq!(
        ::std::mem::align_of::<complexi16_t>(),
        2usize,
        concat!("Alignment of ", stringify!(complexi16_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<complexi16_t>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(complexi16_t),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<complexi16_t>())).im as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(complexi16_t),
            "::",
            stringify!(im)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct complexi32_t {
    pub re: i32,
    pub im: i32,
}
#[test]
fn bindgen_test_layout_complexi32_t() {
    assert_eq!(
        ::std::mem::size_of::<complexi32_t>(),
        8usize,
        concat!("Size of: ", stringify!(complexi32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<complexi32_t>(),
        4usize,
        concat!("Alignment of ", stringify!(complexi32_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<complexi32_t>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(complexi32_t),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<complexi32_t>())).im as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(complexi32_t),
            "::",
            stringify!(im)
        )
    );
}
extern "C" {
    pub fn bit_reverse16(data: u16) -> u16;
}
extern "C" {
    pub fn bit_reverse32(data: u32) -> u32;
}
extern "C" {
    pub fn bit_reverse_4bytes(data: u32) -> u32;
}
extern "C" {
    pub fn bit_reverse_8bytes(data: u64) -> u64;
}
extern "C" {
    pub fn bit_reverse(to: *mut u8, from: *const u8, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn one_bits32(x: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn make_mask32(x: u32) -> u32;
}
extern "C" {
    pub fn make_mask16(x: u16) -> u16;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bitstream_state_s {
    _unused: [u8; 0],
}
pub type bitstream_state_t = bitstream_state_s;
extern "C" {
    pub fn bitstream_put(
        s: *mut bitstream_state_t,
        c: *mut *mut u8,
        value: u32,
        bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn bitstream_get(
        s: *mut bitstream_state_t,
        c: *mut *const u8,
        bits: ::std::os::raw::c_int,
    ) -> u32;
}
extern "C" {
    pub fn bitstream_emit(s: *mut bitstream_state_t, c: *mut *mut u8);
}
extern "C" {
    pub fn bitstream_flush(s: *mut bitstream_state_t, c: *mut *mut u8);
}
extern "C" {
    pub fn bitstream_init(
        s: *mut bitstream_state_t,
        direction: ::std::os::raw::c_int,
    ) -> *mut bitstream_state_t;
}
extern "C" {
    pub fn bitstream_release(s: *mut bitstream_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bitstream_free(s: *mut bitstream_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct queue_state_s {
    _unused: [u8; 0],
}
pub type queue_state_t = queue_state_s;
extern "C" {
    pub fn queue_empty(s: *mut queue_state_t) -> bool;
}
extern "C" {
    pub fn queue_free_space(s: *mut queue_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn queue_contents(s: *mut queue_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn queue_flush(s: *mut queue_state_t);
}
extern "C" {
    pub fn queue_view(
        s: *mut queue_state_t,
        buf: *mut u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn queue_read(
        s: *mut queue_state_t,
        buf: *mut u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn queue_read_byte(s: *mut queue_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn queue_write(
        s: *mut queue_state_t,
        buf: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn queue_write_byte(
        s: *mut queue_state_t,
        byte: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn queue_state_test_msg(s: *mut queue_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn queue_read_msg(
        s: *mut queue_state_t,
        buf: *mut u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn queue_write_msg(
        s: *mut queue_state_t,
        buf: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn queue_init(
        s: *mut queue_state_t,
        len: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> *mut queue_state_t;
}
extern "C" {
    pub fn queue_release(s: *mut queue_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn queue_free(s: *mut queue_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct span_sched_s {
    _unused: [u8; 0],
}
pub type span_sched_t = span_sched_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct span_sched_state_s {
    _unused: [u8; 0],
}
pub type span_sched_state_t = span_sched_state_s;
pub type span_sched_callback_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut span_sched_state_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn span_schedule_next(s: *mut span_sched_state_t) -> u64;
}
extern "C" {
    pub fn span_schedule_time(s: *mut span_sched_state_t) -> u64;
}
extern "C" {
    pub fn span_schedule_event(
        s: *mut span_sched_state_t,
        us: ::std::os::raw::c_int,
        function: span_sched_callback_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_schedule_update(
        s: *mut span_sched_state_t,
        us: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn span_schedule_del(s: *mut span_sched_state_t, id: ::std::os::raw::c_int);
}
extern "C" {
    pub fn span_schedule_init(s: *mut span_sched_state_t)
        -> *mut span_sched_state_t;
}
extern "C" {
    pub fn span_schedule_release(
        s: *mut span_sched_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_schedule_free(s: *mut span_sched_state_t) -> ::std::os::raw::c_int;
}
pub const G711_ALAW: ::std::os::raw::c_uint = 0;
pub const G711_ULAW: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct g711_state_s {
    _unused: [u8; 0],
}
pub type g711_state_t = g711_state_s;
extern "C" {
    pub fn alaw_to_ulaw(alaw: u8) -> u8;
}
extern "C" {
    pub fn ulaw_to_alaw(ulaw: u8) -> u8;
}
extern "C" {
    pub fn g711_decode(
        s: *mut g711_state_t,
        amp: *mut i16,
        g711_data: *const u8,
        g711_bytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn g711_encode(
        s: *mut g711_state_t,
        g711_data: *mut u8,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn g711_transcode(
        s: *mut g711_state_t,
        g711_out: *mut u8,
        g711_in: *const u8,
        g711_bytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn g711_init(
        s: *mut g711_state_t,
        mode: ::std::os::raw::c_int,
    ) -> *mut g711_state_t;
}
extern "C" {
    pub fn g711_release(s: *mut g711_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn g711_free(s: *mut g711_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fixed_reciprocal16(x: u16, shift: *mut ::std::os::raw::c_int) -> u16;
}
extern "C" {
    pub fn fixed_divide16(y: u16, x: u16) -> u16;
}
extern "C" {
    pub fn fixed_divide32(y: u32, x: u16) -> u16;
}
extern "C" {
    pub fn fixed_log10_16(x: u16) -> i16;
}
extern "C" {
    pub fn fixed_log10_32(x: u32) -> i32;
}
extern "C" {
    pub fn fixed_sqrt16(x: u16) -> u16;
}
extern "C" {
    pub fn fixed_sqrt32(x: u32) -> u16;
}
extern "C" {
    pub fn fixed_sin(x: u16) -> i16;
}
extern "C" {
    pub fn fixed_cos(x: u16) -> i16;
}
extern "C" {
    pub fn fixed_atan2(y: i16, x: i16) -> u16;
}
extern "C" {
    pub fn vec_copyf(z: *mut f32, x: *const f32, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vec_copy(z: *mut f64, x: *const f64, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vec_negatef(z: *mut f32, x: *const f32, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vec_negate(z: *mut f64, x: *const f64, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vec_zerof(z: *mut f32, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vec_zero(z: *mut f64, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vec_setf(z: *mut f32, x: f32, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vec_set(z: *mut f64, x: f64, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vec_addf(
        z: *mut f32,
        x: *const f32,
        y: *const f32,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_add(
        z: *mut f64,
        x: *const f64,
        y: *const f64,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scaledxy_addf(
        z: *mut f32,
        x: *const f32,
        x_scale: f32,
        y: *const f32,
        y_scale: f32,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scaledxy_add(
        z: *mut f64,
        x: *const f64,
        x_scale: f64,
        y: *const f64,
        y_scale: f64,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scaledy_addf(
        z: *mut f32,
        x: *const f32,
        y: *const f32,
        y_scale: f32,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scaledy_add(
        z: *mut f64,
        x: *const f64,
        y: *const f64,
        y_scale: f64,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_subf(
        z: *mut f32,
        x: *const f32,
        y: *const f32,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_sub(
        z: *mut f64,
        x: *const f64,
        y: *const f64,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scaledxy_subf(
        z: *mut f32,
        x: *const f32,
        x_scale: f32,
        y: *const f32,
        y_scale: f32,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scaledxy_sub(
        z: *mut f64,
        x: *const f64,
        x_scale: f64,
        y: *const f64,
        y_scale: f64,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scaledx_subf(
        z: *mut f32,
        x: *const f32,
        x_scale: f32,
        y: *const f32,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scaledx_sub(
        z: *mut f64,
        x: *const f64,
        x_scale: f64,
        y: *const f64,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scaledy_subf(
        z: *mut f32,
        x: *const f32,
        y: *const f32,
        y_scale: f32,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scaledy_sub(
        z: *mut f64,
        x: *const f64,
        y: *const f64,
        y_scale: f64,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scalar_mulf(
        z: *mut f32,
        x: *const f32,
        y: f32,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scalar_mul(
        z: *mut f64,
        x: *const f64,
        y: f64,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scalar_addf(
        z: *mut f32,
        x: *const f32,
        y: f32,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scalar_add(
        z: *mut f64,
        x: *const f64,
        y: f64,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scalar_subf(
        z: *mut f32,
        x: *const f32,
        y: f32,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_scalar_sub(
        z: *mut f64,
        x: *const f64,
        y: f64,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_mulf(
        z: *mut f32,
        x: *const f32,
        y: *const f32,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_mul(
        z: *mut f64,
        x: *const f64,
        y: *const f64,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vec_dot_prodf(
        x: *const f32,
        y: *const f32,
        n: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn vec_dot_prod(
        x: *const f64,
        y: *const f64,
        n: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn vec_circular_dot_prodf(
        x: *const f32,
        y: *const f32,
        n: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn vec_lmsf(
        x: *const f32,
        y: *mut f32,
        n: ::std::os::raw::c_int,
        error: f32,
    );
}
extern "C" {
    pub fn vec_circular_lmsf(
        x: *const f32,
        y: *mut f32,
        n: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
        error: f32,
    );
}
extern "C" {
    pub fn cvec_mulf(
        z: *mut complexf_t,
        x: *const complexf_t,
        y: *const complexf_t,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn cvec_mul(
        z: *mut complex_t,
        x: *const complex_t,
        y: *const complex_t,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn cvec_dot_prodf(
        x: *const complexf_t,
        y: *const complexf_t,
        n: ::std::os::raw::c_int,
    ) -> complexf_t;
}
extern "C" {
    pub fn cvec_dot_prod(
        x: *const complex_t,
        y: *const complex_t,
        n: ::std::os::raw::c_int,
    ) -> complex_t;
}
extern "C" {
    pub fn cvec_circular_dot_prodf(
        x: *const complexf_t,
        y: *const complexf_t,
        n: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
    ) -> complexf_t;
}
extern "C" {
    pub fn cvec_lmsf(
        x: *const complexf_t,
        y: *mut complexf_t,
        n: ::std::os::raw::c_int,
        error: *const complexf_t,
    );
}
extern "C" {
    pub fn cvec_circular_lmsf(
        x: *const complexf_t,
        y: *mut complexf_t,
        n: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
        error: *const complexf_t,
    );
}
extern "C" {
    pub fn vec_dot_prodi16(
        x: *const i16,
        y: *const i16,
        n: ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vec_circular_dot_prodi16(
        x: *const i16,
        y: *const i16,
        n: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vec_lmsi16(
        x: *const i16,
        y: *mut i16,
        n: ::std::os::raw::c_int,
        error: i16,
    );
}
extern "C" {
    pub fn vec_circular_lmsi16(
        x: *const i16,
        y: *mut i16,
        n: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
        error: i16,
    );
}
extern "C" {
    pub fn vec_min_maxi16(
        x: *const i16,
        n: ::std::os::raw::c_int,
        out: *mut i16,
    ) -> i32;
}
extern "C" {
    pub fn cvec_dot_prodi16(
        x: *const complexi16_t,
        y: *const complexi16_t,
        n: ::std::os::raw::c_int,
    ) -> complexi32_t;
}
extern "C" {
    pub fn cvec_dot_prodi32(
        x: *const complexi32_t,
        y: *const complexi32_t,
        n: ::std::os::raw::c_int,
    ) -> complexi32_t;
}
extern "C" {
    pub fn cvec_circular_dot_prodi16(
        x: *const complexi16_t,
        y: *const complexi16_t,
        n: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
    ) -> complexi32_t;
}
extern "C" {
    pub fn cvec_lmsi16(
        x: *const complexi16_t,
        y: *mut complexi16_t,
        n: ::std::os::raw::c_int,
        error: *const complexi16_t,
    );
}
extern "C" {
    pub fn cvec_circular_lmsi16(
        x: *const complexi16_t,
        y: *mut complexi16_t,
        n: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
        error: *const complexi16_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct biquad2_state_t {
    pub gain: i32,
    pub a1: i32,
    pub a2: i32,
    pub b1: i32,
    pub b2: i32,
    pub z1: i32,
    pub z2: i32,
}
#[test]
fn bindgen_test_layout_biquad2_state_t() {
    assert_eq!(
        ::std::mem::size_of::<biquad2_state_t>(),
        28usize,
        concat!("Size of: ", stringify!(biquad2_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<biquad2_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(biquad2_state_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<biquad2_state_t>())).gain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(biquad2_state_t),
            "::",
            stringify!(gain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<biquad2_state_t>())).a1 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(biquad2_state_t),
            "::",
            stringify!(a1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<biquad2_state_t>())).a2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(biquad2_state_t),
            "::",
            stringify!(a2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<biquad2_state_t>())).b1 as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(biquad2_state_t),
            "::",
            stringify!(b1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<biquad2_state_t>())).b2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(biquad2_state_t),
            "::",
            stringify!(b2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<biquad2_state_t>())).z1 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(biquad2_state_t),
            "::",
            stringify!(z1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<biquad2_state_t>())).z2 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(biquad2_state_t),
            "::",
            stringify!(z2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fir16_state_t {
    pub taps: ::std::os::raw::c_int,
    pub curr_pos: ::std::os::raw::c_int,
    pub coeffs: *const i16,
    pub history: *mut i16,
}
#[test]
fn bindgen_test_layout_fir16_state_t() {
    assert_eq!(
        ::std::mem::size_of::<fir16_state_t>(),
        24usize,
        concat!("Size of: ", stringify!(fir16_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fir16_state_t>(),
        8usize,
        concat!("Alignment of ", stringify!(fir16_state_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fir16_state_t>())).taps as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fir16_state_t),
            "::",
            stringify!(taps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fir16_state_t>())).curr_pos as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fir16_state_t),
            "::",
            stringify!(curr_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fir16_state_t>())).coeffs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fir16_state_t),
            "::",
            stringify!(coeffs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fir16_state_t>())).history as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fir16_state_t),
            "::",
            stringify!(history)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fir32_state_t {
    pub taps: ::std::os::raw::c_int,
    pub curr_pos: ::std::os::raw::c_int,
    pub coeffs: *const i32,
    pub history: *mut i16,
}
#[test]
fn bindgen_test_layout_fir32_state_t() {
    assert_eq!(
        ::std::mem::size_of::<fir32_state_t>(),
        24usize,
        concat!("Size of: ", stringify!(fir32_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fir32_state_t>(),
        8usize,
        concat!("Alignment of ", stringify!(fir32_state_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fir32_state_t>())).taps as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fir32_state_t),
            "::",
            stringify!(taps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fir32_state_t>())).curr_pos as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fir32_state_t),
            "::",
            stringify!(curr_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fir32_state_t>())).coeffs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fir32_state_t),
            "::",
            stringify!(coeffs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fir32_state_t>())).history as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fir32_state_t),
            "::",
            stringify!(history)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fir_float_state_t {
    pub taps: ::std::os::raw::c_int,
    pub curr_pos: ::std::os::raw::c_int,
    pub coeffs: *const f32,
    pub history: *mut f32,
}
#[test]
fn bindgen_test_layout_fir_float_state_t() {
    assert_eq!(
        ::std::mem::size_of::<fir_float_state_t>(),
        24usize,
        concat!("Size of: ", stringify!(fir_float_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fir_float_state_t>(),
        8usize,
        concat!("Alignment of ", stringify!(fir_float_state_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fir_float_state_t>())).taps as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fir_float_state_t),
            "::",
            stringify!(taps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fir_float_state_t>())).curr_pos as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fir_float_state_t),
            "::",
            stringify!(curr_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fir_float_state_t>())).coeffs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fir_float_state_t),
            "::",
            stringify!(coeffs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fir_float_state_t>())).history as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fir_float_state_t),
            "::",
            stringify!(history)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct awgn_state_s {
    _unused: [u8; 0],
}
pub type awgn_state_t = awgn_state_s;
extern "C" {
    pub fn awgn_init_dbm0(
        s: *mut awgn_state_t,
        idum: ::std::os::raw::c_int,
        level: f32,
    ) -> *mut awgn_state_t;
}
extern "C" {
    pub fn awgn_init_dbov(
        s: *mut awgn_state_t,
        idum: ::std::os::raw::c_int,
        level: f32,
    ) -> *mut awgn_state_t;
}
extern "C" {
    pub fn awgn_release(s: *mut awgn_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn awgn_free(s: *mut awgn_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn awgn(s: *mut awgn_state_t) -> i16;
}
pub const BERT_REPORT_SYNCED: ::std::os::raw::c_uint = 0;
pub const BERT_REPORT_UNSYNCED: ::std::os::raw::c_uint = 1;
pub const BERT_REPORT_REGULAR: ::std::os::raw::c_uint = 2;
pub const BERT_REPORT_GT_10_2: ::std::os::raw::c_uint = 3;
pub const BERT_REPORT_LT_10_2: ::std::os::raw::c_uint = 4;
pub const BERT_REPORT_LT_10_3: ::std::os::raw::c_uint = 5;
pub const BERT_REPORT_LT_10_4: ::std::os::raw::c_uint = 6;
pub const BERT_REPORT_LT_10_5: ::std::os::raw::c_uint = 7;
pub const BERT_REPORT_LT_10_6: ::std::os::raw::c_uint = 8;
pub const BERT_REPORT_LT_10_7: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const BERT_PATTERN_ZEROS: ::std::os::raw::c_uint = 0;
pub const BERT_PATTERN_ONES: ::std::os::raw::c_uint = 1;
pub const BERT_PATTERN_7_TO_1: ::std::os::raw::c_uint = 2;
pub const BERT_PATTERN_3_TO_1: ::std::os::raw::c_uint = 3;
pub const BERT_PATTERN_1_TO_1: ::std::os::raw::c_uint = 4;
pub const BERT_PATTERN_1_TO_3: ::std::os::raw::c_uint = 5;
pub const BERT_PATTERN_1_TO_7: ::std::os::raw::c_uint = 6;
pub const BERT_PATTERN_QBF: ::std::os::raw::c_uint = 7;
pub const BERT_PATTERN_ITU_O151_23: ::std::os::raw::c_uint = 8;
pub const BERT_PATTERN_ITU_O151_20: ::std::os::raw::c_uint = 9;
pub const BERT_PATTERN_ITU_O151_15: ::std::os::raw::c_uint = 10;
pub const BERT_PATTERN_ITU_O152_11: ::std::os::raw::c_uint = 11;
pub const BERT_PATTERN_ITU_O153_9: ::std::os::raw::c_uint = 12;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bert_results_t {
    pub total_bits: ::std::os::raw::c_int,
    pub bad_bits: ::std::os::raw::c_int,
    pub resyncs: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_bert_results_t() {
    assert_eq!(
        ::std::mem::size_of::<bert_results_t>(),
        12usize,
        concat!("Size of: ", stringify!(bert_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bert_results_t>(),
        4usize,
        concat!("Alignment of ", stringify!(bert_results_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bert_results_t>())).total_bits as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bert_results_t),
            "::",
            stringify!(total_bits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bert_results_t>())).bad_bits as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bert_results_t),
            "::",
            stringify!(bad_bits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bert_results_t>())).resyncs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bert_results_t),
            "::",
            stringify!(resyncs)
        )
    );
}
pub type bert_report_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        reason: ::std::os::raw::c_int,
        bert_results: *mut bert_results_t,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bert_state_s {
    _unused: [u8; 0],
}
pub type bert_state_t = bert_state_s;
extern "C" {
    pub fn bert_event_to_str(
        event: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bert_init(
        s: *mut bert_state_t,
        limit: ::std::os::raw::c_int,
        pattern: ::std::os::raw::c_int,
        resync_len: ::std::os::raw::c_int,
        resync_percent: ::std::os::raw::c_int,
    ) -> *mut bert_state_t;
}
extern "C" {
    pub fn bert_release(s: *mut bert_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bert_free(s: *mut bert_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bert_get_bit(s: *mut bert_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bert_put_bit(s: *mut bert_state_t, bit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn bert_set_report(
        s: *mut bert_state_t,
        freq: ::std::os::raw::c_int,
        reporter: bert_report_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bert_result(
        s: *mut bert_state_t,
        results: *mut bert_results_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct power_meter_s {
    _unused: [u8; 0],
}
pub type power_meter_t = power_meter_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct power_surge_detector_state_s {
    _unused: [u8; 0],
}
pub type power_surge_detector_state_t = power_surge_detector_state_s;
extern "C" {
    pub fn power_meter_init(
        s: *mut power_meter_t,
        shift: ::std::os::raw::c_int,
    ) -> *mut power_meter_t;
}
extern "C" {
    pub fn power_meter_release(s: *mut power_meter_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn power_meter_free(s: *mut power_meter_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn power_meter_damping(
        s: *mut power_meter_t,
        shift: ::std::os::raw::c_int,
    ) -> *mut power_meter_t;
}
extern "C" {
    pub fn power_meter_update(s: *mut power_meter_t, amp: i16) -> i32;
}
extern "C" {
    pub fn power_meter_current(s: *mut power_meter_t) -> i32;
}
extern "C" {
    pub fn power_meter_current_dbm0(s: *mut power_meter_t) -> f32;
}
extern "C" {
    pub fn power_meter_current_dbov(s: *mut power_meter_t) -> f32;
}
extern "C" {
    pub fn power_meter_level_dbm0(level: f32) -> i32;
}
extern "C" {
    pub fn power_meter_level_dbov(level: f32) -> i32;
}
extern "C" {
    pub fn power_surge_detector(
        s: *mut power_surge_detector_state_t,
        amp: i16,
    ) -> i32;
}
extern "C" {
    pub fn power_surge_detector_current_dbm0(
        s: *mut power_surge_detector_state_t,
    ) -> f32;
}
extern "C" {
    pub fn power_surge_detector_current_dbov(
        s: *mut power_surge_detector_state_t,
    ) -> f32;
}
extern "C" {
    pub fn power_surge_detector_init(
        s: *mut power_surge_detector_state_t,
        min: f32,
        surge: f32,
    ) -> *mut power_surge_detector_state_t;
}
extern "C" {
    pub fn power_surge_detector_release(
        s: *mut power_surge_detector_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn power_surge_detector_free(
        s: *mut power_surge_detector_state_t,
    ) -> ::std::os::raw::c_int;
}
pub type filter_t = filter_s;
pub type filter_step_func_t =
    ::std::option::Option<unsafe extern "C" fn(fi: *mut filter_t, x: f32) -> f32>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspec_t {
    pub nz: ::std::os::raw::c_int,
    pub np: ::std::os::raw::c_int,
    pub fsf: filter_step_func_t,
}
#[test]
fn bindgen_test_layout_fspec_t() {
    assert_eq!(
        ::std::mem::size_of::<fspec_t>(),
        16usize,
        concat!("Size of: ", stringify!(fspec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fspec_t>(),
        8usize,
        concat!("Alignment of ", stringify!(fspec_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fspec_t>())).nz as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fspec_t),
            "::",
            stringify!(nz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fspec_t>())).np as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fspec_t),
            "::",
            stringify!(np)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fspec_t>())).fsf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fspec_t),
            "::",
            stringify!(fsf)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct filter_s {
    pub fs: *mut fspec_t,
    pub sum: f32,
    pub ptr: ::std::os::raw::c_int,
    pub v: __IncompleteArrayField<f32>,
}
#[test]
fn bindgen_test_layout_filter_s() {
    assert_eq!(
        ::std::mem::size_of::<filter_s>(),
        16usize,
        concat!("Size of: ", stringify!(filter_s))
    );
    assert_eq!(
        ::std::mem::align_of::<filter_s>(),
        8usize,
        concat!("Alignment of ", stringify!(filter_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<filter_s>())).fs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(filter_s),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<filter_s>())).sum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(filter_s),
            "::",
            stringify!(sum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<filter_s>())).ptr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(filter_s),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<filter_s>())).v as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(filter_s),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cfilter_t {
    pub ref_: *mut filter_t,
    pub imf: *mut filter_t,
}
#[test]
fn bindgen_test_layout_cfilter_t() {
    assert_eq!(
        ::std::mem::size_of::<cfilter_t>(),
        16usize,
        concat!("Size of: ", stringify!(cfilter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cfilter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cfilter_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cfilter_t>())).ref_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cfilter_t),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cfilter_t>())).imf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cfilter_t),
            "::",
            stringify!(imf)
        )
    );
}
extern "C" {
    pub fn filter_create(fs: *mut fspec_t) -> *mut filter_t;
}
extern "C" {
    pub fn filter_delete(fi: *mut filter_t);
}
extern "C" {
    pub fn filter_step(fi: *mut filter_t, x: f32) -> f32;
}
extern "C" {
    pub fn cfilter_create(fs: *mut fspec_t) -> *mut cfilter_t;
}
extern "C" {
    pub fn cfilter_delete(cfi: *mut cfilter_t);
}
extern "C" {
    pub fn cfilter_step(cfi: *mut cfilter_t, z: *const complexf_t) -> complexf_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dc_restore_state_t {
    pub state: i32,
}
#[test]
fn bindgen_test_layout_dc_restore_state_t() {
    assert_eq!(
        ::std::mem::size_of::<dc_restore_state_t>(),
        4usize,
        concat!("Size of: ", stringify!(dc_restore_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<dc_restore_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(dc_restore_state_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dc_restore_state_t>())).state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dc_restore_state_t),
            "::",
            stringify!(state)
        )
    );
}
extern "C" {
    pub fn dds_phase_to_radians(phase: u32) -> f32;
}
extern "C" {
    pub fn dds_phase_rate(frequency: f32) -> i32;
}
extern "C" {
    pub fn dds_frequency(phase_rate: i32) -> f32;
}
extern "C" {
    pub fn dds_scaling_dbm0(level: f32) -> i16;
}
extern "C" {
    pub fn dds_scaling_dbov(level: f32) -> i16;
}
extern "C" {
    pub fn dds_lookup(phase: u32) -> i16;
}
extern "C" {
    pub fn dds_offset(phase_acc: u32, phase_offset: i32) -> i16;
}
extern "C" {
    pub fn dds_advance(phase_acc: *mut u32, phase_rate: i32);
}
extern "C" {
    pub fn dds(phase_acc: *mut u32, phase_rate: i32) -> i16;
}
extern "C" {
    pub fn dds_mod(
        phase_acc: *mut u32,
        phase_rate: i32,
        scale: i16,
        phase: i32,
    ) -> i16;
}
extern "C" {
    pub fn dds_lookup_complexi(phase: u32) -> complexi_t;
}
extern "C" {
    pub fn dds_complexi(phase_acc: *mut u32, phase_rate: i32) -> complexi_t;
}
extern "C" {
    pub fn dds_complexi_mod(
        phase_acc: *mut u32,
        phase_rate: i32,
        scale: i16,
        phase: i32,
    ) -> complexi_t;
}
extern "C" {
    pub fn dds_lookup_complexi16(phase: u32) -> complexi16_t;
}
extern "C" {
    pub fn dds_complexi16(phase_acc: *mut u32, phase_rate: i32) -> complexi16_t;
}
extern "C" {
    pub fn dds_complexi16_mod(
        phase_acc: *mut u32,
        phase_rate: i32,
        scale: i16,
        phase: i32,
    ) -> complexi16_t;
}
extern "C" {
    pub fn dds_complexi32_mod(
        phase_acc: *mut u32,
        phase_rate: i32,
        scale: i16,
        phase: i32,
    ) -> complexi32_t;
}
extern "C" {
    pub fn dds_lookup_complexi32(phase: u32) -> complexi32_t;
}
extern "C" {
    pub fn dds_complexi32(phase_acc: *mut u32, phase_rate: i32) -> complexi32_t;
}
extern "C" {
    pub fn dds_phase_ratef(frequency: f32) -> i32;
}
extern "C" {
    pub fn dds_frequencyf(phase_rate: i32) -> f32;
}
extern "C" {
    pub fn dds_scaling_dbm0f(level: f32) -> f32;
}
extern "C" {
    pub fn dds_scaling_dbovf(level: f32) -> f32;
}
extern "C" {
    pub fn dds_advancef(phase_acc: *mut u32, phase_rate: i32);
}
extern "C" {
    pub fn ddsf(phase_acc: *mut u32, phase_rate: i32) -> f32;
}
extern "C" {
    pub fn dds_lookupf(phase: u32) -> f32;
}
extern "C" {
    pub fn dds_offsetf(phase_acc: u32, phase_offset: i32) -> f32;
}
extern "C" {
    pub fn dds_modf(
        phase_acc: *mut u32,
        phase_rate: i32,
        scale: f32,
        phase: i32,
    ) -> f32;
}
extern "C" {
    pub fn dds_complexf(phase_acc: *mut u32, phase_rate: i32) -> complexf_t;
}
extern "C" {
    pub fn dds_lookup_complexf(phase_acc: u32) -> complexf_t;
}
extern "C" {
    pub fn dds_complex_modf(
        phase_acc: *mut u32,
        phase_rate: i32,
        scale: f32,
        phase: i32,
    ) -> complexf_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swept_tone_state_s {
    _unused: [u8; 0],
}
pub type swept_tone_state_t = swept_tone_state_s;
extern "C" {
    pub fn swept_tone_init(
        s: *mut swept_tone_state_t,
        start: f32,
        end: f32,
        level: f32,
        duration: ::std::os::raw::c_int,
        repeating: ::std::os::raw::c_int,
    ) -> *mut swept_tone_state_t;
}
extern "C" {
    pub fn swept_tone(
        s: *mut swept_tone_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swept_tone_current_frequency(s: *mut swept_tone_state_t) -> f32;
}
extern "C" {
    pub fn swept_tone_release(s: *mut swept_tone_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swept_tone_free(s: *mut swept_tone_state_t) -> ::std::os::raw::c_int;
}
pub const ECHO_CAN_USE_ADAPTION: ::std::os::raw::c_uint = 1;
pub const ECHO_CAN_USE_NLP: ::std::os::raw::c_uint = 2;
pub const ECHO_CAN_USE_CNG: ::std::os::raw::c_uint = 4;
pub const ECHO_CAN_USE_CLIP: ::std::os::raw::c_uint = 8;
pub const ECHO_CAN_USE_SUPPRESSOR: ::std::os::raw::c_uint = 16;
pub const ECHO_CAN_USE_TX_HPF: ::std::os::raw::c_uint = 32;
pub const ECHO_CAN_USE_RX_HPF: ::std::os::raw::c_uint = 64;
pub const ECHO_CAN_DISABLE: ::std::os::raw::c_uint = 128;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct echo_can_state_s {
    _unused: [u8; 0],
}
pub type echo_can_state_t = echo_can_state_s;
extern "C" {
    pub fn echo_can_init(
        len: ::std::os::raw::c_int,
        adaption_mode: ::std::os::raw::c_int,
    ) -> *mut echo_can_state_t;
}
extern "C" {
    pub fn echo_can_release(ec: *mut echo_can_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn echo_can_free(ec: *mut echo_can_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn echo_can_flush(ec: *mut echo_can_state_t);
}
extern "C" {
    pub fn echo_can_adaption_mode(
        ec: *mut echo_can_state_t,
        adaption_mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn echo_can_update(ec: *mut echo_can_state_t, tx: i16, rx: i16) -> i16;
}
extern "C" {
    pub fn echo_can_hpf_tx(ec: *mut echo_can_state_t, tx: i16) -> i16;
}
extern "C" {
    pub fn echo_can_snapshot(ec: *mut echo_can_state_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct modem_echo_can_state_s {
    _unused: [u8; 0],
}
pub type modem_echo_can_state_t = modem_echo_can_state_s;
extern "C" {
    pub fn modem_echo_can_init(
        len: ::std::os::raw::c_int,
    ) -> *mut modem_echo_can_state_t;
}
extern "C" {
    pub fn modem_echo_can_free(ec: *mut modem_echo_can_state_t);
}
extern "C" {
    pub fn modem_echo_can_flush(ec: *mut modem_echo_can_state_t);
}
extern "C" {
    pub fn modem_echo_can_adaption_mode(
        ec: *mut modem_echo_can_state_t,
        adapt: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn modem_echo_can_update(
        ec: *mut modem_echo_can_state_t,
        tx: i16,
        rx: i16,
    ) -> i16;
}
extern "C" {
    pub fn crc_itu32_calc(
        buf: *const u8,
        len: ::std::os::raw::c_int,
        crc: u32,
    ) -> u32;
}
extern "C" {
    pub fn crc_itu32_append(
        buf: *mut u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crc_itu32_check(buf: *const u8, len: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn crc_itu16_calc(
        buf: *const u8,
        len: ::std::os::raw::c_int,
        crc: u16,
    ) -> u16;
}
extern "C" {
    pub fn crc_itu16_bits(buf: u8, len: ::std::os::raw::c_int, crc: u16) -> u16;
}
extern "C" {
    pub fn crc_itu16_append(
        buf: *mut u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crc_itu16_check(buf: *const u8, len: ::std::os::raw::c_int) -> bool;
}
pub const SIG_STATUS_CARRIER_DOWN: ::std::os::raw::c_int = -1;
pub const SIG_STATUS_CARRIER_UP: ::std::os::raw::c_int = -2;
pub const SIG_STATUS_TRAINING_IN_PROGRESS: ::std::os::raw::c_int = -3;
pub const SIG_STATUS_TRAINING_SUCCEEDED: ::std::os::raw::c_int = -4;
pub const SIG_STATUS_TRAINING_FAILED: ::std::os::raw::c_int = -5;
pub const SIG_STATUS_FRAMING_OK: ::std::os::raw::c_int = -6;
pub const SIG_STATUS_END_OF_DATA: ::std::os::raw::c_int = -7;
pub const SIG_STATUS_ABORT: ::std::os::raw::c_int = -8;
pub const SIG_STATUS_BREAK: ::std::os::raw::c_int = -9;
pub const SIG_STATUS_SHUTDOWN_COMPLETE: ::std::os::raw::c_int = -10;
pub const SIG_STATUS_OCTET_REPORT: ::std::os::raw::c_int = -11;
pub const SIG_STATUS_POOR_SIGNAL_QUALITY: ::std::os::raw::c_int = -12;
pub const SIG_STATUS_MODEM_RETRAIN_OCCURRED: ::std::os::raw::c_int = -13;
pub const SIG_STATUS_LINK_CONNECTED: ::std::os::raw::c_int = -14;
pub const SIG_STATUS_LINK_DISCONNECTED: ::std::os::raw::c_int = -15;
pub const SIG_STATUS_LINK_ERROR: ::std::os::raw::c_int = -16;
pub const SIG_STATUS_LINK_IDLE: ::std::os::raw::c_int = -17;
pub type _bindgen_ty_8 = ::std::os::raw::c_int;
pub type put_msg_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        msg: *const u8,
        len: ::std::os::raw::c_int,
    ),
>;
pub type get_msg_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        msg: *mut u8,
        max_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type put_byte_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        byte: ::std::os::raw::c_int,
    ),
>;
pub type get_byte_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type put_bit_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        bit: ::std::os::raw::c_int,
    ),
>;
pub type get_bit_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type modem_status_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        status: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct async_tx_state_s {
    _unused: [u8; 0],
}
pub type async_tx_state_t = async_tx_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct async_rx_state_s {
    _unused: [u8; 0],
}
pub type async_rx_state_t = async_rx_state_s;
pub const ASYNC_PARITY_NONE: ::std::os::raw::c_uint = 0;
pub const ASYNC_PARITY_EVEN: ::std::os::raw::c_uint = 1;
pub const ASYNC_PARITY_ODD: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
extern "C" {
    pub fn signal_status_to_str(
        status: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn async_rx_put_bit(
        user_data: *mut ::std::os::raw::c_void,
        bit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn async_rx_init(
        s: *mut async_rx_state_t,
        data_bits: ::std::os::raw::c_int,
        parity_bits: ::std::os::raw::c_int,
        stop_bits: ::std::os::raw::c_int,
        use_v14: bool,
        put_byte: put_byte_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut async_rx_state_t;
}
extern "C" {
    pub fn async_rx_release(s: *mut async_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn async_rx_free(s: *mut async_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn async_tx_presend_bits(
        s: *mut async_tx_state_t,
        bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn async_tx_get_bit(
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn async_tx_init(
        s: *mut async_tx_state_t,
        data_bits: ::std::os::raw::c_int,
        parity_bits: ::std::os::raw::c_int,
        stop_bits: ::std::os::raw::c_int,
        use_v14: bool,
        get_byte: get_byte_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut async_tx_state_t;
}
extern "C" {
    pub fn async_tx_release(s: *mut async_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn async_tx_free(s: *mut async_tx_state_t) -> ::std::os::raw::c_int;
}
pub type hdlc_frame_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        pkt: *const u8,
        len: ::std::os::raw::c_int,
        ok: ::std::os::raw::c_int,
    ),
>;
pub type hdlc_underflow_handler_t = ::std::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdlc_rx_state_s {
    _unused: [u8; 0],
}
pub type hdlc_rx_state_t = hdlc_rx_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdlc_rx_stats_t {
    pub bytes: ::std::os::raw::c_ulong,
    pub good_frames: ::std::os::raw::c_ulong,
    pub crc_errors: ::std::os::raw::c_ulong,
    pub length_errors: ::std::os::raw::c_ulong,
    pub aborts: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_hdlc_rx_stats_t() {
    assert_eq!(
        ::std::mem::size_of::<hdlc_rx_stats_t>(),
        40usize,
        concat!("Size of: ", stringify!(hdlc_rx_stats_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hdlc_rx_stats_t>(),
        8usize,
        concat!("Alignment of ", stringify!(hdlc_rx_stats_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdlc_rx_stats_t>())).bytes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hdlc_rx_stats_t),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdlc_rx_stats_t>())).good_frames as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hdlc_rx_stats_t),
            "::",
            stringify!(good_frames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdlc_rx_stats_t>())).crc_errors as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hdlc_rx_stats_t),
            "::",
            stringify!(crc_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdlc_rx_stats_t>())).length_errors as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hdlc_rx_stats_t),
            "::",
            stringify!(length_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdlc_rx_stats_t>())).aborts as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hdlc_rx_stats_t),
            "::",
            stringify!(aborts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdlc_tx_state_s {
    _unused: [u8; 0],
}
pub type hdlc_tx_state_t = hdlc_tx_state_s;
extern "C" {
    pub fn hdlc_rx_init(
        s: *mut hdlc_rx_state_t,
        crc32: bool,
        report_bad_frames: bool,
        framing_ok_threshold: ::std::os::raw::c_int,
        handler: hdlc_frame_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut hdlc_rx_state_t;
}
extern "C" {
    pub fn hdlc_rx_restart(s: *mut hdlc_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdlc_rx_set_frame_handler(
        s: *mut hdlc_rx_state_t,
        handler: hdlc_frame_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn hdlc_rx_set_status_handler(
        s: *mut hdlc_rx_state_t,
        handler: modem_status_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn hdlc_rx_release(s: *mut hdlc_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdlc_rx_free(s: *mut hdlc_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdlc_rx_set_max_frame_len(s: *mut hdlc_rx_state_t, max_len: size_t);
}
extern "C" {
    pub fn hdlc_rx_set_octet_counting_report_interval(
        s: *mut hdlc_rx_state_t,
        interval: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn hdlc_rx_get_stats(
        s: *mut hdlc_rx_state_t,
        t: *mut hdlc_rx_stats_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdlc_rx_put_bit(s: *mut hdlc_rx_state_t, new_bit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hdlc_rx_put_byte(
        s: *mut hdlc_rx_state_t,
        new_byte: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn hdlc_rx_put(
        s: *mut hdlc_rx_state_t,
        buf: *const u8,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn hdlc_tx_init(
        s: *mut hdlc_tx_state_t,
        crc32: bool,
        inter_frame_flags: ::std::os::raw::c_int,
        progressive: bool,
        handler: hdlc_underflow_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut hdlc_tx_state_t;
}
extern "C" {
    pub fn hdlc_tx_restart(s: *mut hdlc_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdlc_tx_release(s: *mut hdlc_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdlc_tx_free(s: *mut hdlc_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdlc_tx_set_max_frame_len(s: *mut hdlc_tx_state_t, max_len: size_t);
}
extern "C" {
    pub fn hdlc_tx_frame(
        s: *mut hdlc_tx_state_t,
        frame: *const u8,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdlc_tx_corrupt_frame(s: *mut hdlc_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdlc_tx_flags(
        s: *mut hdlc_tx_state_t,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdlc_tx_abort(s: *mut hdlc_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdlc_tx_get_bit(s: *mut hdlc_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdlc_tx_get_byte(s: *mut hdlc_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdlc_tx_get(
        s: *mut hdlc_tx_state_t,
        buf: *mut u8,
        max_len: size_t,
    ) -> ::std::os::raw::c_int;
}
pub const NOISE_CLASS_AWGN: ::std::os::raw::c_uint = 1;
pub const NOISE_CLASS_HOTH: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct noise_state_s {
    _unused: [u8; 0],
}
pub type noise_state_t = noise_state_s;
extern "C" {
    pub fn noise_init_dbm0(
        s: *mut noise_state_t,
        seed: ::std::os::raw::c_int,
        level: f32,
        class_of_noise: ::std::os::raw::c_int,
        quality: ::std::os::raw::c_int,
    ) -> *mut noise_state_t;
}
extern "C" {
    pub fn noise_init_dbov(
        s: *mut noise_state_t,
        seed: ::std::os::raw::c_int,
        level: f32,
        class_of_noise: ::std::os::raw::c_int,
        quality: ::std::os::raw::c_int,
    ) -> *mut noise_state_t;
}
extern "C" {
    pub fn noise_release(s: *mut noise_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noise_free(s: *mut noise_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noise(s: *mut noise_state_t) -> i16;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct time_scale_state_s {
    _unused: [u8; 0],
}
pub type time_scale_state_t = time_scale_state_s;
extern "C" {
    pub fn time_scale_rate(
        s: *mut time_scale_state_t,
        playout_rate: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn time_scale_max_output_len(
        s: *mut time_scale_state_t,
        input_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn time_scale(
        s: *mut time_scale_state_t,
        out: *mut i16,
        in_: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn time_scale_flush(
        s: *mut time_scale_state_t,
        out: *mut i16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn time_scale_init(
        s: *mut time_scale_state_t,
        sample_rate: ::std::os::raw::c_int,
        playout_rate: f32,
    ) -> *mut time_scale_state_t;
}
extern "C" {
    pub fn time_scale_release(s: *mut time_scale_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn time_scale_free(s: *mut time_scale_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct goertzel_descriptor_s {
    pub fac: f32,
    pub samples: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_goertzel_descriptor_s() {
    assert_eq!(
        ::std::mem::size_of::<goertzel_descriptor_s>(),
        8usize,
        concat!("Size of: ", stringify!(goertzel_descriptor_s))
    );
    assert_eq!(
        ::std::mem::align_of::<goertzel_descriptor_s>(),
        4usize,
        concat!("Alignment of ", stringify!(goertzel_descriptor_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<goertzel_descriptor_s>())).fac as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(goertzel_descriptor_s),
            "::",
            stringify!(fac)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<goertzel_descriptor_s>())).samples as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(goertzel_descriptor_s),
            "::",
            stringify!(samples)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct goertzel_state_s {
    pub v2: f32,
    pub v3: f32,
    pub fac: f32,
    pub samples: ::std::os::raw::c_int,
    pub current_sample: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_goertzel_state_s() {
    assert_eq!(
        ::std::mem::size_of::<goertzel_state_s>(),
        20usize,
        concat!("Size of: ", stringify!(goertzel_state_s))
    );
    assert_eq!(
        ::std::mem::align_of::<goertzel_state_s>(),
        4usize,
        concat!("Alignment of ", stringify!(goertzel_state_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<goertzel_state_s>())).v2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(goertzel_state_s),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<goertzel_state_s>())).v3 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(goertzel_state_s),
            "::",
            stringify!(v3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<goertzel_state_s>())).fac as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(goertzel_state_s),
            "::",
            stringify!(fac)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<goertzel_state_s>())).samples as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(goertzel_state_s),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<goertzel_state_s>())).current_sample as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(goertzel_state_s),
            "::",
            stringify!(current_sample)
        )
    );
}
pub type goertzel_descriptor_t = goertzel_descriptor_s;
pub type goertzel_state_t = goertzel_state_s;
extern "C" {
    pub fn make_goertzel_descriptor(
        t: *mut goertzel_descriptor_t,
        freq: f32,
        samples: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn goertzel_init(
        s: *mut goertzel_state_t,
        t: *mut goertzel_descriptor_t,
    ) -> *mut goertzel_state_t;
}
extern "C" {
    pub fn goertzel_release(s: *mut goertzel_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn goertzel_free(s: *mut goertzel_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn goertzel_reset(s: *mut goertzel_state_t);
}
extern "C" {
    pub fn goertzel_update(
        s: *mut goertzel_state_t,
        amp: *const i16,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn goertzel_result(s: *mut goertzel_state_t) -> f32;
}
extern "C" {
    pub fn periodogram_generate_coeffs(
        coeffs: *mut complexf_t,
        freq: f32,
        sample_rate: ::std::os::raw::c_int,
        window_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn periodogram_generate_phase_offset(
        offset: *mut complexf_t,
        freq: f32,
        sample_rate: ::std::os::raw::c_int,
        interval: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn periodogram(
        coeffs: *const complexf_t,
        amp: *const complexf_t,
        len: ::std::os::raw::c_int,
    ) -> complexf_t;
}
extern "C" {
    pub fn periodogram_prepare(
        sum: *mut complexf_t,
        diff: *mut complexf_t,
        amp: *const complexf_t,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn periodogram_apply(
        coeffs: *const complexf_t,
        sum: *const complexf_t,
        diff: *const complexf_t,
        len: ::std::os::raw::c_int,
    ) -> complexf_t;
}
extern "C" {
    pub fn periodogram_freq_error(
        phase_offset: *const complexf_t,
        scale: f32,
        last_result: *const complexf_t,
        result: *const complexf_t,
    ) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tone_gen_tone_descriptor_s {
    _unused: [u8; 0],
}
pub type tone_gen_tone_descriptor_t = tone_gen_tone_descriptor_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tone_gen_descriptor_s {
    _unused: [u8; 0],
}
pub type tone_gen_descriptor_t = tone_gen_descriptor_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tone_gen_state_s {
    _unused: [u8; 0],
}
pub type tone_gen_state_t = tone_gen_state_s;
extern "C" {
    pub fn tone_gen_descriptor_init(
        s: *mut tone_gen_descriptor_t,
        f1: ::std::os::raw::c_int,
        l1: ::std::os::raw::c_int,
        f2: ::std::os::raw::c_int,
        l2: ::std::os::raw::c_int,
        d1: ::std::os::raw::c_int,
        d2: ::std::os::raw::c_int,
        d3: ::std::os::raw::c_int,
        d4: ::std::os::raw::c_int,
        repeat: ::std::os::raw::c_int,
    ) -> *mut tone_gen_descriptor_t;
}
extern "C" {
    pub fn tone_gen_descriptor_free(s: *mut tone_gen_descriptor_t);
}
extern "C" {
    pub fn tone_gen(
        s: *mut tone_gen_state_t,
        amp: *mut i16,
        max_samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tone_gen_init(
        s: *mut tone_gen_state_t,
        t: *mut tone_gen_descriptor_t,
    ) -> *mut tone_gen_state_t;
}
extern "C" {
    pub fn tone_gen_release(s: *mut tone_gen_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tone_gen_free(s: *mut tone_gen_state_t) -> ::std::os::raw::c_int;
}
pub type tone_report_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        code: ::std::os::raw::c_int,
        level: ::std::os::raw::c_int,
        delay: ::std::os::raw::c_int,
    ),
>;
pub type tone_segment_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        f1: ::std::os::raw::c_int,
        f2: ::std::os::raw::c_int,
        duration: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct super_tone_rx_segment_s {
    _unused: [u8; 0],
}
pub type super_tone_rx_segment_t = super_tone_rx_segment_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct super_tone_rx_descriptor_s {
    _unused: [u8; 0],
}
pub type super_tone_rx_descriptor_t = super_tone_rx_descriptor_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct super_tone_rx_state_s {
    _unused: [u8; 0],
}
pub type super_tone_rx_state_t = super_tone_rx_state_s;
extern "C" {
    pub fn super_tone_rx_make_descriptor(
        desc: *mut super_tone_rx_descriptor_t,
    ) -> *mut super_tone_rx_descriptor_t;
}
extern "C" {
    pub fn super_tone_rx_free_descriptor(
        desc: *mut super_tone_rx_descriptor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn super_tone_rx_add_tone(
        desc: *mut super_tone_rx_descriptor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn super_tone_rx_add_element(
        desc: *mut super_tone_rx_descriptor_t,
        tone: ::std::os::raw::c_int,
        f1: ::std::os::raw::c_int,
        f2: ::std::os::raw::c_int,
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn super_tone_rx_init(
        s: *mut super_tone_rx_state_t,
        desc: *mut super_tone_rx_descriptor_t,
        callback: tone_report_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut super_tone_rx_state_t;
}
extern "C" {
    pub fn super_tone_rx_release(
        s: *mut super_tone_rx_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn super_tone_rx_free(
        s: *mut super_tone_rx_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn super_tone_rx_tone_callback(
        s: *mut super_tone_rx_state_t,
        callback: tone_report_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn super_tone_rx_segment_callback(
        s: *mut super_tone_rx_state_t,
        callback: tone_segment_func_t,
    );
}
extern "C" {
    pub fn super_tone_rx(
        super_: *mut super_tone_rx_state_t,
        amp: *const i16,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn super_tone_rx_fillin(
        s: *mut super_tone_rx_state_t,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct super_tone_tx_step_s {
    _unused: [u8; 0],
}
pub type super_tone_tx_step_t = super_tone_tx_step_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct super_tone_tx_state_s {
    _unused: [u8; 0],
}
pub type super_tone_tx_state_t = super_tone_tx_state_s;
extern "C" {
    pub fn super_tone_tx_make_step(
        s: *mut super_tone_tx_step_t,
        f1: f32,
        l1: f32,
        f2: f32,
        l2: f32,
        length: ::std::os::raw::c_int,
        cycles: ::std::os::raw::c_int,
    ) -> *mut super_tone_tx_step_t;
}
extern "C" {
    pub fn super_tone_tx_free_tone(
        s: *mut super_tone_tx_step_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn super_tone_tx_init(
        s: *mut super_tone_tx_state_t,
        tree: *mut super_tone_tx_step_t,
    ) -> *mut super_tone_tx_state_t;
}
extern "C" {
    pub fn super_tone_tx_release(
        s: *mut super_tone_tx_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn super_tone_tx_free(
        s: *mut super_tone_tx_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn super_tone_tx(
        s: *mut super_tone_tx_state_t,
        amp: *mut i16,
        max_samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type digits_rx_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        digits: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ),
>;
pub type digits_tx_callback_t = ::std::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtmf_tx_state_s {
    _unused: [u8; 0],
}
pub type dtmf_tx_state_t = dtmf_tx_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtmf_rx_state_s {
    _unused: [u8; 0],
}
pub type dtmf_rx_state_t = dtmf_rx_state_s;
extern "C" {
    pub fn dtmf_tx(
        s: *mut dtmf_tx_state_t,
        amp: *mut i16,
        max_samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtmf_tx_put(
        s: *mut dtmf_tx_state_t,
        digits: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtmf_tx_set_level(
        s: *mut dtmf_tx_state_t,
        level: ::std::os::raw::c_int,
        twist: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dtmf_tx_set_timing(
        s: *mut dtmf_tx_state_t,
        on_time: ::std::os::raw::c_int,
        off_time: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dtmf_tx_init(
        s: *mut dtmf_tx_state_t,
        callback: digits_tx_callback_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut dtmf_tx_state_t;
}
extern "C" {
    pub fn dtmf_tx_release(s: *mut dtmf_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtmf_tx_free(s: *mut dtmf_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtmf_rx_set_realtime_callback(
        s: *mut dtmf_rx_state_t,
        callback: tone_report_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dtmf_rx_parms(
        s: *mut dtmf_rx_state_t,
        filter_dialtone: ::std::os::raw::c_int,
        twist: f32,
        reverse_twist: f32,
        threshold: f32,
    );
}
extern "C" {
    pub fn dtmf_rx(
        s: *mut dtmf_rx_state_t,
        amp: *const i16,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtmf_rx_fillin(
        s: *mut dtmf_rx_state_t,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtmf_rx_status(s: *mut dtmf_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtmf_rx_get(
        s: *mut dtmf_rx_state_t,
        digits: *mut ::std::os::raw::c_char,
        max: ::std::os::raw::c_int,
    ) -> size_t;
}
extern "C" {
    pub fn dtmf_rx_get_logging_state(
        s: *mut dtmf_rx_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn dtmf_rx_init(
        s: *mut dtmf_rx_state_t,
        callback: digits_rx_callback_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut dtmf_rx_state_t;
}
extern "C" {
    pub fn dtmf_rx_release(s: *mut dtmf_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtmf_rx_free(s: *mut dtmf_rx_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bell_mf_tx_state_s {
    _unused: [u8; 0],
}
pub type bell_mf_tx_state_t = bell_mf_tx_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bell_mf_rx_state_s {
    _unused: [u8; 0],
}
pub type bell_mf_rx_state_t = bell_mf_rx_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r2_mf_tx_state_s {
    _unused: [u8; 0],
}
pub type r2_mf_tx_state_t = r2_mf_tx_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r2_mf_rx_state_s {
    _unused: [u8; 0],
}
pub type r2_mf_rx_state_t = r2_mf_rx_state_s;
extern "C" {
    pub fn bell_mf_tx(
        s: *mut bell_mf_tx_state_t,
        amp: *mut i16,
        max_samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bell_mf_tx_put(
        s: *mut bell_mf_tx_state_t,
        digits: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bell_mf_tx_init(s: *mut bell_mf_tx_state_t) -> *mut bell_mf_tx_state_t;
}
extern "C" {
    pub fn bell_mf_tx_release(s: *mut bell_mf_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bell_mf_tx_free(s: *mut bell_mf_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r2_mf_tx(
        s: *mut r2_mf_tx_state_t,
        amp: *mut i16,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r2_mf_tx_put(
        s: *mut r2_mf_tx_state_t,
        digit: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r2_mf_tx_init(
        s: *mut r2_mf_tx_state_t,
        fwd: bool,
    ) -> *mut r2_mf_tx_state_t;
}
extern "C" {
    pub fn r2_mf_tx_release(s: *mut r2_mf_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r2_mf_tx_free(s: *mut r2_mf_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bell_mf_rx(
        s: *mut bell_mf_rx_state_t,
        amp: *const i16,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bell_mf_rx_get(
        s: *mut bell_mf_rx_state_t,
        buf: *mut ::std::os::raw::c_char,
        max: ::std::os::raw::c_int,
    ) -> size_t;
}
extern "C" {
    pub fn bell_mf_rx_init(
        s: *mut bell_mf_rx_state_t,
        callback: digits_rx_callback_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut bell_mf_rx_state_t;
}
extern "C" {
    pub fn bell_mf_rx_release(s: *mut bell_mf_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bell_mf_rx_free(s: *mut bell_mf_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r2_mf_rx(
        s: *mut r2_mf_rx_state_t,
        amp: *const i16,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r2_mf_rx_get(s: *mut r2_mf_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r2_mf_rx_init(
        s: *mut r2_mf_rx_state_t,
        fwd: bool,
        callback: tone_report_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut r2_mf_rx_state_t;
}
extern "C" {
    pub fn r2_mf_rx_release(s: *mut r2_mf_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r2_mf_rx_free(s: *mut r2_mf_rx_state_t) -> ::std::os::raw::c_int;
}
pub const SIG_TONE_2280HZ: ::std::os::raw::c_uint = 1;
pub const SIG_TONE_2600HZ: ::std::os::raw::c_uint = 2;
pub const SIG_TONE_2400HZ_2600HZ: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const SIG_TONE_1_PRESENT: ::std::os::raw::c_uint = 1;
pub const SIG_TONE_1_CHANGE: ::std::os::raw::c_uint = 2;
pub const SIG_TONE_2_PRESENT: ::std::os::raw::c_uint = 4;
pub const SIG_TONE_2_CHANGE: ::std::os::raw::c_uint = 8;
pub const SIG_TONE_TX_PASSTHROUGH: ::std::os::raw::c_uint = 16;
pub const SIG_TONE_RX_PASSTHROUGH: ::std::os::raw::c_uint = 64;
pub const SIG_TONE_RX_FILTER_TONE: ::std::os::raw::c_uint = 128;
pub const SIG_TONE_TX_UPDATE_REQUEST: ::std::os::raw::c_uint = 256;
pub const SIG_TONE_RX_UPDATE_REQUEST: ::std::os::raw::c_uint = 512;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sig_tone_tx_state_s {
    _unused: [u8; 0],
}
pub type sig_tone_tx_state_t = sig_tone_tx_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sig_tone_rx_state_s {
    _unused: [u8; 0],
}
pub type sig_tone_rx_state_t = sig_tone_rx_state_s;
extern "C" {
    pub fn sig_tone_rx(
        s: *mut sig_tone_rx_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sig_tone_rx_set_mode(
        s: *mut sig_tone_rx_state_t,
        mode: ::std::os::raw::c_int,
        duration: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sig_tone_rx_init(
        s: *mut sig_tone_rx_state_t,
        tone_type: ::std::os::raw::c_int,
        sig_update: tone_report_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut sig_tone_rx_state_t;
}
extern "C" {
    pub fn sig_tone_rx_release(s: *mut sig_tone_rx_state_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sig_tone_rx_free(s: *mut sig_tone_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sig_tone_tx(
        s: *mut sig_tone_tx_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sig_tone_tx_set_mode(
        s: *mut sig_tone_tx_state_t,
        mode: ::std::os::raw::c_int,
        duration: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sig_tone_tx_init(
        s: *mut sig_tone_tx_state_t,
        tone_type: ::std::os::raw::c_int,
        sig_update: tone_report_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut sig_tone_tx_state_t;
}
extern "C" {
    pub fn sig_tone_tx_release(s: *mut sig_tone_tx_state_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sig_tone_tx_free(s: *mut sig_tone_tx_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsk_spec_t {
    pub name: *const ::std::os::raw::c_char,
    pub freq_zero: ::std::os::raw::c_int,
    pub freq_one: ::std::os::raw::c_int,
    pub tx_level: ::std::os::raw::c_int,
    pub min_level: ::std::os::raw::c_int,
    pub baud_rate: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fsk_spec_t() {
    assert_eq!(
        ::std::mem::size_of::<fsk_spec_t>(),
        32usize,
        concat!("Size of: ", stringify!(fsk_spec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<fsk_spec_t>(),
        8usize,
        concat!("Alignment of ", stringify!(fsk_spec_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsk_spec_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsk_spec_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fsk_spec_t>())).freq_zero as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fsk_spec_t),
            "::",
            stringify!(freq_zero)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fsk_spec_t>())).freq_one as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fsk_spec_t),
            "::",
            stringify!(freq_one)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fsk_spec_t>())).tx_level as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fsk_spec_t),
            "::",
            stringify!(tx_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fsk_spec_t>())).min_level as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fsk_spec_t),
            "::",
            stringify!(min_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fsk_spec_t>())).baud_rate as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fsk_spec_t),
            "::",
            stringify!(baud_rate)
        )
    );
}
pub const FSK_V21CH1: ::std::os::raw::c_uint = 0;
pub const FSK_V21CH2: ::std::os::raw::c_uint = 1;
pub const FSK_V23CH1: ::std::os::raw::c_uint = 2;
pub const FSK_V23CH2: ::std::os::raw::c_uint = 3;
pub const FSK_BELL103CH1: ::std::os::raw::c_uint = 4;
pub const FSK_BELL103CH2: ::std::os::raw::c_uint = 5;
pub const FSK_BELL202: ::std::os::raw::c_uint = 6;
pub const FSK_WEITBRECHT_4545: ::std::os::raw::c_uint = 7;
pub const FSK_WEITBRECHT_50: ::std::os::raw::c_uint = 8;
pub const FSK_WEITBRECHT_476: ::std::os::raw::c_uint = 9;
pub const FSK_V21CH1_110: ::std::os::raw::c_uint = 10;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub const FSK_FRAME_MODE_ASYNC: ::std::os::raw::c_uint = 0;
pub const FSK_FRAME_MODE_SYNC: ::std::os::raw::c_uint = 1;
pub const FSK_FRAME_MODE_5N1_FRAMES: ::std::os::raw::c_uint = 7;
pub const FSK_FRAME_MODE_7N1_FRAMES: ::std::os::raw::c_uint = 9;
pub const FSK_FRAME_MODE_7E1_FRAMES: ::std::os::raw::c_uint = 10;
pub const FSK_FRAME_MODE_7E2_FRAMES: ::std::os::raw::c_uint = 11;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
extern "C" {
    pub static mut preset_fsk_specs: [fsk_spec_t; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsk_tx_state_s {
    _unused: [u8; 0],
}
pub type fsk_tx_state_t = fsk_tx_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsk_rx_state_s {
    _unused: [u8; 0],
}
pub type fsk_rx_state_t = fsk_rx_state_s;
extern "C" {
    pub fn fsk_tx_init(
        s: *mut fsk_tx_state_t,
        spec: *const fsk_spec_t,
        get_bit: get_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut fsk_tx_state_t;
}
extern "C" {
    pub fn fsk_tx_restart(
        s: *mut fsk_tx_state_t,
        spec: *const fsk_spec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsk_tx_release(s: *mut fsk_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsk_tx_free(s: *mut fsk_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsk_tx_power(s: *mut fsk_tx_state_t, power: f32);
}
extern "C" {
    pub fn fsk_tx_set_get_bit(
        s: *mut fsk_tx_state_t,
        get_bit: get_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn fsk_tx_set_modem_status_handler(
        s: *mut fsk_tx_state_t,
        handler: modem_status_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn fsk_tx(
        s: *mut fsk_tx_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsk_rx_signal_power(s: *mut fsk_rx_state_t) -> f32;
}
extern "C" {
    pub fn fsk_rx_signal_cutoff(s: *mut fsk_rx_state_t, cutoff: f32);
}
extern "C" {
    pub fn fsk_rx_init(
        s: *mut fsk_rx_state_t,
        spec: *const fsk_spec_t,
        framing_mode: ::std::os::raw::c_int,
        put_bit: put_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut fsk_rx_state_t;
}
extern "C" {
    pub fn fsk_rx_restart(
        s: *mut fsk_rx_state_t,
        spec: *const fsk_spec_t,
        framing_mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsk_rx_release(s: *mut fsk_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsk_rx_free(s: *mut fsk_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsk_rx(
        s: *mut fsk_rx_state_t,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsk_rx_fillin(
        s: *mut fsk_rx_state_t,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsk_rx_set_put_bit(
        s: *mut fsk_rx_state_t,
        put_bit: put_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn fsk_rx_set_modem_status_handler(
        s: *mut fsk_rx_state_t,
        handler: modem_status_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub const MODEM_CONNECT_TONES_NONE: ::std::os::raw::c_uint = 0;
pub const MODEM_CONNECT_TONES_FAX_CNG: ::std::os::raw::c_uint = 1;
pub const MODEM_CONNECT_TONES_ANS: ::std::os::raw::c_uint = 2;
pub const MODEM_CONNECT_TONES_ANS_PR: ::std::os::raw::c_uint = 3;
pub const MODEM_CONNECT_TONES_ANSAM: ::std::os::raw::c_uint = 4;
pub const MODEM_CONNECT_TONES_ANSAM_PR: ::std::os::raw::c_uint = 5;
pub const MODEM_CONNECT_TONES_FAX_PREAMBLE: ::std::os::raw::c_uint = 6;
pub const MODEM_CONNECT_TONES_FAX_CED_OR_PREAMBLE: ::std::os::raw::c_uint = 7;
pub const MODEM_CONNECT_TONES_BELL_ANS: ::std::os::raw::c_uint = 8;
pub const MODEM_CONNECT_TONES_CALLING_TONE: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct modem_connect_tones_tx_state_s {
    _unused: [u8; 0],
}
pub type modem_connect_tones_tx_state_t = modem_connect_tones_tx_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct modem_connect_tones_rx_state_s {
    _unused: [u8; 0],
}
pub type modem_connect_tones_rx_state_t = modem_connect_tones_rx_state_s;
extern "C" {
    pub fn modem_connect_tones_tx_init(
        s: *mut modem_connect_tones_tx_state_t,
        tone_type: ::std::os::raw::c_int,
    ) -> *mut modem_connect_tones_tx_state_t;
}
extern "C" {
    pub fn modem_connect_tones_tx_release(
        s: *mut modem_connect_tones_tx_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_connect_tones_tx_free(
        s: *mut modem_connect_tones_tx_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_connect_tones_tx(
        s: *mut modem_connect_tones_tx_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_connect_tones_rx(
        s: *mut modem_connect_tones_rx_state_t,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_connect_tones_rx_fillin(
        s: *mut modem_connect_tones_rx_state_t,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_connect_tones_rx_get(
        s: *mut modem_connect_tones_rx_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_connect_tones_rx_init(
        s: *mut modem_connect_tones_rx_state_t,
        tone_type: ::std::os::raw::c_int,
        tone_callback: tone_report_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut modem_connect_tones_rx_state_t;
}
extern "C" {
    pub fn modem_connect_tones_rx_release(
        s: *mut modem_connect_tones_rx_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_connect_tones_rx_free(
        s: *mut modem_connect_tones_rx_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_connect_tone_to_str(
        tone: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct silence_gen_state_s {
    _unused: [u8; 0],
}
pub type silence_gen_state_t = silence_gen_state_s;
extern "C" {
    pub fn silence_gen(
        s: *mut silence_gen_state_t,
        amp: *mut i16,
        max_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn silence_gen_always(s: *mut silence_gen_state_t);
}
extern "C" {
    pub fn silence_gen_set(
        s: *mut silence_gen_state_t,
        silent_samples: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn silence_gen_alter(
        s: *mut silence_gen_state_t,
        silent_samples: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn silence_gen_remainder(
        s: *mut silence_gen_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn silence_gen_generated(
        s: *mut silence_gen_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn silence_gen_status_handler(
        s: *mut silence_gen_state_t,
        handler: modem_status_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn silence_gen_init(
        s: *mut silence_gen_state_t,
        silent_samples: ::std::os::raw::c_int,
    ) -> *mut silence_gen_state_t;
}
extern "C" {
    pub fn silence_gen_release(s: *mut silence_gen_state_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn silence_gen_free(s: *mut silence_gen_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_dummy_rx(
        user_data: *mut ::std::os::raw::c_void,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_dummy_mod(
        user_data: *mut ::std::os::raw::c_void,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_dummy_rx_fillin(
        user_data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type v8_parms_t = v8_parms_s;
pub type v8_result_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        result: *mut v8_parms_t,
    ),
>;
pub const v8_call_function_e_V8_CALL_TBS: v8_call_function_e = 0;
pub const v8_call_function_e_V8_CALL_H324: v8_call_function_e = 1;
pub const v8_call_function_e_V8_CALL_V18: v8_call_function_e = 2;
pub const v8_call_function_e_V8_CALL_T101: v8_call_function_e = 3;
pub const v8_call_function_e_V8_CALL_T30_TX: v8_call_function_e = 4;
pub const v8_call_function_e_V8_CALL_T30_RX: v8_call_function_e = 5;
pub const v8_call_function_e_V8_CALL_V_SERIES: v8_call_function_e = 6;
pub const v8_call_function_e_V8_CALL_FUNCTION_EXTENSION: v8_call_function_e = 7;
pub type v8_call_function_e = ::std::os::raw::c_uint;
pub const v8_modulation_e_V8_MOD_V17: v8_modulation_e = 1;
pub const v8_modulation_e_V8_MOD_V21: v8_modulation_e = 2;
pub const v8_modulation_e_V8_MOD_V22: v8_modulation_e = 4;
pub const v8_modulation_e_V8_MOD_V23HDX: v8_modulation_e = 8;
pub const v8_modulation_e_V8_MOD_V23: v8_modulation_e = 16;
pub const v8_modulation_e_V8_MOD_V26BIS: v8_modulation_e = 32;
pub const v8_modulation_e_V8_MOD_V26TER: v8_modulation_e = 64;
pub const v8_modulation_e_V8_MOD_V27TER: v8_modulation_e = 128;
pub const v8_modulation_e_V8_MOD_V29: v8_modulation_e = 256;
pub const v8_modulation_e_V8_MOD_V32: v8_modulation_e = 512;
pub const v8_modulation_e_V8_MOD_V34HDX: v8_modulation_e = 1024;
pub const v8_modulation_e_V8_MOD_V34: v8_modulation_e = 2048;
pub const v8_modulation_e_V8_MOD_V90: v8_modulation_e = 4096;
pub const v8_modulation_e_V8_MOD_V92: v8_modulation_e = 8192;
pub type v8_modulation_e = ::std::os::raw::c_uint;
pub const v8_protocol_e_V8_PROTOCOL_NONE: v8_protocol_e = 0;
pub const v8_protocol_e_V8_PROTOCOL_LAPM_V42: v8_protocol_e = 1;
pub const v8_protocol_e_V8_PROTOCOL_EXTENSION: v8_protocol_e = 7;
pub type v8_protocol_e = ::std::os::raw::c_uint;
pub const v8_pstn_access_e_V8_PSTN_ACCESS_CALL_DCE_CELLULAR: v8_pstn_access_e = 1;
pub const v8_pstn_access_e_V8_PSTN_ACCESS_ANSWER_DCE_CELLULAR: v8_pstn_access_e = 2;
pub const v8_pstn_access_e_V8_PSTN_ACCESS_DCE_ON_DIGITAL: v8_pstn_access_e = 4;
pub type v8_pstn_access_e = ::std::os::raw::c_uint;
pub const v8_pcm_modem_availability_e_V8_PSTN_PCM_MODEM_V90_V92_ANALOGUE:
    v8_pcm_modem_availability_e = 1;
pub const v8_pcm_modem_availability_e_V8_PSTN_PCM_MODEM_V90_V92_DIGITAL:
    v8_pcm_modem_availability_e = 2;
pub const v8_pcm_modem_availability_e_V8_PSTN_PCM_MODEM_V91:
    v8_pcm_modem_availability_e = 4;
pub type v8_pcm_modem_availability_e = ::std::os::raw::c_uint;
pub const v8_status_e_V8_STATUS_IN_PROGRESS: v8_status_e = 0;
pub const v8_status_e_V8_STATUS_V8_OFFERED: v8_status_e = 1;
pub const v8_status_e_V8_STATUS_V8_CALL: v8_status_e = 2;
pub const v8_status_e_V8_STATUS_NON_V8_CALL: v8_status_e = 3;
pub const v8_status_e_V8_STATUS_FAILED: v8_status_e = 4;
pub type v8_status_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v8_state_s {
    _unused: [u8; 0],
}
pub type v8_state_t = v8_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v8_parms_s {
    pub status: ::std::os::raw::c_int,
    pub modem_connect_tone: ::std::os::raw::c_int,
    pub send_ci: ::std::os::raw::c_int,
    pub v92: ::std::os::raw::c_int,
    pub call_function: ::std::os::raw::c_int,
    pub modulations: ::std::os::raw::c_uint,
    pub protocol: ::std::os::raw::c_int,
    pub pstn_access: ::std::os::raw::c_int,
    pub pcm_modem_availability: ::std::os::raw::c_int,
    pub nsf: ::std::os::raw::c_int,
    pub t66: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_v8_parms_s() {
    assert_eq!(
        ::std::mem::size_of::<v8_parms_s>(),
        44usize,
        concat!("Size of: ", stringify!(v8_parms_s))
    );
    assert_eq!(
        ::std::mem::align_of::<v8_parms_s>(),
        4usize,
        concat!("Alignment of ", stringify!(v8_parms_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<v8_parms_s>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v8_parms_s),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<v8_parms_s>())).modem_connect_tone as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v8_parms_s),
            "::",
            stringify!(modem_connect_tone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<v8_parms_s>())).send_ci as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v8_parms_s),
            "::",
            stringify!(send_ci)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v8_parms_s>())).v92 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v8_parms_s),
            "::",
            stringify!(v92)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<v8_parms_s>())).call_function as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v8_parms_s),
            "::",
            stringify!(call_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<v8_parms_s>())).modulations as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v8_parms_s),
            "::",
            stringify!(modulations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<v8_parms_s>())).protocol as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v8_parms_s),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<v8_parms_s>())).pstn_access as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(v8_parms_s),
            "::",
            stringify!(pstn_access)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<v8_parms_s>())).pcm_modem_availability as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(v8_parms_s),
            "::",
            stringify!(pcm_modem_availability)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v8_parms_s>())).nsf as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v8_parms_s),
            "::",
            stringify!(nsf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v8_parms_s>())).t66 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v8_parms_s),
            "::",
            stringify!(t66)
        )
    );
}
extern "C" {
    pub fn v8_restart(
        s: *mut v8_state_t,
        calling_party: bool,
        parms: *mut v8_parms_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v8_init(
        s: *mut v8_state_t,
        calling_party: bool,
        parms: *mut v8_parms_t,
        result_handler: v8_result_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut v8_state_t;
}
extern "C" {
    pub fn v8_release(s: *mut v8_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v8_free(s: *mut v8_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v8_get_logging_state(s: *mut v8_state_t) -> *mut logging_state_t;
}
extern "C" {
    pub fn v8_tx(
        s: *mut v8_state_t,
        amp: *mut i16,
        max_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v8_rx(
        s: *mut v8_state_t,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v8_log_supported_modulations(
        s: *mut v8_state_t,
        modulation_schemes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn v8_call_function_to_str(
        call_function: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn v8_modulation_to_str(
        modulation_scheme: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn v8_protocol_to_str(
        protocol: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn v8_pstn_access_to_str(
        pstn_access: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn v8_nsf_to_str(
        nsf: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn v8_pcm_modem_availability_to_str(
        pcm_modem_availability: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn v8_t66_to_str(
        t66: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub type qam_report_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        constel: *const complexf_t,
        target: *const complexf_t,
        symbol: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v29_rx_state_s {
    _unused: [u8; 0],
}
pub type v29_rx_state_t = v29_rx_state_s;
extern "C" {
    pub fn v29_rx_init(
        s: *mut v29_rx_state_t,
        bit_rate: ::std::os::raw::c_int,
        put_bit: put_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut v29_rx_state_t;
}
extern "C" {
    pub fn v29_rx_restart(
        s: *mut v29_rx_state_t,
        bit_rate: ::std::os::raw::c_int,
        old_train: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v29_rx_release(s: *mut v29_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v29_rx_free(s: *mut v29_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v29_rx_get_logging_state(s: *mut v29_rx_state_t) -> *mut logging_state_t;
}
extern "C" {
    pub fn v29_rx_set_put_bit(
        s: *mut v29_rx_state_t,
        put_bit: put_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v29_rx_set_modem_status_handler(
        s: *mut v29_rx_state_t,
        handler: modem_status_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v29_rx(
        s: *mut v29_rx_state_t,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v29_rx_fillin(
        s: *mut v29_rx_state_t,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v29_rx_equalizer_state(
        s: *mut v29_rx_state_t,
        coeffs: *mut *mut complexf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v29_rx_carrier_frequency(s: *mut v29_rx_state_t) -> f32;
}
extern "C" {
    pub fn v29_rx_symbol_timing_correction(s: *mut v29_rx_state_t) -> f32;
}
extern "C" {
    pub fn v29_rx_signal_power(s: *mut v29_rx_state_t) -> f32;
}
extern "C" {
    pub fn v29_rx_signal_cutoff(s: *mut v29_rx_state_t, cutoff: f32);
}
extern "C" {
    pub fn v29_rx_set_qam_report_handler(
        s: *mut v29_rx_state_t,
        handler: qam_report_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v29_tx_state_s {
    _unused: [u8; 0],
}
pub type v29_tx_state_t = v29_tx_state_s;
extern "C" {
    pub fn v29_tx_power(s: *mut v29_tx_state_t, power: f32);
}
extern "C" {
    pub fn v29_tx_init(
        s: *mut v29_tx_state_t,
        bit_rate: ::std::os::raw::c_int,
        tep: bool,
        get_bit: get_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut v29_tx_state_t;
}
extern "C" {
    pub fn v29_tx_restart(
        s: *mut v29_tx_state_t,
        bit_rate: ::std::os::raw::c_int,
        tep: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v29_tx_release(s: *mut v29_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v29_tx_free(s: *mut v29_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v29_tx_get_logging_state(s: *mut v29_tx_state_t) -> *mut logging_state_t;
}
extern "C" {
    pub fn v29_tx_set_get_bit(
        s: *mut v29_tx_state_t,
        get_bit: get_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v29_tx_set_modem_status_handler(
        s: *mut v29_tx_state_t,
        handler: modem_status_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v29_tx(
        s: *mut v29_tx_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v17_rx_state_s {
    _unused: [u8; 0],
}
pub type v17_rx_state_t = v17_rx_state_s;
extern "C" {
    pub fn v17_rx_init(
        s: *mut v17_rx_state_t,
        bit_rate: ::std::os::raw::c_int,
        put_bit: put_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut v17_rx_state_t;
}
extern "C" {
    pub fn v17_rx_restart(
        s: *mut v17_rx_state_t,
        bit_rate: ::std::os::raw::c_int,
        short_train: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v17_rx_release(s: *mut v17_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v17_rx_free(s: *mut v17_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v17_rx_get_logging_state(s: *mut v17_rx_state_t) -> *mut logging_state_t;
}
extern "C" {
    pub fn v17_rx_set_put_bit(
        s: *mut v17_rx_state_t,
        put_bit: put_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v17_rx_set_modem_status_handler(
        s: *mut v17_rx_state_t,
        handler: modem_status_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v17_rx(
        s: *mut v17_rx_state_t,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v17_rx_fillin(
        s: *mut v17_rx_state_t,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v17_rx_equalizer_state(
        s: *mut v17_rx_state_t,
        coeffs: *mut *mut complexf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v17_rx_carrier_frequency(s: *mut v17_rx_state_t) -> f32;
}
extern "C" {
    pub fn v17_rx_symbol_timing_correction(s: *mut v17_rx_state_t) -> f32;
}
extern "C" {
    pub fn v17_rx_signal_power(s: *mut v17_rx_state_t) -> f32;
}
extern "C" {
    pub fn v17_rx_signal_cutoff(s: *mut v17_rx_state_t, cutoff: f32);
}
extern "C" {
    pub fn v17_rx_set_qam_report_handler(
        s: *mut v17_rx_state_t,
        handler: qam_report_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v17_tx_state_s {
    _unused: [u8; 0],
}
pub type v17_tx_state_t = v17_tx_state_s;
extern "C" {
    pub fn v17_tx_power(s: *mut v17_tx_state_t, power: f32);
}
extern "C" {
    pub fn v17_tx_init(
        s: *mut v17_tx_state_t,
        bit_rate: ::std::os::raw::c_int,
        tep: bool,
        get_bit: get_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut v17_tx_state_t;
}
extern "C" {
    pub fn v17_tx_restart(
        s: *mut v17_tx_state_t,
        bit_rate: ::std::os::raw::c_int,
        tep: bool,
        short_train: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v17_tx_release(s: *mut v17_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v17_tx_free(s: *mut v17_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v17_tx_get_logging_state(s: *mut v17_tx_state_t) -> *mut logging_state_t;
}
extern "C" {
    pub fn v17_tx_set_get_bit(
        s: *mut v17_tx_state_t,
        get_bit: get_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v17_tx_set_modem_status_handler(
        s: *mut v17_tx_state_t,
        handler: modem_status_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v17_tx(
        s: *mut v17_tx_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const V22BIS_GUARD_TONE_NONE: ::std::os::raw::c_uint = 0;
pub const V22BIS_GUARD_TONE_550HZ: ::std::os::raw::c_uint = 1;
pub const V22BIS_GUARD_TONE_1800HZ: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v22bis_state_s {
    _unused: [u8; 0],
}
pub type v22bis_state_t = v22bis_state_s;
extern "C" {
    pub fn v22bis_rx(
        s: *mut v22bis_state_t,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v22bis_rx_fillin(
        s: *mut v22bis_state_t,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v22bis_rx_equalizer_state(
        s: *mut v22bis_state_t,
        coeffs: *mut *mut complexf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v22bis_rx_carrier_frequency(s: *mut v22bis_state_t) -> f32;
}
extern "C" {
    pub fn v22bis_rx_symbol_timing_correction(s: *mut v22bis_state_t) -> f32;
}
extern "C" {
    pub fn v22bis_rx_signal_power(s: *mut v22bis_state_t) -> f32;
}
extern "C" {
    pub fn v22bis_rx_signal_cutoff(s: *mut v22bis_state_t, cutoff: f32);
}
extern "C" {
    pub fn v22bis_rx_set_qam_report_handler(
        s: *mut v22bis_state_t,
        handler: qam_report_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v22bis_tx(
        s: *mut v22bis_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v22bis_tx_power(s: *mut v22bis_state_t, power: f32);
}
extern "C" {
    pub fn v22bis_restart(
        s: *mut v22bis_state_t,
        bit_rate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v22bis_request_retrain(
        s: *mut v22bis_state_t,
        bit_rate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v22bis_remote_loopback(
        s: *mut v22bis_state_t,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v22bis_get_current_bit_rate(
        s: *mut v22bis_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v22bis_init(
        s: *mut v22bis_state_t,
        bit_rate: ::std::os::raw::c_int,
        guard: ::std::os::raw::c_int,
        calling_party: bool,
        get_bit: get_bit_func_t,
        get_bit_user_data: *mut ::std::os::raw::c_void,
        put_bit: put_bit_func_t,
        put_bit_user_data: *mut ::std::os::raw::c_void,
    ) -> *mut v22bis_state_t;
}
extern "C" {
    pub fn v22bis_release(s: *mut v22bis_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v22bis_free(s: *mut v22bis_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v22bis_get_logging_state(s: *mut v22bis_state_t) -> *mut logging_state_t;
}
extern "C" {
    pub fn v22bis_set_get_bit(
        s: *mut v22bis_state_t,
        get_bit: get_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v22bis_set_put_bit(
        s: *mut v22bis_state_t,
        put_bit: put_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v22bis_set_modem_status_handler(
        s: *mut v22bis_state_t,
        handler: modem_status_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v27ter_rx_state_s {
    _unused: [u8; 0],
}
pub type v27ter_rx_state_t = v27ter_rx_state_s;
extern "C" {
    pub fn v27ter_rx_init(
        s: *mut v27ter_rx_state_t,
        bit_rate: ::std::os::raw::c_int,
        put_bit: put_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut v27ter_rx_state_t;
}
extern "C" {
    pub fn v27ter_rx_restart(
        s: *mut v27ter_rx_state_t,
        bit_rate: ::std::os::raw::c_int,
        old_train: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v27ter_rx_release(s: *mut v27ter_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v27ter_rx_free(s: *mut v27ter_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v27ter_rx_get_logging_state(
        s: *mut v27ter_rx_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn v27ter_rx_set_put_bit(
        s: *mut v27ter_rx_state_t,
        put_bit: put_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v27ter_rx_set_modem_status_handler(
        s: *mut v27ter_rx_state_t,
        handler: modem_status_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v27ter_rx(
        s: *mut v27ter_rx_state_t,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v27ter_rx_fillin(
        s: *mut v27ter_rx_state_t,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v27ter_rx_equalizer_state(
        s: *mut v27ter_rx_state_t,
        coeffs: *mut *mut complexf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v27ter_rx_carrier_frequency(s: *mut v27ter_rx_state_t) -> f32;
}
extern "C" {
    pub fn v27ter_rx_symbol_timing_correction(s: *mut v27ter_rx_state_t) -> f32;
}
extern "C" {
    pub fn v27ter_rx_signal_power(s: *mut v27ter_rx_state_t) -> f32;
}
extern "C" {
    pub fn v27ter_rx_signal_cutoff(s: *mut v27ter_rx_state_t, cutoff: f32);
}
extern "C" {
    pub fn v27ter_rx_set_qam_report_handler(
        s: *mut v27ter_rx_state_t,
        handler: qam_report_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v27ter_tx_state_s {
    _unused: [u8; 0],
}
pub type v27ter_tx_state_t = v27ter_tx_state_s;
extern "C" {
    pub fn v27ter_tx_power(s: *mut v27ter_tx_state_t, power: f32);
}
extern "C" {
    pub fn v27ter_tx_init(
        s: *mut v27ter_tx_state_t,
        bit_rate: ::std::os::raw::c_int,
        tep: bool,
        get_bit: get_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut v27ter_tx_state_t;
}
extern "C" {
    pub fn v27ter_tx_restart(
        s: *mut v27ter_tx_state_t,
        bit_rate: ::std::os::raw::c_int,
        tep: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v27ter_tx_release(s: *mut v27ter_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v27ter_tx_free(s: *mut v27ter_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v27ter_tx_get_logging_state(
        s: *mut v27ter_tx_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn v27ter_tx_set_get_bit(
        s: *mut v27ter_tx_state_t,
        get_bit: get_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v27ter_tx_set_modem_status_handler(
        s: *mut v27ter_tx_state_t,
        handler: modem_status_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v27ter_tx(
        s: *mut v27ter_tx_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v42_state_s {
    _unused: [u8; 0],
}
pub type v42_state_t = v42_state_s;
extern "C" {
    pub fn lapm_status_to_str(
        status: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lapm_receive(
        user_data: *mut ::std::os::raw::c_void,
        frame: *const u8,
        len: ::std::os::raw::c_int,
        ok: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn v42_start(s: *mut v42_state_t);
}
extern "C" {
    pub fn v42_stop(s: *mut v42_state_t);
}
extern "C" {
    pub fn v42_set_local_busy_status(
        s: *mut v42_state_t,
        busy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v42_get_far_busy_status(s: *mut v42_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v42_rx_bit(
        user_data: *mut ::std::os::raw::c_void,
        bit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn v42_tx_bit(
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v42_set_status_callback(
        s: *mut v42_state_t,
        callback: modem_status_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn v42_get_logging_state(s: *mut v42_state_t) -> *mut logging_state_t;
}
extern "C" {
    pub fn v42_init(
        s: *mut v42_state_t,
        calling_party: bool,
        detect: bool,
        iframe_get: get_msg_func_t,
        iframe_put: put_msg_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut v42_state_t;
}
extern "C" {
    pub fn v42_restart(s: *mut v42_state_t);
}
extern "C" {
    pub fn v42_release(s: *mut v42_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v42_free(s: *mut v42_state_t) -> ::std::os::raw::c_int;
}
pub const V42BIS_P0_NEITHER_DIRECTION: ::std::os::raw::c_uint = 0;
pub const V42BIS_P0_INITIATOR_RESPONDER: ::std::os::raw::c_uint = 1;
pub const V42BIS_P0_RESPONDER_INITIATOR: ::std::os::raw::c_uint = 2;
pub const V42BIS_P0_BOTH_DIRECTIONS: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub const V42BIS_COMPRESSION_MODE_DYNAMIC: ::std::os::raw::c_uint = 0;
pub const V42BIS_COMPRESSION_MODE_ALWAYS: ::std::os::raw::c_uint = 1;
pub const V42BIS_COMPRESSION_MODE_NEVER: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v42bis_state_s {
    _unused: [u8; 0],
}
pub type v42bis_state_t = v42bis_state_s;
extern "C" {
    pub fn v42bis_compress(
        s: *mut v42bis_state_t,
        buf: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v42bis_compress_flush(s: *mut v42bis_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v42bis_decompress(
        s: *mut v42bis_state_t,
        buf: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v42bis_decompress_flush(s: *mut v42bis_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v42bis_compression_control(
        s: *mut v42bis_state_t,
        mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn v42bis_get_logging_state(s: *mut v42bis_state_t) -> *mut logging_state_t;
}
extern "C" {
    pub fn v42bis_init(
        s: *mut v42bis_state_t,
        negotiated_p0: ::std::os::raw::c_int,
        negotiated_p1: ::std::os::raw::c_int,
        negotiated_p2: ::std::os::raw::c_int,
        encode_handler: put_msg_func_t,
        encode_user_data: *mut ::std::os::raw::c_void,
        max_encode_len: ::std::os::raw::c_int,
        decode_handler: put_msg_func_t,
        decode_user_data: *mut ::std::os::raw::c_void,
        max_decode_len: ::std::os::raw::c_int,
    ) -> *mut v42bis_state_t;
}
extern "C" {
    pub fn v42bis_release(s: *mut v42bis_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v42bis_free(s: *mut v42bis_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v18_state_s {
    _unused: [u8; 0],
}
pub type v18_state_t = v18_state_s;
pub const V18_MODE_NONE: ::std::os::raw::c_uint = 1;
pub const V18_MODE_5BIT_4545: ::std::os::raw::c_uint = 2;
pub const V18_MODE_5BIT_50: ::std::os::raw::c_uint = 4;
pub const V18_MODE_DTMF: ::std::os::raw::c_uint = 8;
pub const V18_MODE_EDT: ::std::os::raw::c_uint = 16;
pub const V18_MODE_BELL103: ::std::os::raw::c_uint = 32;
pub const V18_MODE_V23VIDEOTEX: ::std::os::raw::c_uint = 64;
pub const V18_MODE_V21TEXTPHONE: ::std::os::raw::c_uint = 128;
pub const V18_MODE_V18TEXTPHONE: ::std::os::raw::c_uint = 256;
pub const V18_MODE_5BIT_476: ::std::os::raw::c_uint = 512;
pub const V18_MODE_REPETITIVE_SHIFTS_OPTION: ::std::os::raw::c_uint = 4096;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
pub const V18_AUTOMODING_GLOBAL: ::std::os::raw::c_uint = 0;
pub const V18_AUTOMODING_NONE: ::std::os::raw::c_uint = 1;
pub const V18_AUTOMODING_AUSTRALIA: ::std::os::raw::c_uint = 2;
pub const V18_AUTOMODING_IRELAND: ::std::os::raw::c_uint = 3;
pub const V18_AUTOMODING_GERMANY: ::std::os::raw::c_uint = 4;
pub const V18_AUTOMODING_SWITZERLAND: ::std::os::raw::c_uint = 5;
pub const V18_AUTOMODING_ITALY: ::std::os::raw::c_uint = 6;
pub const V18_AUTOMODING_SPAIN: ::std::os::raw::c_uint = 7;
pub const V18_AUTOMODING_AUSTRIA: ::std::os::raw::c_uint = 8;
pub const V18_AUTOMODING_NETHERLANDS: ::std::os::raw::c_uint = 9;
pub const V18_AUTOMODING_ICELAND: ::std::os::raw::c_uint = 10;
pub const V18_AUTOMODING_NORWAY: ::std::os::raw::c_uint = 11;
pub const V18_AUTOMODING_SWEDEN: ::std::os::raw::c_uint = 12;
pub const V18_AUTOMODING_FINALND: ::std::os::raw::c_uint = 13;
pub const V18_AUTOMODING_DENMARK: ::std::os::raw::c_uint = 14;
pub const V18_AUTOMODING_UK: ::std::os::raw::c_uint = 15;
pub const V18_AUTOMODING_USA: ::std::os::raw::c_uint = 16;
pub const V18_AUTOMODING_FRANCE: ::std::os::raw::c_uint = 17;
pub const V18_AUTOMODING_BELGIUM: ::std::os::raw::c_uint = 18;
pub const V18_AUTOMODING_END: ::std::os::raw::c_uint = 19;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
extern "C" {
    pub fn v18_get_logging_state(s: *mut v18_state_t) -> *mut logging_state_t;
}
extern "C" {
    pub fn v18_init(
        s: *mut v18_state_t,
        calling_party: bool,
        mode: ::std::os::raw::c_int,
        nation: ::std::os::raw::c_int,
        put_msg: put_msg_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut v18_state_t;
}
extern "C" {
    pub fn v18_release(s: *mut v18_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v18_free(s: *mut v18_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v18_tx(
        s: *mut v18_state_t,
        amp: *mut i16,
        max_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v18_rx(
        s: *mut v18_state_t,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v18_rx_fillin(
        s: *mut v18_state_t,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v18_put(
        s: *mut v18_state_t,
        msg: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v18_get_current_mode(s: *mut v18_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v18_mode_to_str(
        mode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tz_s {
    _unused: [u8; 0],
}
pub type tz_t = tz_s;
pub const TM_SUNDAY: ::std::os::raw::c_uint = 0;
pub const TM_MONDAY: ::std::os::raw::c_uint = 1;
pub const TM_TUESDAY: ::std::os::raw::c_uint = 2;
pub const TM_WEDNESDAY: ::std::os::raw::c_uint = 3;
pub const TM_THURSDAY: ::std::os::raw::c_uint = 4;
pub const TM_FRIDAY: ::std::os::raw::c_uint = 5;
pub const TM_SATURDAY: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub const TM_JANUARY: ::std::os::raw::c_uint = 0;
pub const TM_FEBRUARY: ::std::os::raw::c_uint = 1;
pub const TM_MARCH: ::std::os::raw::c_uint = 2;
pub const TM_APRIL: ::std::os::raw::c_uint = 3;
pub const TM_MAY: ::std::os::raw::c_uint = 4;
pub const TM_JUNE: ::std::os::raw::c_uint = 5;
pub const TM_JULY: ::std::os::raw::c_uint = 6;
pub const TM_AUGUST: ::std::os::raw::c_uint = 7;
pub const TM_SEPTEMBER: ::std::os::raw::c_uint = 8;
pub const TM_OCTOBER: ::std::os::raw::c_uint = 9;
pub const TM_NOVEMBER: ::std::os::raw::c_uint = 10;
pub const TM_DECEMBER: ::std::os::raw::c_uint = 11;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
extern "C" {
    pub fn tz_init(
        tz: *mut tz_t,
        tzstring: *const ::std::os::raw::c_char,
    ) -> *mut tz_t;
}
extern "C" {
    pub fn tz_release(tz: *mut tz_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tz_free(tz: *mut tz_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tz_localtime(
        tz: *mut tz_t,
        tm: *mut tm,
        t: time_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tz_tzname(
        tz: *mut tz_t,
        isdst: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub type t4_row_write_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        buf: *const u8,
        len: size_t,
    ) -> ::std::os::raw::c_int,
>;
pub const t4_image_compression_t_T4_COMPRESSION_NONE: t4_image_compression_t = 1;
pub const t4_image_compression_t_T4_COMPRESSION_T4_1D: t4_image_compression_t = 2;
pub const t4_image_compression_t_T4_COMPRESSION_T4_2D: t4_image_compression_t = 4;
pub const t4_image_compression_t_T4_COMPRESSION_T6: t4_image_compression_t = 8;
pub const t4_image_compression_t_T4_COMPRESSION_T85: t4_image_compression_t = 16;
pub const t4_image_compression_t_T4_COMPRESSION_T85_L0: t4_image_compression_t = 32;
pub const t4_image_compression_t_T4_COMPRESSION_T43: t4_image_compression_t = 64;
pub const t4_image_compression_t_T4_COMPRESSION_T45: t4_image_compression_t = 128;
pub const t4_image_compression_t_T4_COMPRESSION_T42_T81: t4_image_compression_t =
    256;
pub const t4_image_compression_t_T4_COMPRESSION_SYCC_T81: t4_image_compression_t =
    512;
pub const t4_image_compression_t_T4_COMPRESSION_T88: t4_image_compression_t = 1024;
pub const t4_image_compression_t_T4_COMPRESSION_UNCOMPRESSED:
    t4_image_compression_t = 4096;
pub const t4_image_compression_t_T4_COMPRESSION_JPEG: t4_image_compression_t = 8192;
pub const t4_image_compression_t_T4_COMPRESSION_NO_SUBSAMPLING:
    t4_image_compression_t = 8388608;
pub const t4_image_compression_t_T4_COMPRESSION_GRAYSCALE: t4_image_compression_t =
    16777216;
pub const t4_image_compression_t_T4_COMPRESSION_COLOUR: t4_image_compression_t =
    33554432;
pub const t4_image_compression_t_T4_COMPRESSION_12BIT: t4_image_compression_t =
    67108864;
pub const t4_image_compression_t_T4_COMPRESSION_COLOUR_TO_GRAY:
    t4_image_compression_t = 134217728;
pub const t4_image_compression_t_T4_COMPRESSION_GRAY_TO_BILEVEL:
    t4_image_compression_t = 268435456;
pub const t4_image_compression_t_T4_COMPRESSION_COLOUR_TO_BILEVEL:
    t4_image_compression_t = 536870912;
pub const t4_image_compression_t_T4_COMPRESSION_RESCALING: t4_image_compression_t =
    1073741824;
pub type t4_image_compression_t = ::std::os::raw::c_uint;
pub const t4_image_types_t_T4_IMAGE_TYPE_BILEVEL: t4_image_types_t = 0;
pub const t4_image_types_t_T4_IMAGE_TYPE_COLOUR_BILEVEL: t4_image_types_t = 1;
pub const t4_image_types_t_T4_IMAGE_TYPE_4COLOUR_BILEVEL: t4_image_types_t = 2;
pub const t4_image_types_t_T4_IMAGE_TYPE_GRAY_8BIT: t4_image_types_t = 3;
pub const t4_image_types_t_T4_IMAGE_TYPE_GRAY_12BIT: t4_image_types_t = 4;
pub const t4_image_types_t_T4_IMAGE_TYPE_COLOUR_8BIT: t4_image_types_t = 5;
pub const t4_image_types_t_T4_IMAGE_TYPE_4COLOUR_8BIT: t4_image_types_t = 6;
pub const t4_image_types_t_T4_IMAGE_TYPE_COLOUR_12BIT: t4_image_types_t = 7;
pub const t4_image_types_t_T4_IMAGE_TYPE_4COLOUR_12BIT: t4_image_types_t = 8;
pub type t4_image_types_t = ::std::os::raw::c_uint;
pub const t4_image_x_resolution_t_T4_X_RESOLUTION_100: t4_image_x_resolution_t =
    3937;
pub const t4_image_x_resolution_t_T4_X_RESOLUTION_R4: t4_image_x_resolution_t = 4020;
pub const t4_image_x_resolution_t_T4_X_RESOLUTION_200: t4_image_x_resolution_t =
    7874;
pub const t4_image_x_resolution_t_T4_X_RESOLUTION_R8: t4_image_x_resolution_t = 8040;
pub const t4_image_x_resolution_t_T4_X_RESOLUTION_300: t4_image_x_resolution_t =
    11811;
pub const t4_image_x_resolution_t_T4_X_RESOLUTION_400: t4_image_x_resolution_t =
    15748;
pub const t4_image_x_resolution_t_T4_X_RESOLUTION_R16: t4_image_x_resolution_t =
    16080;
pub const t4_image_x_resolution_t_T4_X_RESOLUTION_600: t4_image_x_resolution_t =
    23622;
pub const t4_image_x_resolution_t_T4_X_RESOLUTION_1200: t4_image_x_resolution_t =
    47244;
pub type t4_image_x_resolution_t = ::std::os::raw::c_uint;
pub const t4_image_y_resolution_t_T4_Y_RESOLUTION_STANDARD: t4_image_y_resolution_t =
    3850;
pub const t4_image_y_resolution_t_T4_Y_RESOLUTION_100: t4_image_y_resolution_t =
    3937;
pub const t4_image_y_resolution_t_T4_Y_RESOLUTION_FINE: t4_image_y_resolution_t =
    7700;
pub const t4_image_y_resolution_t_T4_Y_RESOLUTION_200: t4_image_y_resolution_t =
    7874;
pub const t4_image_y_resolution_t_T4_Y_RESOLUTION_300: t4_image_y_resolution_t =
    11811;
pub const t4_image_y_resolution_t_T4_Y_RESOLUTION_SUPERFINE:
    t4_image_y_resolution_t = 15400;
pub const t4_image_y_resolution_t_T4_Y_RESOLUTION_400: t4_image_y_resolution_t =
    15748;
pub const t4_image_y_resolution_t_T4_Y_RESOLUTION_600: t4_image_y_resolution_t =
    23622;
pub const t4_image_y_resolution_t_T4_Y_RESOLUTION_800: t4_image_y_resolution_t =
    31496;
pub const t4_image_y_resolution_t_T4_Y_RESOLUTION_1200: t4_image_y_resolution_t =
    47244;
pub type t4_image_y_resolution_t = ::std::os::raw::c_uint;
pub const T4_RESOLUTION_R8_STANDARD: ::std::os::raw::c_uint = 1;
pub const T4_RESOLUTION_R8_FINE: ::std::os::raw::c_uint = 2;
pub const T4_RESOLUTION_R8_SUPERFINE: ::std::os::raw::c_uint = 4;
pub const T4_RESOLUTION_R16_SUPERFINE: ::std::os::raw::c_uint = 8;
pub const T4_RESOLUTION_100_100: ::std::os::raw::c_uint = 16;
pub const T4_RESOLUTION_200_100: ::std::os::raw::c_uint = 32;
pub const T4_RESOLUTION_200_200: ::std::os::raw::c_uint = 64;
pub const T4_RESOLUTION_200_400: ::std::os::raw::c_uint = 128;
pub const T4_RESOLUTION_300_300: ::std::os::raw::c_uint = 256;
pub const T4_RESOLUTION_300_600: ::std::os::raw::c_uint = 512;
pub const T4_RESOLUTION_400_400: ::std::os::raw::c_uint = 1024;
pub const T4_RESOLUTION_400_800: ::std::os::raw::c_uint = 2048;
pub const T4_RESOLUTION_600_600: ::std::os::raw::c_uint = 4096;
pub const T4_RESOLUTION_600_1200: ::std::os::raw::c_uint = 8192;
pub const T4_RESOLUTION_1200_1200: ::std::os::raw::c_uint = 16384;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const t4_image_width_t_T4_WIDTH_100_A4: t4_image_width_t = 864;
pub const t4_image_width_t_T4_WIDTH_100_B4: t4_image_width_t = 1024;
pub const t4_image_width_t_T4_WIDTH_100_A3: t4_image_width_t = 1216;
pub const t4_image_width_t_T4_WIDTH_200_A4: t4_image_width_t = 1728;
pub const t4_image_width_t_T4_WIDTH_200_B4: t4_image_width_t = 2048;
pub const t4_image_width_t_T4_WIDTH_200_A3: t4_image_width_t = 2432;
pub const t4_image_width_t_T4_WIDTH_300_A4: t4_image_width_t = 2592;
pub const t4_image_width_t_T4_WIDTH_300_B4: t4_image_width_t = 3072;
pub const t4_image_width_t_T4_WIDTH_300_A3: t4_image_width_t = 3648;
pub const t4_image_width_t_T4_WIDTH_400_A4: t4_image_width_t = 3456;
pub const t4_image_width_t_T4_WIDTH_400_B4: t4_image_width_t = 4096;
pub const t4_image_width_t_T4_WIDTH_400_A3: t4_image_width_t = 4864;
pub const t4_image_width_t_T4_WIDTH_600_A4: t4_image_width_t = 5184;
pub const t4_image_width_t_T4_WIDTH_600_B4: t4_image_width_t = 6144;
pub const t4_image_width_t_T4_WIDTH_600_A3: t4_image_width_t = 7296;
pub const t4_image_width_t_T4_WIDTH_1200_A4: t4_image_width_t = 10368;
pub const t4_image_width_t_T4_WIDTH_1200_B4: t4_image_width_t = 12288;
pub const t4_image_width_t_T4_WIDTH_1200_A3: t4_image_width_t = 14592;
pub type t4_image_width_t = ::std::os::raw::c_uint;
pub const t4_image_length_t_T4_LENGTH_STANDARD_A4: t4_image_length_t = 1143;
pub const t4_image_length_t_T4_LENGTH_FINE_A4: t4_image_length_t = 2286;
pub const t4_image_length_t_T4_LENGTH_300_A4: t4_image_length_t = 4665;
pub const t4_image_length_t_T4_LENGTH_SUPERFINE_A4: t4_image_length_t = 4573;
pub const t4_image_length_t_T4_LENGTH_600_A4: t4_image_length_t = 6998;
pub const t4_image_length_t_T4_LENGTH_800_A4: t4_image_length_t = 9330;
pub const t4_image_length_t_T4_LENGTH_1200_A4: t4_image_length_t = 13996;
pub const t4_image_length_t_T4_LENGTH_STANDARD_B4: t4_image_length_t = 1359;
pub const t4_image_length_t_T4_LENGTH_FINE_B4: t4_image_length_t = 2718;
pub const t4_image_length_t_T4_LENGTH_300_B4: t4_image_length_t = 4169;
pub const t4_image_length_t_T4_LENGTH_SUPERFINE_B4: t4_image_length_t = 5436;
pub const t4_image_length_t_T4_LENGTH_600_B4: t4_image_length_t = 8338;
pub const t4_image_length_t_T4_LENGTH_800_B4: t4_image_length_t = 11118;
pub const t4_image_length_t_T4_LENGTH_1200_B4: t4_image_length_t = 16677;
pub const t4_image_length_t_T4_LENGTH_STANDARD_A3: t4_image_length_t = 1617;
pub const t4_image_length_t_T4_LENGTH_FINE_A3: t4_image_length_t = 3234;
pub const t4_image_length_t_T4_LENGTH_300_A3: t4_image_length_t = 4960;
pub const t4_image_length_t_T4_LENGTH_SUPERFINE_A3: t4_image_length_t = 6468;
pub const t4_image_length_t_T4_LENGTH_600_A3: t4_image_length_t = 9921;
pub const t4_image_length_t_T4_LENGTH_800_A3: t4_image_length_t = 13228;
pub const t4_image_length_t_T4_LENGTH_1200_A3: t4_image_length_t = 19842;
pub const t4_image_length_t_T4_LENGTH_STANDARD_US_LETTER: t4_image_length_t = 1075;
pub const t4_image_length_t_T4_LENGTH_FINE_US_LETTER: t4_image_length_t = 2151;
pub const t4_image_length_t_T4_LENGTH_300_US_LETTER: t4_image_length_t = 3300;
pub const t4_image_length_t_T4_LENGTH_SUPERFINE_US_LETTER: t4_image_length_t = 4302;
pub const t4_image_length_t_T4_LENGTH_600_US_LETTER: t4_image_length_t = 6700;
pub const t4_image_length_t_T4_LENGTH_800_US_LETTER: t4_image_length_t = 8800;
pub const t4_image_length_t_T4_LENGTH_1200_US_LETTER: t4_image_length_t = 13200;
pub const t4_image_length_t_T4_LENGTH_STANDARD_US_LEGAL: t4_image_length_t = 1369;
pub const t4_image_length_t_T4_LENGTH_FINE_US_LEGAL: t4_image_length_t = 2738;
pub const t4_image_length_t_T4_LENGTH_300_US_LEGAL: t4_image_length_t = 4200;
pub const t4_image_length_t_T4_LENGTH_SUPERFINE_US_LEGAL: t4_image_length_t = 5476;
pub const t4_image_length_t_T4_LENGTH_600_US_LEGAL: t4_image_length_t = 8400;
pub const t4_image_length_t_T4_LENGTH_800_US_LEGAL: t4_image_length_t = 11200;
pub const t4_image_length_t_T4_LENGTH_1200_US_LEGAL: t4_image_length_t = 16800;
pub type t4_image_length_t = ::std::os::raw::c_uint;
pub const T4_SUPPORT_WIDTH_215MM: ::std::os::raw::c_uint = 1;
pub const T4_SUPPORT_WIDTH_255MM: ::std::os::raw::c_uint = 2;
pub const T4_SUPPORT_WIDTH_303MM: ::std::os::raw::c_uint = 4;
pub const T4_SUPPORT_LENGTH_UNLIMITED: ::std::os::raw::c_uint = 65536;
pub const T4_SUPPORT_LENGTH_A4: ::std::os::raw::c_uint = 131072;
pub const T4_SUPPORT_LENGTH_B4: ::std::os::raw::c_uint = 262144;
pub const T4_SUPPORT_LENGTH_US_LETTER: ::std::os::raw::c_uint = 524288;
pub const T4_SUPPORT_LENGTH_US_LEGAL: ::std::os::raw::c_uint = 1048576;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
pub const t4_decoder_status_t_T4_DECODE_MORE_DATA: t4_decoder_status_t = 0;
pub const t4_decoder_status_t_T4_DECODE_OK: t4_decoder_status_t = -1;
pub const t4_decoder_status_t_T4_DECODE_INTERRUPT: t4_decoder_status_t = -2;
pub const t4_decoder_status_t_T4_DECODE_ABORTED: t4_decoder_status_t = -3;
pub const t4_decoder_status_t_T4_DECODE_NOMEM: t4_decoder_status_t = -4;
pub const t4_decoder_status_t_T4_DECODE_INVALID_DATA: t4_decoder_status_t = -5;
pub type t4_decoder_status_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t4_rx_state_s {
    _unused: [u8; 0],
}
pub type t4_rx_state_t = t4_rx_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t4_stats_t {
    pub pages_transferred: ::std::os::raw::c_int,
    pub pages_in_file: ::std::os::raw::c_int,
    pub bad_rows: ::std::os::raw::c_int,
    pub longest_bad_row_run: ::std::os::raw::c_int,
    pub image_type: ::std::os::raw::c_int,
    pub image_x_resolution: ::std::os::raw::c_int,
    pub image_y_resolution: ::std::os::raw::c_int,
    pub image_width: ::std::os::raw::c_int,
    pub image_length: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub x_resolution: ::std::os::raw::c_int,
    pub y_resolution: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub compression: ::std::os::raw::c_int,
    pub line_image_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_t4_stats_t() {
    assert_eq!(
        ::std::mem::size_of::<t4_stats_t>(),
        64usize,
        concat!("Size of: ", stringify!(t4_stats_t))
    );
    assert_eq!(
        ::std::mem::align_of::<t4_stats_t>(),
        4usize,
        concat!("Alignment of ", stringify!(t4_stats_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t4_stats_t>())).pages_transferred as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(pages_transferred)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t4_stats_t>())).pages_in_file as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(pages_in_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t4_stats_t>())).bad_rows as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(bad_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t4_stats_t>())).longest_bad_row_run as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(longest_bad_row_run)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t4_stats_t>())).image_type as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(image_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t4_stats_t>())).image_x_resolution as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(image_x_resolution)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t4_stats_t>())).image_y_resolution as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(image_y_resolution)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t4_stats_t>())).image_width as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(image_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t4_stats_t>())).image_length as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(image_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t4_stats_t>())).type_ as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t4_stats_t>())).x_resolution as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(x_resolution)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t4_stats_t>())).y_resolution as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(y_resolution)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t4_stats_t>())).width as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t4_stats_t>())).length as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t4_stats_t>())).compression as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(compression)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t4_stats_t>())).line_image_size as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(t4_stats_t),
            "::",
            stringify!(line_image_size)
        )
    );
}
extern "C" {
    pub fn t4_rx_start_page(s: *mut t4_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_rx_put_bit(
        s: *mut t4_rx_state_t,
        bit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_rx_put(
        s: *mut t4_rx_state_t,
        buf: *const u8,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_rx_end_page(s: *mut t4_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_rx_set_row_write_handler(
        s: *mut t4_rx_state_t,
        handler: t4_row_write_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_rx_set_rx_encoding(
        s: *mut t4_rx_state_t,
        encoding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_rx_set_image_width(
        s: *mut t4_rx_state_t,
        width: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t4_rx_set_y_resolution(
        s: *mut t4_rx_state_t,
        resolution: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t4_rx_set_x_resolution(
        s: *mut t4_rx_state_t,
        resolution: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t4_rx_set_dcs(s: *mut t4_rx_state_t, dcs: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn t4_rx_set_sub_address(
        s: *mut t4_rx_state_t,
        sub_address: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn t4_rx_set_far_ident(
        s: *mut t4_rx_state_t,
        ident: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn t4_rx_set_vendor(
        s: *mut t4_rx_state_t,
        vendor: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn t4_rx_set_model(
        s: *mut t4_rx_state_t,
        model: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn t4_rx_get_transfer_statistics(s: *mut t4_rx_state_t, t: *mut t4_stats_t);
}
extern "C" {
    pub fn t4_compression_to_str(
        compression: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t4_image_type_to_str(
        type_: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t4_image_resolution_to_str(
        resolution_code: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t4_rx_get_logging_state(s: *mut t4_rx_state_t) -> *mut logging_state_t;
}
extern "C" {
    pub fn t4_rx_init(
        s: *mut t4_rx_state_t,
        file: *const ::std::os::raw::c_char,
        supported_output_compressions: ::std::os::raw::c_int,
    ) -> *mut t4_rx_state_t;
}
extern "C" {
    pub fn t4_rx_release(s: *mut t4_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_rx_free(s: *mut t4_rx_state_t) -> ::std::os::raw::c_int;
}
pub type t4_row_read_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        len: size_t,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t4_tx_state_s {
    _unused: [u8; 0],
}
pub type t4_tx_state_t = t4_tx_state_s;
pub const t4_image_format_status_t_T4_IMAGE_FORMAT_OK: t4_image_format_status_t = 0;
pub const t4_image_format_status_t_T4_IMAGE_FORMAT_INCOMPATIBLE:
    t4_image_format_status_t = -1;
pub const t4_image_format_status_t_T4_IMAGE_FORMAT_NOSIZESUPPORT:
    t4_image_format_status_t = -2;
pub const t4_image_format_status_t_T4_IMAGE_FORMAT_NORESSUPPORT:
    t4_image_format_status_t = -3;
pub type t4_image_format_status_t = ::std::os::raw::c_int;
extern "C" {
    pub fn t4_tx_start_page(s: *mut t4_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_restart_page(s: *mut t4_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_next_page_has_different_format(
        s: *mut t4_tx_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_end_page(s: *mut t4_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_image_complete(s: *mut t4_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_get_bit(s: *mut t4_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_get(
        s: *mut t4_tx_state_t,
        buf: *mut u8,
        max_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_get_tx_compression(s: *mut t4_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_get_tx_image_type(s: *mut t4_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_get_tx_resolution(s: *mut t4_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_get_tx_x_resolution(s: *mut t4_tx_state_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_get_tx_y_resolution(s: *mut t4_tx_state_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_get_tx_image_width(s: *mut t4_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_get_tx_image_width_code(
        s: *mut t4_tx_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_set_tx_image_format(
        s: *mut t4_tx_state_t,
        supported_compressions: ::std::os::raw::c_int,
        supported_image_sizes: ::std::os::raw::c_int,
        supported_bilevel_resolutions: ::std::os::raw::c_int,
        supported_colour_resolutions: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_set_min_bits_per_row(
        s: *mut t4_tx_state_t,
        bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t4_tx_set_max_2d_rows_per_1d_row(
        s: *mut t4_tx_state_t,
        max: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t4_tx_set_local_ident(
        s: *mut t4_tx_state_t,
        ident: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn t4_tx_set_header_info(
        s: *mut t4_tx_state_t,
        info: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn t4_tx_set_header_tz(s: *mut t4_tx_state_t, tz: *mut tz_t);
}
extern "C" {
    pub fn t4_tx_set_header_overlays_image(
        s: *mut t4_tx_state_t,
        header_overlays_image: bool,
    );
}
extern "C" {
    pub fn t4_tx_set_row_read_handler(
        s: *mut t4_tx_state_t,
        handler: t4_row_read_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_get_pages_in_file(s: *mut t4_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_get_current_page_in_file(
        s: *mut t4_tx_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_get_transfer_statistics(s: *mut t4_tx_state_t, t: *mut t4_stats_t);
}
extern "C" {
    pub fn t4_tx_get_logging_state(s: *mut t4_tx_state_t) -> *mut logging_state_t;
}
extern "C" {
    pub fn t4_tx_init(
        s: *mut t4_tx_state_t,
        file: *const ::std::os::raw::c_char,
        start_page: ::std::os::raw::c_int,
        stop_page: ::std::os::raw::c_int,
    ) -> *mut t4_tx_state_t;
}
extern "C" {
    pub fn t4_tx_release(s: *mut t4_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_tx_free(s: *mut t4_tx_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct image_translate_state_s {
    _unused: [u8; 0],
}
pub type image_translate_state_t = image_translate_state_s;
extern "C" {
    pub fn image_translate_row(
        s: *mut image_translate_state_t,
        buf: *mut u8,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn image_translate_get_output_width(
        s: *mut image_translate_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn image_translate_get_output_length(
        s: *mut image_translate_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn image_translate_set_row_read_handler(
        s: *mut image_translate_state_t,
        row_read_handler: t4_row_read_handler_t,
        row_read_user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn image_translate_restart(
        s: *mut image_translate_state_t,
        input_length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn image_translate_init(
        s: *mut image_translate_state_t,
        output_format: ::std::os::raw::c_int,
        output_width: ::std::os::raw::c_int,
        output_length: ::std::os::raw::c_int,
        input_format: ::std::os::raw::c_int,
        input_width: ::std::os::raw::c_int,
        input_length: ::std::os::raw::c_int,
        row_read_handler: t4_row_read_handler_t,
        row_read_user_data: *mut ::std::os::raw::c_void,
    ) -> *mut image_translate_state_t;
}
extern "C" {
    pub fn image_translate_release(
        s: *mut image_translate_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn image_translate_free(
        s: *mut image_translate_state_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t4_t6_decode_state_s {
    _unused: [u8; 0],
}
pub type t4_t6_decode_state_t = t4_t6_decode_state_s;
extern "C" {
    pub fn t4_t6_decode_put_bit(
        s: *mut t4_t6_decode_state_t,
        bit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_decode_put(
        s: *mut t4_t6_decode_state_t,
        buf: *const u8,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_decode_set_row_write_handler(
        s: *mut t4_t6_decode_state_t,
        handler: t4_row_write_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_decode_set_encoding(
        s: *mut t4_t6_decode_state_t,
        encoding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_decode_get_image_width(s: *mut t4_t6_decode_state_t) -> u32;
}
extern "C" {
    pub fn t4_t6_decode_get_image_length(s: *mut t4_t6_decode_state_t) -> u32;
}
extern "C" {
    pub fn t4_t6_decode_get_compressed_image_size(
        s: *mut t4_t6_decode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_decode_get_logging_state(
        s: *mut t4_t6_decode_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn t4_t6_decode_restart(
        s: *mut t4_t6_decode_state_t,
        image_width: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_decode_init(
        s: *mut t4_t6_decode_state_t,
        encoding: ::std::os::raw::c_int,
        image_width: ::std::os::raw::c_int,
        handler: t4_row_write_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut t4_t6_decode_state_t;
}
extern "C" {
    pub fn t4_t6_decode_release(
        s: *mut t4_t6_decode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_decode_free(s: *mut t4_t6_decode_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t4_t6_encode_state_s {
    _unused: [u8; 0],
}
pub type t4_t6_encode_state_t = t4_t6_encode_state_s;
extern "C" {
    pub fn t4_t6_encode_image_complete(
        s: *mut t4_t6_encode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_encode_get_bit(
        s: *mut t4_t6_encode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_encode_get(
        s: *mut t4_t6_encode_state_t,
        buf: *mut u8,
        max_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_encode_set_row_read_handler(
        s: *mut t4_t6_encode_state_t,
        handler: t4_row_read_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_encode_set_encoding(
        s: *mut t4_t6_encode_state_t,
        encoding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_encode_set_image_width(
        s: *mut t4_t6_encode_state_t,
        image_width: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_encode_set_image_length(
        s: *mut t4_t6_encode_state_t,
        image_length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_encode_get_image_width(s: *mut t4_t6_encode_state_t) -> u32;
}
extern "C" {
    pub fn t4_t6_encode_get_image_length(s: *mut t4_t6_encode_state_t) -> u32;
}
extern "C" {
    pub fn t4_t6_encode_get_compressed_image_size(
        s: *mut t4_t6_encode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_encode_set_min_bits_per_row(
        s: *mut t4_t6_encode_state_t,
        bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t4_t6_encode_set_max_2d_rows_per_1d_row(
        s: *mut t4_t6_encode_state_t,
        max: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t4_t6_encode_get_logging_state(
        s: *mut t4_t6_encode_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn t4_t6_encode_restart(
        s: *mut t4_t6_encode_state_t,
        image_width: ::std::os::raw::c_int,
        image_length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_encode_init(
        s: *mut t4_t6_encode_state_t,
        encoding: ::std::os::raw::c_int,
        image_width: ::std::os::raw::c_int,
        image_length: ::std::os::raw::c_int,
        handler: t4_row_read_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut t4_t6_encode_state_t;
}
extern "C" {
    pub fn t4_t6_encode_release(
        s: *mut t4_t6_encode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t4_t6_encode_free(s: *mut t4_t6_encode_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t81_t82_arith_encode_state_s {
    _unused: [u8; 0],
}
pub type t81_t82_arith_encode_state_t = t81_t82_arith_encode_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t81_t82_arith_decode_state_s {
    _unused: [u8; 0],
}
pub type t81_t82_arith_decode_state_t = t81_t82_arith_decode_state_s;
extern "C" {
    pub fn t81_t82_arith_encode_init(
        s: *mut t81_t82_arith_encode_state_t,
        output_byte_handler: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
            ),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut t81_t82_arith_encode_state_t;
}
extern "C" {
    pub fn t81_t82_arith_encode_restart(
        s: *mut t81_t82_arith_encode_state_t,
        reuse_st: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t81_t82_arith_encode_release(
        s: *mut t81_t82_arith_encode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t81_t82_arith_encode_free(
        s: *mut t81_t82_arith_encode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t81_t82_arith_encode(
        s: *mut t81_t82_arith_encode_state_t,
        cx: ::std::os::raw::c_int,
        pix: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t81_t82_arith_encode_flush(s: *mut t81_t82_arith_encode_state_t);
}
extern "C" {
    pub fn t81_t82_arith_decode_init(
        s: *mut t81_t82_arith_decode_state_t,
    ) -> *mut t81_t82_arith_decode_state_t;
}
extern "C" {
    pub fn t81_t82_arith_decode_restart(
        s: *mut t81_t82_arith_decode_state_t,
        reuse_st: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t81_t82_arith_decode_release(
        s: *mut t81_t82_arith_decode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t81_t82_arith_decode_free(
        s: *mut t81_t82_arith_decode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t81_t82_arith_decode(
        s: *mut t81_t82_arith_decode_state_t,
        cx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const T85_TPBON: ::std::os::raw::c_uint = 8;
pub const T85_VLENGTH: ::std::os::raw::c_uint = 32;
pub const T85_LRLTWO: ::std::os::raw::c_uint = 64;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t85_encode_state_s {
    _unused: [u8; 0],
}
pub type t85_encode_state_t = t85_encode_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t85_decode_state_s {
    _unused: [u8; 0],
}
pub type t85_decode_state_t = t85_decode_state_s;
extern "C" {
    pub fn t85_analyse_header(
        width: *mut u32,
        length: *mut u32,
        data: *const u8,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn t85_encode_image_complete(
        s: *mut t85_encode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_encode_get(
        s: *mut t85_encode_state_t,
        buf: *mut u8,
        max_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_encode_set_row_read_handler(
        s: *mut t85_encode_state_t,
        handler: t4_row_read_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_encode_get_logging_state(
        s: *mut t85_encode_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn t85_encode_set_options(
        s: *mut t85_encode_state_t,
        l0: u32,
        mx: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t85_encode_comment(
        s: *mut t85_encode_state_t,
        comment: *const u8,
        len: size_t,
    );
}
extern "C" {
    pub fn t85_encode_set_image_width(
        s: *mut t85_encode_state_t,
        image_width: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_encode_set_image_length(
        s: *mut t85_encode_state_t,
        image_length: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_encode_get_image_width(s: *mut t85_encode_state_t) -> u32;
}
extern "C" {
    pub fn t85_encode_get_image_length(s: *mut t85_encode_state_t) -> u32;
}
extern "C" {
    pub fn t85_encode_get_compressed_image_size(
        s: *mut t85_encode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_encode_abort(s: *mut t85_encode_state_t);
}
extern "C" {
    pub fn t85_encode_restart(
        s: *mut t85_encode_state_t,
        image_width: u32,
        image_length: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_encode_init(
        s: *mut t85_encode_state_t,
        image_width: u32,
        image_length: u32,
        handler: t4_row_read_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut t85_encode_state_t;
}
extern "C" {
    pub fn t85_encode_release(s: *mut t85_encode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_encode_free(s: *mut t85_encode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_decode_get_logging_state(
        s: *mut t85_decode_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn t85_decode_get_image_width(s: *mut t85_decode_state_t) -> u32;
}
extern "C" {
    pub fn t85_decode_get_image_length(s: *mut t85_decode_state_t) -> u32;
}
extern "C" {
    pub fn t85_decode_get_compressed_image_size(
        s: *mut t85_decode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_decode_new_plane(s: *mut t85_decode_state_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_decode_set_row_write_handler(
        s: *mut t85_decode_state_t,
        handler: t4_row_write_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_decode_set_comment_handler(
        s: *mut t85_decode_state_t,
        max_comment_len: u32,
        handler: t4_row_write_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_decode_set_image_size_constraints(
        s: *mut t85_decode_state_t,
        max_xd: u32,
        max_yd: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_decode_rx_status(
        s: *mut t85_decode_state_t,
        status: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t85_decode_put(
        s: *mut t85_decode_state_t,
        data: *const u8,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_decode_restart(s: *mut t85_decode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_decode_init(
        s: *mut t85_decode_state_t,
        handler: t4_row_write_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut t85_decode_state_t;
}
extern "C" {
    pub fn t85_decode_release(s: *mut t85_decode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t85_decode_free(s: *mut t85_decode_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t42_encode_state_s {
    _unused: [u8; 0],
}
pub type t42_encode_state_t = t42_encode_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t42_decode_state_s {
    _unused: [u8; 0],
}
pub type t42_decode_state_t = t42_decode_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lab_params_s {
    _unused: [u8; 0],
}
pub type lab_params_t = lab_params_s;
extern "C" {
    pub fn xyz_to_corrected_color_temp(
        temp: *mut f32,
        xyz: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn colour_temp_to_xyz(xyz: *mut f32, temp: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srgb_to_lab(
        s: *mut lab_params_t,
        lab: *mut u8,
        srgb: *const u8,
        pixels: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lab_to_srgb(
        s: *mut lab_params_t,
        srgb: *mut u8,
        lab: *const u8,
        pixels: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_lab_illuminant(
        s: *mut lab_params_t,
        new_xn: f32,
        new_yn: f32,
        new_zn: f32,
    );
}
extern "C" {
    pub fn set_lab_gamut(
        s: *mut lab_params_t,
        L_min: ::std::os::raw::c_int,
        L_max: ::std::os::raw::c_int,
        a_min: ::std::os::raw::c_int,
        a_max: ::std::os::raw::c_int,
        b_min: ::std::os::raw::c_int,
        b_max: ::std::os::raw::c_int,
        ab_are_signed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_lab_gamut2(
        s: *mut lab_params_t,
        L_P: ::std::os::raw::c_int,
        L_Q: ::std::os::raw::c_int,
        a_P: ::std::os::raw::c_int,
        a_Q: ::std::os::raw::c_int,
        b_P: ::std::os::raw::c_int,
        b_Q: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_lab_gamut2(
        s: *mut lab_params_t,
        L_P: *mut ::std::os::raw::c_int,
        L_Q: *mut ::std::os::raw::c_int,
        a_P: *mut ::std::os::raw::c_int,
        a_Q: *mut ::std::os::raw::c_int,
        b_P: *mut ::std::os::raw::c_int,
        b_Q: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t42_analyse_header(
        width: *mut u32,
        length: *mut u32,
        data: *const u8,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn t42_encode_set_options(
        s: *mut t42_encode_state_t,
        l0: u32,
        quality: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t42_encode_set_image_width(
        s: *mut t42_encode_state_t,
        image_width: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_encode_set_image_length(
        s: *mut t42_encode_state_t,
        length: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_encode_set_image_type(
        s: *mut t42_encode_state_t,
        image_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_encode_abort(s: *mut t42_encode_state_t);
}
extern "C" {
    pub fn t42_encode_comment(
        s: *mut t42_encode_state_t,
        comment: *const u8,
        len: size_t,
    );
}
extern "C" {
    pub fn t42_encode_image_complete(
        s: *mut t42_encode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_encode_get(
        s: *mut t42_encode_state_t,
        buf: *mut u8,
        max_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_encode_get_image_width(s: *mut t42_encode_state_t) -> u32;
}
extern "C" {
    pub fn t42_encode_get_image_length(s: *mut t42_encode_state_t) -> u32;
}
extern "C" {
    pub fn t42_encode_get_compressed_image_size(
        s: *mut t42_encode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_encode_set_row_read_handler(
        s: *mut t42_encode_state_t,
        handler: t4_row_read_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_encode_get_logging_state(
        s: *mut t42_encode_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn t42_encode_restart(
        s: *mut t42_encode_state_t,
        image_width: u32,
        image_length: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_encode_init(
        s: *mut t42_encode_state_t,
        image_width: u32,
        image_length: u32,
        handler: t4_row_read_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut t42_encode_state_t;
}
extern "C" {
    pub fn t42_encode_release(s: *mut t42_encode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_encode_free(s: *mut t42_encode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_decode_rx_status(
        s: *mut t42_decode_state_t,
        status: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t42_decode_put(
        s: *mut t42_decode_state_t,
        data: *const u8,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_decode_set_row_write_handler(
        s: *mut t42_decode_state_t,
        handler: t4_row_write_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_decode_set_comment_handler(
        s: *mut t42_decode_state_t,
        max_comment_len: u32,
        handler: t4_row_write_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_decode_set_image_size_constraints(
        s: *mut t42_decode_state_t,
        max_xd: u32,
        max_yd: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_decode_get_image_width(s: *mut t42_decode_state_t) -> u32;
}
extern "C" {
    pub fn t42_decode_get_image_length(s: *mut t42_decode_state_t) -> u32;
}
extern "C" {
    pub fn t42_decode_get_compressed_image_size(
        s: *mut t42_decode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_decode_get_logging_state(
        s: *mut t42_decode_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn t42_decode_restart(s: *mut t42_decode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_decode_init(
        s: *mut t42_decode_state_t,
        handler: t4_row_write_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut t42_decode_state_t;
}
extern "C" {
    pub fn t42_decode_release(s: *mut t42_decode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t42_decode_free(s: *mut t42_decode_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t43_encode_state_s {
    _unused: [u8; 0],
}
pub type t43_encode_state_t = t43_encode_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t43_decode_state_s {
    _unused: [u8; 0],
}
pub type t43_decode_state_t = t43_decode_state_s;
pub const T43_IMAGE_TYPE_RGB_BILEVEL: ::std::os::raw::c_uint = 0;
pub const T43_IMAGE_TYPE_CMY_BILEVEL: ::std::os::raw::c_uint = 1;
pub const T43_IMAGE_TYPE_CMYK_BILEVEL: ::std::os::raw::c_uint = 2;
pub const T43_IMAGE_TYPE_8BIT_COLOUR_PALETTE: ::std::os::raw::c_uint = 16;
pub const T43_IMAGE_TYPE_12BIT_COLOUR_PALETTE: ::std::os::raw::c_uint = 17;
pub const T43_IMAGE_TYPE_GRAY: ::std::os::raw::c_uint = 32;
pub const T43_IMAGE_TYPE_COLOUR: ::std::os::raw::c_uint = 48;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
extern "C" {
    pub fn t43_image_type_to_str(
        type_: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t43_encode_set_options(
        s: *mut t43_encode_state_t,
        l0: u32,
        mx: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t43_encode_set_image_width(
        s: *mut t43_encode_state_t,
        image_width: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_encode_set_image_length(
        s: *mut t43_encode_state_t,
        length: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_encode_set_image_type(
        s: *mut t43_encode_state_t,
        image_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_encode_abort(s: *mut t43_encode_state_t);
}
extern "C" {
    pub fn t43_encode_comment(
        s: *mut t43_encode_state_t,
        comment: *const u8,
        len: size_t,
    );
}
extern "C" {
    pub fn t43_encode_image_complete(
        s: *mut t43_encode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_encode_get(
        s: *mut t43_encode_state_t,
        buf: *mut u8,
        max_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_encode_get_image_width(s: *mut t43_encode_state_t) -> u32;
}
extern "C" {
    pub fn t43_encode_get_image_length(s: *mut t43_encode_state_t) -> u32;
}
extern "C" {
    pub fn t43_encode_get_compressed_image_size(
        s: *mut t43_encode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_encode_set_row_read_handler(
        s: *mut t43_encode_state_t,
        handler: t4_row_read_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_encode_get_logging_state(
        s: *mut t43_encode_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn t43_encode_restart(
        s: *mut t43_encode_state_t,
        image_width: u32,
        image_length: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_encode_init(
        s: *mut t43_encode_state_t,
        image_width: u32,
        image_length: u32,
        handler: t4_row_read_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut t43_encode_state_t;
}
extern "C" {
    pub fn t43_encode_release(s: *mut t43_encode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_encode_free(s: *mut t43_encode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_decode_rx_status(
        s: *mut t43_decode_state_t,
        status: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t43_decode_put(
        s: *mut t43_decode_state_t,
        data: *const u8,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_decode_set_row_write_handler(
        s: *mut t43_decode_state_t,
        handler: t4_row_write_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_decode_set_comment_handler(
        s: *mut t43_decode_state_t,
        max_comment_len: u32,
        handler: t4_row_write_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_decode_set_image_size_constraints(
        s: *mut t43_decode_state_t,
        max_xd: u32,
        max_yd: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_decode_get_image_width(s: *mut t43_decode_state_t) -> u32;
}
extern "C" {
    pub fn t43_decode_get_image_length(s: *mut t43_decode_state_t) -> u32;
}
extern "C" {
    pub fn t43_decode_get_compressed_image_size(
        s: *mut t43_decode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_decode_get_logging_state(
        s: *mut t43_decode_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn t43_decode_restart(s: *mut t43_decode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_decode_init(
        s: *mut t43_decode_state_t,
        handler: t4_row_write_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut t43_decode_state_t;
}
extern "C" {
    pub fn t43_decode_release(s: *mut t43_decode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t43_decode_free(s: *mut t43_decode_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t30_state_s {
    _unused: [u8; 0],
}
pub type t30_state_t = t30_state_s;
pub type t30_phase_b_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        result: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type t30_phase_d_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        result: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type t30_phase_e_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        completion_code: ::std::os::raw::c_int,
    ),
>;
pub type t30_real_time_frame_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        direction: bool,
        msg: *const u8,
        len: ::std::os::raw::c_int,
    ),
>;
pub type t30_document_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type t30_set_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_int,
        bit_rate: ::std::os::raw::c_int,
        short_train: ::std::os::raw::c_int,
        use_hdlc: ::std::os::raw::c_int,
    ),
>;
pub type t30_send_hdlc_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        msg: *const u8,
        len: ::std::os::raw::c_int,
    ),
>;
pub type t30_document_get_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        msg: *mut u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type t30_document_put_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        msg: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub const T30_ERR_OK: ::std::os::raw::c_uint = 0;
pub const T30_ERR_CEDTONE: ::std::os::raw::c_uint = 1;
pub const T30_ERR_T0_EXPIRED: ::std::os::raw::c_uint = 2;
pub const T30_ERR_T1_EXPIRED: ::std::os::raw::c_uint = 3;
pub const T30_ERR_T3_EXPIRED: ::std::os::raw::c_uint = 4;
pub const T30_ERR_HDLC_CARRIER: ::std::os::raw::c_uint = 5;
pub const T30_ERR_CANNOT_TRAIN: ::std::os::raw::c_uint = 6;
pub const T30_ERR_OPER_INT_FAIL: ::std::os::raw::c_uint = 7;
pub const T30_ERR_INCOMPATIBLE: ::std::os::raw::c_uint = 8;
pub const T30_ERR_RX_INCAPABLE: ::std::os::raw::c_uint = 9;
pub const T30_ERR_TX_INCAPABLE: ::std::os::raw::c_uint = 10;
pub const T30_ERR_NORESSUPPORT: ::std::os::raw::c_uint = 11;
pub const T30_ERR_NOSIZESUPPORT: ::std::os::raw::c_uint = 12;
pub const T30_ERR_UNEXPECTED: ::std::os::raw::c_uint = 13;
pub const T30_ERR_TX_BADDCS: ::std::os::raw::c_uint = 14;
pub const T30_ERR_TX_BADPG: ::std::os::raw::c_uint = 15;
pub const T30_ERR_TX_ECMPHD: ::std::os::raw::c_uint = 16;
pub const T30_ERR_TX_GOTDCN: ::std::os::raw::c_uint = 17;
pub const T30_ERR_TX_INVALRSP: ::std::os::raw::c_uint = 18;
pub const T30_ERR_TX_NODIS: ::std::os::raw::c_uint = 19;
pub const T30_ERR_TX_PHBDEAD: ::std::os::raw::c_uint = 20;
pub const T30_ERR_TX_PHDDEAD: ::std::os::raw::c_uint = 21;
pub const T30_ERR_TX_T5EXP: ::std::os::raw::c_uint = 22;
pub const T30_ERR_RX_ECMPHD: ::std::os::raw::c_uint = 23;
pub const T30_ERR_RX_GOTDCS: ::std::os::raw::c_uint = 24;
pub const T30_ERR_RX_INVALCMD: ::std::os::raw::c_uint = 25;
pub const T30_ERR_RX_NOCARRIER: ::std::os::raw::c_uint = 26;
pub const T30_ERR_RX_NOEOL: ::std::os::raw::c_uint = 27;
pub const T30_ERR_RX_NOFAX: ::std::os::raw::c_uint = 28;
pub const T30_ERR_RX_T2EXPDCN: ::std::os::raw::c_uint = 29;
pub const T30_ERR_RX_T2EXPD: ::std::os::raw::c_uint = 30;
pub const T30_ERR_RX_T2EXPFAX: ::std::os::raw::c_uint = 31;
pub const T30_ERR_RX_T2EXPMPS: ::std::os::raw::c_uint = 32;
pub const T30_ERR_RX_T2EXPRR: ::std::os::raw::c_uint = 33;
pub const T30_ERR_RX_T2EXP: ::std::os::raw::c_uint = 34;
pub const T30_ERR_RX_DCNWHY: ::std::os::raw::c_uint = 35;
pub const T30_ERR_RX_DCNDATA: ::std::os::raw::c_uint = 36;
pub const T30_ERR_RX_DCNFAX: ::std::os::raw::c_uint = 37;
pub const T30_ERR_RX_DCNPHD: ::std::os::raw::c_uint = 38;
pub const T30_ERR_RX_DCNRRD: ::std::os::raw::c_uint = 39;
pub const T30_ERR_RX_DCNNORTN: ::std::os::raw::c_uint = 40;
pub const T30_ERR_FILEERROR: ::std::os::raw::c_uint = 41;
pub const T30_ERR_NOPAGE: ::std::os::raw::c_uint = 42;
pub const T30_ERR_BADTIFF: ::std::os::raw::c_uint = 43;
pub const T30_ERR_BADPAGE: ::std::os::raw::c_uint = 44;
pub const T30_ERR_BADTAG: ::std::os::raw::c_uint = 45;
pub const T30_ERR_BADTIFFHDR: ::std::os::raw::c_uint = 46;
pub const T30_ERR_NOMEM: ::std::os::raw::c_uint = 47;
pub const T30_ERR_RETRYDCN: ::std::os::raw::c_uint = 48;
pub const T30_ERR_CALLDROPPED: ::std::os::raw::c_uint = 49;
pub const T30_ERR_NOPOLL: ::std::os::raw::c_uint = 50;
pub const T30_ERR_IDENT_UNACCEPTABLE: ::std::os::raw::c_uint = 51;
pub const T30_ERR_SUB_UNACCEPTABLE: ::std::os::raw::c_uint = 52;
pub const T30_ERR_SEP_UNACCEPTABLE: ::std::os::raw::c_uint = 53;
pub const T30_ERR_PSA_UNACCEPTABLE: ::std::os::raw::c_uint = 54;
pub const T30_ERR_SID_UNACCEPTABLE: ::std::os::raw::c_uint = 55;
pub const T30_ERR_PWD_UNACCEPTABLE: ::std::os::raw::c_uint = 56;
pub const T30_ERR_TSA_UNACCEPTABLE: ::std::os::raw::c_uint = 57;
pub const T30_ERR_IRA_UNACCEPTABLE: ::std::os::raw::c_uint = 58;
pub const T30_ERR_CIA_UNACCEPTABLE: ::std::os::raw::c_uint = 59;
pub const T30_ERR_ISP_UNACCEPTABLE: ::std::os::raw::c_uint = 60;
pub const T30_ERR_CSA_UNACCEPTABLE: ::std::os::raw::c_uint = 61;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
pub const T30_MODEM_NONE: ::std::os::raw::c_uint = 0;
pub const T30_MODEM_PAUSE: ::std::os::raw::c_uint = 1;
pub const T30_MODEM_CED: ::std::os::raw::c_uint = 2;
pub const T30_MODEM_CNG: ::std::os::raw::c_uint = 3;
pub const T30_MODEM_V21: ::std::os::raw::c_uint = 4;
pub const T30_MODEM_V27TER: ::std::os::raw::c_uint = 5;
pub const T30_MODEM_V29: ::std::os::raw::c_uint = 6;
pub const T30_MODEM_V17: ::std::os::raw::c_uint = 7;
pub const T30_MODEM_V34HDX: ::std::os::raw::c_uint = 8;
pub const T30_MODEM_DONE: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
pub const T30_SUPPORT_V27TER: ::std::os::raw::c_uint = 1;
pub const T30_SUPPORT_V29: ::std::os::raw::c_uint = 2;
pub const T30_SUPPORT_V17: ::std::os::raw::c_uint = 4;
pub const T30_SUPPORT_V34HDX: ::std::os::raw::c_uint = 8;
pub const T30_SUPPORT_IAF: ::std::os::raw::c_uint = 16;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
pub const T30_FRONT_END_SEND_STEP_COMPLETE: ::std::os::raw::c_uint = 0;
pub const T30_FRONT_END_RECEIVE_COMPLETE: ::std::os::raw::c_uint = 1;
pub const T30_FRONT_END_SIGNAL_PRESENT: ::std::os::raw::c_uint = 2;
pub const T30_FRONT_END_SIGNAL_ABSENT: ::std::os::raw::c_uint = 3;
pub const T30_FRONT_END_CED_PRESENT: ::std::os::raw::c_uint = 4;
pub const T30_FRONT_END_CNG_PRESENT: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
pub const T30_SUPPORT_IDENTIFICATION: ::std::os::raw::c_uint = 1;
pub const T30_SUPPORT_SELECTIVE_POLLING: ::std::os::raw::c_uint = 2;
pub const T30_SUPPORT_POLLED_SUB_ADDRESSING: ::std::os::raw::c_uint = 4;
pub const T30_SUPPORT_MULTIPLE_SELECTIVE_POLLING: ::std::os::raw::c_uint = 8;
pub const T30_SUPPORT_SUB_ADDRESSING: ::std::os::raw::c_uint = 16;
pub const T30_SUPPORT_TRANSMITTING_SUBSCRIBER_INTERNET_ADDRESS:
    ::std::os::raw::c_uint = 32;
pub const T30_SUPPORT_INTERNET_ROUTING_ADDRESS: ::std::os::raw::c_uint = 64;
pub const T30_SUPPORT_CALLING_SUBSCRIBER_INTERNET_ADDRESS: ::std::os::raw::c_uint =
    128;
pub const T30_SUPPORT_INTERNET_SELECTIVE_POLLING_ADDRESS: ::std::os::raw::c_uint =
    256;
pub const T30_SUPPORT_CALLED_SUBSCRIBER_INTERNET_ADDRESS: ::std::os::raw::c_uint =
    512;
pub const T30_SUPPORT_FIELD_NOT_VALID: ::std::os::raw::c_uint = 1024;
pub const T30_SUPPORT_COMMAND_REPEAT: ::std::os::raw::c_uint = 2048;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
pub const T30_IAF_MODE_T37: ::std::os::raw::c_uint = 1;
pub const T30_IAF_MODE_T38: ::std::os::raw::c_uint = 2;
pub const T30_IAF_MODE_FLOW_CONTROL: ::std::os::raw::c_uint = 4;
pub const T30_IAF_MODE_CONTINUOUS_FLOW: ::std::os::raw::c_uint = 8;
pub const T30_IAF_MODE_NO_TCF: ::std::os::raw::c_uint = 16;
pub const T30_IAF_MODE_NO_FILL_BITS: ::std::os::raw::c_uint = 32;
pub const T30_IAF_MODE_NO_INDICATORS: ::std::os::raw::c_uint = 64;
pub const T30_IAF_MODE_RELAXED_TIMERS: ::std::os::raw::c_uint = 128;
pub type _bindgen_ty_32 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t30_exchanged_info_t {
    pub ident: [::std::os::raw::c_char; 21usize],
    pub sub_address: [::std::os::raw::c_char; 21usize],
    pub selective_polling_address: [::std::os::raw::c_char; 21usize],
    pub polled_sub_address: [::std::os::raw::c_char; 21usize],
    pub sender_ident: [::std::os::raw::c_char; 21usize],
    pub password: [::std::os::raw::c_char; 21usize],
    pub nsf: *mut u8,
    pub nsf_len: size_t,
    pub nsc: *mut u8,
    pub nsc_len: size_t,
    pub nss: *mut u8,
    pub nss_len: size_t,
    pub tsa_type: ::std::os::raw::c_int,
    pub tsa: *mut ::std::os::raw::c_char,
    pub tsa_len: size_t,
    pub ira_type: ::std::os::raw::c_int,
    pub ira: *mut ::std::os::raw::c_char,
    pub ira_len: size_t,
    pub cia_type: ::std::os::raw::c_int,
    pub cia: *mut ::std::os::raw::c_char,
    pub cia_len: size_t,
    pub isp_type: ::std::os::raw::c_int,
    pub isp: *mut ::std::os::raw::c_char,
    pub isp_len: size_t,
    pub csa_type: ::std::os::raw::c_int,
    pub csa: *mut ::std::os::raw::c_char,
    pub csa_len: size_t,
}
#[test]
fn bindgen_test_layout_t30_exchanged_info_t() {
    assert_eq!(
        ::std::mem::size_of::<t30_exchanged_info_t>(),
        296usize,
        concat!("Size of: ", stringify!(t30_exchanged_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<t30_exchanged_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(t30_exchanged_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).ident as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(ident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).sub_address as *const _
                as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(sub_address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>()))
                .selective_polling_address as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(selective_polling_address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).polled_sub_address
                as *const _ as usize
        },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(polled_sub_address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).sender_ident as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(sender_ident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).password as *const _
                as usize
        },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).nsf as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(nsf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).nsf_len as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(nsf_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).nsc as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(nsc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).nsc_len as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(nsc_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).nss as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(nss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).nss_len as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(nss_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).tsa_type as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(tsa_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).tsa as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(tsa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).tsa_len as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(tsa_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).ira_type as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(ira_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).ira as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(ira)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).ira_len as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(ira_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).cia_type as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(cia_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).cia as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(cia)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).cia_len as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(cia_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).isp_type as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(isp_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).isp as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(isp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).isp_len as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(isp_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).csa_type as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(csa_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).csa as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(csa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_exchanged_info_t>())).csa_len as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_exchanged_info_t),
            "::",
            stringify!(csa_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t30_stats_t {
    pub bit_rate: ::std::os::raw::c_int,
    pub error_correcting_mode: ::std::os::raw::c_int,
    pub pages_tx: ::std::os::raw::c_int,
    pub pages_rx: ::std::os::raw::c_int,
    pub pages_in_file: ::std::os::raw::c_int,
    pub image_type: ::std::os::raw::c_int,
    pub image_x_resolution: ::std::os::raw::c_int,
    pub image_y_resolution: ::std::os::raw::c_int,
    pub image_width: ::std::os::raw::c_int,
    pub image_length: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub x_resolution: ::std::os::raw::c_int,
    pub y_resolution: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub image_size: ::std::os::raw::c_int,
    pub compression: ::std::os::raw::c_int,
    pub bad_rows: ::std::os::raw::c_int,
    pub longest_bad_row_run: ::std::os::raw::c_int,
    pub error_correcting_mode_retries: ::std::os::raw::c_int,
    pub current_status: ::std::os::raw::c_int,
    pub rtp_events: ::std::os::raw::c_int,
    pub rtn_events: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_t30_stats_t() {
    assert_eq!(
        ::std::mem::size_of::<t30_stats_t>(),
        92usize,
        concat!("Size of: ", stringify!(t30_stats_t))
    );
    assert_eq!(
        ::std::mem::align_of::<t30_stats_t>(),
        4usize,
        concat!("Alignment of ", stringify!(t30_stats_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).bit_rate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(bit_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).error_correcting_mode as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(error_correcting_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).pages_tx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(pages_tx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).pages_rx as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(pages_rx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).pages_in_file as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(pages_in_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).image_type as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(image_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).image_x_resolution as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(image_x_resolution)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).image_y_resolution as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(image_y_resolution)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).image_width as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(image_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).image_length as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(image_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).type_ as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).x_resolution as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(x_resolution)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).y_resolution as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(y_resolution)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).width as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).length as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).image_size as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(image_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).compression as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(compression)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).bad_rows as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(bad_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).longest_bad_row_run as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(longest_bad_row_run)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).error_correcting_mode_retries
                as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(error_correcting_mode_retries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).current_status as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(current_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).rtp_events as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(rtp_events)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t30_stats_t>())).rtn_events as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(t30_stats_t),
            "::",
            stringify!(rtn_events)
        )
    );
}
extern "C" {
    pub fn t30_init(
        s: *mut t30_state_t,
        calling_party: bool,
        set_rx_type_handler: t30_set_handler_t,
        set_rx_type_user_data: *mut ::std::os::raw::c_void,
        set_tx_type_handler: t30_set_handler_t,
        set_tx_type_user_data: *mut ::std::os::raw::c_void,
        send_hdlc_handler: t30_send_hdlc_handler_t,
        send_hdlc_user_data: *mut ::std::os::raw::c_void,
    ) -> *mut t30_state_t;
}
extern "C" {
    pub fn t30_release(s: *mut t30_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_free(s: *mut t30_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_restart(
        s: *mut t30_state_t,
        calling_party: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_call_active(s: *mut t30_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_terminate(s: *mut t30_state_t);
}
extern "C" {
    pub fn t30_front_end_status(
        user_data: *mut ::std::os::raw::c_void,
        status: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t30_non_ecm_get_bit(
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_non_ecm_get(
        user_data: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        max_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_non_ecm_put_bit(
        user_data: *mut ::std::os::raw::c_void,
        bit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t30_non_ecm_put(
        user_data: *mut ::std::os::raw::c_void,
        buf: *const u8,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t30_hdlc_accept(
        user_data: *mut ::std::os::raw::c_void,
        msg: *const u8,
        len: ::std::os::raw::c_int,
        ok: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t30_timer_update(s: *mut t30_state_t, samples: ::std::os::raw::c_int);
}
extern "C" {
    pub fn t30_get_transfer_statistics(s: *mut t30_state_t, t: *mut t30_stats_t);
}
extern "C" {
    pub fn t30_local_interrupt_request(
        s: *mut t30_state_t,
        state: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t30_remote_interrupts_allowed(
        s: *mut t30_state_t,
        state: ::std::os::raw::c_int,
    );
}
pub const T33_NONE: ::std::os::raw::c_uint = 0;
pub const T33_SST: ::std::os::raw::c_uint = 1;
pub const T33_EXT: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
extern "C" {
    pub fn t33_sub_address_extract_field(
        field: *mut u8,
        t33: *const u8,
        field_no: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t33_sub_address_add_field(
        t33: *mut u8,
        field: *const u8,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t30_set_tx_nsf(
        s: *mut t30_state_t,
        nsf: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_nsf(s: *mut t30_state_t, nsf: *mut *const u8) -> size_t;
}
extern "C" {
    pub fn t30_get_rx_nsf(s: *mut t30_state_t, nsf: *mut *const u8) -> size_t;
}
extern "C" {
    pub fn t30_set_tx_nsc(
        s: *mut t30_state_t,
        nsc: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_nsc(s: *mut t30_state_t, nsc: *mut *const u8) -> size_t;
}
extern "C" {
    pub fn t30_get_rx_nsc(s: *mut t30_state_t, nsc: *mut *const u8) -> size_t;
}
extern "C" {
    pub fn t30_set_tx_nss(
        s: *mut t30_state_t,
        nss: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_nss(s: *mut t30_state_t, nss: *mut *const u8) -> size_t;
}
extern "C" {
    pub fn t30_get_rx_nss(s: *mut t30_state_t, nss: *mut *const u8) -> size_t;
}
extern "C" {
    pub fn t30_set_tx_ident(
        s: *mut t30_state_t,
        id: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_ident(s: *mut t30_state_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_get_rx_ident(s: *mut t30_state_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_set_tx_sub_address(
        s: *mut t30_state_t,
        sub_address: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_sub_address(
        s: *mut t30_state_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_get_rx_sub_address(
        s: *mut t30_state_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_set_tx_selective_polling_address(
        s: *mut t30_state_t,
        selective_polling_address: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_selective_polling_address(
        s: *mut t30_state_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_get_rx_selective_polling_address(
        s: *mut t30_state_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_set_tx_polled_sub_address(
        s: *mut t30_state_t,
        polled_sub_address: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_polled_sub_address(
        s: *mut t30_state_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_get_rx_polled_sub_address(
        s: *mut t30_state_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_set_tx_sender_ident(
        s: *mut t30_state_t,
        sender_ident: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_sender_ident(
        s: *mut t30_state_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_get_rx_sender_ident(
        s: *mut t30_state_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_set_tx_password(
        s: *mut t30_state_t,
        password: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_password(s: *mut t30_state_t)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_get_rx_password(s: *mut t30_state_t)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_set_keep_bad_quality_pages(s: *mut t30_state_t, keep_bad_pages: bool);
}
extern "C" {
    pub fn t30_set_tx_tsa(
        s: *mut t30_state_t,
        type_: ::std::os::raw::c_int,
        address: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_tsa(
        s: *mut t30_state_t,
        type_: *mut ::std::os::raw::c_int,
        address: *mut *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn t30_get_rx_tsa(
        s: *mut t30_state_t,
        type_: *mut ::std::os::raw::c_int,
        address: *mut *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn t30_set_tx_ira(
        s: *mut t30_state_t,
        type_: ::std::os::raw::c_int,
        address: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_ira(
        s: *mut t30_state_t,
        type_: *mut ::std::os::raw::c_int,
        address: *mut *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn t30_get_rx_ira(
        s: *mut t30_state_t,
        type_: *mut ::std::os::raw::c_int,
        address: *mut *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn t30_set_tx_cia(
        s: *mut t30_state_t,
        type_: ::std::os::raw::c_int,
        address: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_cia(
        s: *mut t30_state_t,
        type_: *mut ::std::os::raw::c_int,
        address: *mut *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn t30_get_rx_cia(
        s: *mut t30_state_t,
        type_: *mut ::std::os::raw::c_int,
        address: *mut *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn t30_set_tx_isp(
        s: *mut t30_state_t,
        type_: ::std::os::raw::c_int,
        address: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_isp(
        s: *mut t30_state_t,
        type_: *mut ::std::os::raw::c_int,
        address: *mut *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn t30_get_rx_isp(
        s: *mut t30_state_t,
        type_: *mut ::std::os::raw::c_int,
        address: *mut *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn t30_set_tx_csa(
        s: *mut t30_state_t,
        type_: ::std::os::raw::c_int,
        address: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_csa(
        s: *mut t30_state_t,
        type_: *mut ::std::os::raw::c_int,
        address: *mut *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn t30_get_rx_csa(
        s: *mut t30_state_t,
        type_: *mut ::std::os::raw::c_int,
        address: *mut *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn t30_set_tx_page_header_overlays_image(
        s: *mut t30_state_t,
        header_overlays_image: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_set_tx_page_header_info(
        s: *mut t30_state_t,
        info: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_set_tx_page_header_tz(
        s: *mut t30_state_t,
        tzstring: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_get_tx_page_header_info(
        s: *mut t30_state_t,
        info: *mut ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn t30_get_rx_country(s: *mut t30_state_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_get_rx_vendor(s: *mut t30_state_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_get_rx_model(s: *mut t30_state_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_set_rx_file(
        s: *mut t30_state_t,
        file: *const ::std::os::raw::c_char,
        stop_page: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t30_set_tx_file(
        s: *mut t30_state_t,
        file: *const ::std::os::raw::c_char,
        start_page: ::std::os::raw::c_int,
        stop_page: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t30_set_iaf_mode(s: *mut t30_state_t, iaf: bool);
}
extern "C" {
    pub fn t30_set_ecm_capability(
        s: *mut t30_state_t,
        enabled: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_set_supported_output_compressions(
        s: *mut t30_state_t,
        supported_compressions: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_set_minimum_scan_line_time(
        s: *mut t30_state_t,
        min_time: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_set_supported_modems(
        s: *mut t30_state_t,
        supported_modems: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_set_supported_compressions(
        s: *mut t30_state_t,
        supported_compressions: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_set_supported_bilevel_resolutions(
        s: *mut t30_state_t,
        supported_resolutions: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_set_supported_colour_resolutions(
        s: *mut t30_state_t,
        supported_resolutions: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_set_supported_image_sizes(
        s: *mut t30_state_t,
        supported_image_sizes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_set_supported_t30_features(
        s: *mut t30_state_t,
        supported_t30_features: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_set_status(s: *mut t30_state_t, status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn t30_set_receiver_not_ready(
        s: *mut t30_state_t,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t30_set_phase_b_handler(
        s: *mut t30_state_t,
        handler: t30_phase_b_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn t30_set_phase_d_handler(
        s: *mut t30_state_t,
        handler: t30_phase_d_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn t30_set_phase_e_handler(
        s: *mut t30_state_t,
        handler: t30_phase_e_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn t30_set_document_handler(
        s: *mut t30_state_t,
        handler: t30_document_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn t30_set_real_time_frame_handler(
        s: *mut t30_state_t,
        handler: t30_real_time_frame_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn t30_set_document_get_handler(
        s: *mut t30_state_t,
        handler: t30_document_get_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn t30_set_document_put_handler(
        s: *mut t30_state_t,
        handler: t30_document_put_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn t30_get_logging_state(s: *mut t30_state_t) -> *mut logging_state_t;
}
pub const T30_DIS: ::std::os::raw::c_uint = 128;
pub const T30_CSI: ::std::os::raw::c_uint = 64;
pub const T30_NSF: ::std::os::raw::c_uint = 32;
pub const T30_DTC: ::std::os::raw::c_uint = 129;
pub const T30_CIG: ::std::os::raw::c_uint = 65;
pub const T30_NSC: ::std::os::raw::c_uint = 33;
pub const T30_PWD: ::std::os::raw::c_uint = 193;
pub const T30_SEP: ::std::os::raw::c_uint = 161;
pub const T30_PSA: ::std::os::raw::c_uint = 97;
pub const T30_CIA: ::std::os::raw::c_uint = 225;
pub const T30_ISP: ::std::os::raw::c_uint = 17;
pub const T30_DCS: ::std::os::raw::c_uint = 130;
pub const T30_TSI: ::std::os::raw::c_uint = 66;
pub const T30_NSS: ::std::os::raw::c_uint = 34;
pub const T30_SUB: ::std::os::raw::c_uint = 194;
pub const T30_SID: ::std::os::raw::c_uint = 162;
pub const T30_CTC: ::std::os::raw::c_uint = 18;
pub const T30_TSA: ::std::os::raw::c_uint = 98;
pub const T30_IRA: ::std::os::raw::c_uint = 226;
pub const T30_CFR: ::std::os::raw::c_uint = 132;
pub const T30_FTT: ::std::os::raw::c_uint = 68;
pub const T30_CTR: ::std::os::raw::c_uint = 196;
pub const T30_CSA: ::std::os::raw::c_uint = 36;
pub const T30_EOM: ::std::os::raw::c_uint = 142;
pub const T30_MPS: ::std::os::raw::c_uint = 78;
pub const T30_EOP: ::std::os::raw::c_uint = 46;
pub const T30_PRI_EOM: ::std::os::raw::c_uint = 158;
pub const T30_PRI_MPS: ::std::os::raw::c_uint = 94;
pub const T30_PRI_EOP: ::std::os::raw::c_uint = 62;
pub const T30_EOS: ::std::os::raw::c_uint = 30;
pub const T30_PPS: ::std::os::raw::c_uint = 190;
pub const T30_EOR: ::std::os::raw::c_uint = 206;
pub const T30_RR: ::std::os::raw::c_uint = 110;
pub const T30_MCF: ::std::os::raw::c_uint = 140;
pub const T30_RTP: ::std::os::raw::c_uint = 204;
pub const T30_RTN: ::std::os::raw::c_uint = 76;
pub const T30_PIP: ::std::os::raw::c_uint = 172;
pub const T30_PIN: ::std::os::raw::c_uint = 44;
pub const T30_PPR: ::std::os::raw::c_uint = 188;
pub const T30_RNR: ::std::os::raw::c_uint = 236;
pub const T30_ERR: ::std::os::raw::c_uint = 28;
pub const T30_FDM: ::std::os::raw::c_uint = 252;
pub const T30_DCN: ::std::os::raw::c_uint = 250;
pub const T30_CRP: ::std::os::raw::c_uint = 26;
pub const T30_FNV: ::std::os::raw::c_uint = 202;
pub const T30_TNR: ::std::os::raw::c_uint = 234;
pub const T30_TR: ::std::os::raw::c_uint = 106;
pub const T30_TK: ::std::os::raw::c_uint = 75;
pub const T30_RK: ::std::os::raw::c_uint = 74;
pub const T30_PSS: ::std::os::raw::c_uint = 31;
pub const T30_DES: ::std::os::raw::c_uint = 160;
pub const T30_DEC: ::std::os::raw::c_uint = 147;
pub const T30_DER: ::std::os::raw::c_uint = 83;
pub const T30_DTR: ::std::os::raw::c_uint = 17;
pub const T30_DNK: ::std::os::raw::c_uint = 154;
pub const T30_PID: ::std::os::raw::c_uint = 108;
pub const T30_SPI: ::std::os::raw::c_uint = 16;
pub const T30_SPT: ::std::os::raw::c_uint = 128;
pub const T30_NULL: ::std::os::raw::c_uint = 0;
pub const T4_FCD: ::std::os::raw::c_uint = 6;
pub const T4_CCD: ::std::os::raw::c_uint = 70;
pub const T4_RCP: ::std::os::raw::c_uint = 134;
pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
extern "C" {
    pub fn t30_frametype(x: u8) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_decode_dis_dtc_dcs(
        s: *mut t30_state_t,
        dis: *const u8,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t30_completion_code_to_str(
        result: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t30_modem_to_str(
        modem: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t35_real_country_code(
        country_code: ::std::os::raw::c_int,
        country_code_extension: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t35_real_country_code_to_str(
        country_code: ::std::os::raw::c_int,
        country_code_extension: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t35_country_code_to_str(
        country_code: ::std::os::raw::c_int,
        country_code_extension: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t35_vendor_to_str(
        msg: *const u8,
        len: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t35_decode(
        msg: *const u8,
        len: ::std::os::raw::c_int,
        country: *mut *const ::std::os::raw::c_char,
        vendor: *mut *const ::std::os::raw::c_char,
        model: *mut *const ::std::os::raw::c_char,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct at_state_s {
    _unused: [u8; 0],
}
pub type at_state_t = at_state_s;
pub type at_modem_control_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        op: ::std::os::raw::c_int,
        num: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type at_tx_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        buf: *const u8,
        len: size_t,
    ) -> ::std::os::raw::c_int,
>;
pub type at_class1_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        direction: ::std::os::raw::c_int,
        operation: ::std::os::raw::c_int,
        val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub const at_rx_mode_e_AT_MODE_ONHOOK_COMMAND: at_rx_mode_e = 0;
pub const at_rx_mode_e_AT_MODE_OFFHOOK_COMMAND: at_rx_mode_e = 1;
pub const at_rx_mode_e_AT_MODE_CONNECTED: at_rx_mode_e = 2;
pub const at_rx_mode_e_AT_MODE_DELIVERY: at_rx_mode_e = 3;
pub const at_rx_mode_e_AT_MODE_HDLC: at_rx_mode_e = 4;
pub const at_rx_mode_e_AT_MODE_STUFFED: at_rx_mode_e = 5;
pub type at_rx_mode_e = ::std::os::raw::c_uint;
pub const at_call_event_e_AT_CALL_EVENT_ALERTING: at_call_event_e = 1;
pub const at_call_event_e_AT_CALL_EVENT_CONNECTED: at_call_event_e = 2;
pub const at_call_event_e_AT_CALL_EVENT_ANSWERED: at_call_event_e = 3;
pub const at_call_event_e_AT_CALL_EVENT_BUSY: at_call_event_e = 4;
pub const at_call_event_e_AT_CALL_EVENT_NO_DIALTONE: at_call_event_e = 5;
pub const at_call_event_e_AT_CALL_EVENT_NO_ANSWER: at_call_event_e = 6;
pub const at_call_event_e_AT_CALL_EVENT_HANGUP: at_call_event_e = 7;
pub type at_call_event_e = ::std::os::raw::c_uint;
pub const at_modem_control_operation_e_AT_MODEM_CONTROL_CALL:
    at_modem_control_operation_e = 0;
pub const at_modem_control_operation_e_AT_MODEM_CONTROL_ANSWER:
    at_modem_control_operation_e = 1;
pub const at_modem_control_operation_e_AT_MODEM_CONTROL_HANGUP:
    at_modem_control_operation_e = 2;
pub const at_modem_control_operation_e_AT_MODEM_CONTROL_OFFHOOK:
    at_modem_control_operation_e = 3;
pub const at_modem_control_operation_e_AT_MODEM_CONTROL_ONHOOK:
    at_modem_control_operation_e = 4;
pub const at_modem_control_operation_e_AT_MODEM_CONTROL_DTR:
    at_modem_control_operation_e = 5;
pub const at_modem_control_operation_e_AT_MODEM_CONTROL_RTS:
    at_modem_control_operation_e = 6;
pub const at_modem_control_operation_e_AT_MODEM_CONTROL_CTS:
    at_modem_control_operation_e = 7;
pub const at_modem_control_operation_e_AT_MODEM_CONTROL_CAR:
    at_modem_control_operation_e = 8;
pub const at_modem_control_operation_e_AT_MODEM_CONTROL_RNG:
    at_modem_control_operation_e = 9;
pub const at_modem_control_operation_e_AT_MODEM_CONTROL_DSR:
    at_modem_control_operation_e = 10;
pub const at_modem_control_operation_e_AT_MODEM_CONTROL_SETID:
    at_modem_control_operation_e = 11;
pub const at_modem_control_operation_e_AT_MODEM_CONTROL_RESTART:
    at_modem_control_operation_e = 12;
pub const at_modem_control_operation_e_AT_MODEM_CONTROL_DTE_TIMEOUT:
    at_modem_control_operation_e = 13;
pub type at_modem_control_operation_e = ::std::os::raw::c_uint;
pub const AT_RESPONSE_CODE_OK: ::std::os::raw::c_uint = 0;
pub const AT_RESPONSE_CODE_CONNECT: ::std::os::raw::c_uint = 1;
pub const AT_RESPONSE_CODE_RING: ::std::os::raw::c_uint = 2;
pub const AT_RESPONSE_CODE_NO_CARRIER: ::std::os::raw::c_uint = 3;
pub const AT_RESPONSE_CODE_ERROR: ::std::os::raw::c_uint = 4;
pub const AT_RESPONSE_CODE_XXX: ::std::os::raw::c_uint = 5;
pub const AT_RESPONSE_CODE_NO_DIALTONE: ::std::os::raw::c_uint = 6;
pub const AT_RESPONSE_CODE_BUSY: ::std::os::raw::c_uint = 7;
pub const AT_RESPONSE_CODE_NO_ANSWER: ::std::os::raw::c_uint = 8;
pub const AT_RESPONSE_CODE_FCERROR: ::std::os::raw::c_uint = 9;
pub const AT_RESPONSE_CODE_FRH3: ::std::os::raw::c_uint = 10;
pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct at_profile_t {
    pub echo: bool,
    pub verbose: bool,
    pub result_code_format: ::std::os::raw::c_int,
    pub pulse_dial: bool,
    pub double_escape: ::std::os::raw::c_int,
    pub adaptive_receive: ::std::os::raw::c_int,
    pub s_regs: [u8; 100usize],
}
#[test]
fn bindgen_test_layout_at_profile_t() {
    assert_eq!(
        ::std::mem::size_of::<at_profile_t>(),
        120usize,
        concat!("Size of: ", stringify!(at_profile_t))
    );
    assert_eq!(
        ::std::mem::align_of::<at_profile_t>(),
        4usize,
        concat!("Alignment of ", stringify!(at_profile_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<at_profile_t>())).echo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(at_profile_t),
            "::",
            stringify!(echo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<at_profile_t>())).verbose as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(at_profile_t),
            "::",
            stringify!(verbose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<at_profile_t>())).result_code_format as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(at_profile_t),
            "::",
            stringify!(result_code_format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<at_profile_t>())).pulse_dial as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(at_profile_t),
            "::",
            stringify!(pulse_dial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<at_profile_t>())).double_escape as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(at_profile_t),
            "::",
            stringify!(double_escape)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<at_profile_t>())).adaptive_receive as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(at_profile_t),
            "::",
            stringify!(adaptive_receive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<at_profile_t>())).s_regs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(at_profile_t),
            "::",
            stringify!(s_regs)
        )
    );
}
extern "C" {
    pub fn at_call_state_to_str(
        state: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn at_modem_control_to_str(
        state: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn at_set_at_rx_mode(s: *mut at_state_t, new_mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn at_put_response(s: *mut at_state_t, t: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn at_put_numeric_response(s: *mut at_state_t, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn at_put_response_code(s: *mut at_state_t, code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn at_reset_call_info(s: *mut at_state_t);
}
extern "C" {
    pub fn at_set_call_info(
        s: *mut at_state_t,
        id: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn at_display_call_info(s: *mut at_state_t);
}
extern "C" {
    pub fn at_modem_control(
        s: *mut at_state_t,
        op: ::std::os::raw::c_int,
        num: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_call_event(s: *mut at_state_t, event: ::std::os::raw::c_int);
}
extern "C" {
    pub fn at_interpreter(
        s: *mut at_state_t,
        cmd: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn at_set_class1_handler(
        s: *mut at_state_t,
        handler: at_class1_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn at_get_logging_state(s: *mut at_state_t) -> *mut logging_state_t;
}
extern "C" {
    pub fn at_set_modem_control_handler(
        s: *mut at_state_t,
        modem_control_handler: at_modem_control_handler_t,
        modem_control_user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn at_set_at_tx_handler(
        s: *mut at_state_t,
        at_tx_handler: at_tx_handler_t,
        at_tx_user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn at_init(
        s: *mut at_state_t,
        at_tx_handler: at_tx_handler_t,
        at_tx_user_data: *mut ::std::os::raw::c_void,
        modem_control_handler: at_modem_control_handler_t,
        modem_control_user_data: *mut ::std::os::raw::c_void,
    ) -> *mut at_state_t;
}
extern "C" {
    pub fn at_release(s: *mut at_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_free(s: *mut at_state_t) -> ::std::os::raw::c_int;
}
pub const DATA_MODEM_NONE: ::std::os::raw::c_int = -1;
pub const DATA_MODEM_FLUSH: ::std::os::raw::c_int = 0;
pub const DATA_MODEM_SILENCE: ::std::os::raw::c_int = 1;
pub const DATA_MODEM_CED_TONE: ::std::os::raw::c_int = 2;
pub const DATA_MODEM_CNG_TONE: ::std::os::raw::c_int = 3;
pub const DATA_MODEM_V8: ::std::os::raw::c_int = 4;
pub const DATA_MODEM_BELL103: ::std::os::raw::c_int = 5;
pub const DATA_MODEM_BELL202: ::std::os::raw::c_int = 6;
pub const DATA_MODEM_V21: ::std::os::raw::c_int = 7;
pub const DATA_MODEM_V23: ::std::os::raw::c_int = 8;
pub const DATA_MODEM_V22BIS: ::std::os::raw::c_int = 9;
pub const DATA_MODEM_V32BIS: ::std::os::raw::c_int = 10;
pub const DATA_MODEM_V34: ::std::os::raw::c_int = 11;
pub type _bindgen_ty_36 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct data_modems_state_s {
    _unused: [u8; 0],
}
pub type data_modems_state_t = data_modems_state_s;
pub type data_modems_control_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut data_modems_state_t,
        user_data: *mut ::std::os::raw::c_void,
        op: ::std::os::raw::c_int,
        num: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn data_modems_modulation_to_str(
        modulation_scheme: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn data_modems_set_tep_mode(
        s: *mut data_modems_state_t,
        use_tep: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn data_modems_get_logging_state(
        s: *mut data_modems_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn data_modems_call_event(
        s: *mut data_modems_state_t,
        event: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn data_modems_restart(s: *mut data_modems_state_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn data_modems_set_async_mode(
        s: *mut data_modems_state_t,
        data_bits: ::std::os::raw::c_int,
        parity_bits: ::std::os::raw::c_int,
        stop_bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn data_modems_set_modem_type(
        s: *mut data_modems_state_t,
        which: ::std::os::raw::c_int,
        baud_rate: ::std::os::raw::c_int,
        bit_rate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn data_modems_rx(
        s: *mut data_modems_state_t,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn data_modems_rx_fillin(
        s: *mut data_modems_state_t,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn data_modems_tx(
        s: *mut data_modems_state_t,
        amp: *mut i16,
        max_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn data_modems_set_at_tx_handler(
        s: *mut data_modems_state_t,
        at_tx_handler: at_tx_handler_t,
        at_tx_user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn data_modems_init(
        s: *mut data_modems_state_t,
        calling_party: bool,
        at_tx_handler: at_tx_handler_t,
        at_tx_user_data: *mut ::std::os::raw::c_void,
        modem_control_handler: data_modems_control_handler_t,
        modem_control_user_data: *mut ::std::os::raw::c_void,
        put_msg: put_msg_func_t,
        get_msg: get_msg_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut data_modems_state_t;
}
extern "C" {
    pub fn data_modems_release(s: *mut data_modems_state_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn data_modems_free(s: *mut data_modems_state_t) -> ::std::os::raw::c_int;
}
pub const FAX_MODEM_NONE: ::std::os::raw::c_int = -1;
pub const FAX_MODEM_FLUSH: ::std::os::raw::c_int = 0;
pub const FAX_MODEM_SILENCE_TX: ::std::os::raw::c_int = 1;
pub const FAX_MODEM_SILENCE_RX: ::std::os::raw::c_int = 2;
pub const FAX_MODEM_CED_TONE_TX: ::std::os::raw::c_int = 3;
pub const FAX_MODEM_CNG_TONE_TX: ::std::os::raw::c_int = 4;
pub const FAX_MODEM_NOCNG_TONE_TX: ::std::os::raw::c_int = 5;
pub const FAX_MODEM_CED_TONE_RX: ::std::os::raw::c_int = 6;
pub const FAX_MODEM_CNG_TONE_RX: ::std::os::raw::c_int = 7;
pub const FAX_MODEM_V21_TX: ::std::os::raw::c_int = 8;
pub const FAX_MODEM_V17_TX: ::std::os::raw::c_int = 9;
pub const FAX_MODEM_V27TER_TX: ::std::os::raw::c_int = 10;
pub const FAX_MODEM_V29_TX: ::std::os::raw::c_int = 11;
pub const FAX_MODEM_V21_RX: ::std::os::raw::c_int = 12;
pub const FAX_MODEM_V17_RX: ::std::os::raw::c_int = 13;
pub const FAX_MODEM_V27TER_RX: ::std::os::raw::c_int = 14;
pub const FAX_MODEM_V29_RX: ::std::os::raw::c_int = 15;
pub type _bindgen_ty_37 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fax_modems_state_s {
    _unused: [u8; 0],
}
pub type fax_modems_state_t = fax_modems_state_s;
extern "C" {
    pub fn fax_modems_hdlc_accept(
        user_data: *mut ::std::os::raw::c_void,
        msg: *const u8,
        len: ::std::os::raw::c_int,
        ok: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fax_modem_to_str(
        modem: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fax_modems_v17_v21_rx(
        user_data: *mut ::std::os::raw::c_void,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fax_modems_v27ter_v21_rx(
        user_data: *mut ::std::os::raw::c_void,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fax_modems_v29_v21_rx(
        user_data: *mut ::std::os::raw::c_void,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fax_modems_v17_v21_rx_fillin(
        user_data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fax_modems_v27ter_v21_rx_fillin(
        user_data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fax_modems_v29_v21_rx_fillin(
        user_data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fax_modems_hdlc_tx_frame(
        user_data: *mut ::std::os::raw::c_void,
        msg: *const u8,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fax_modems_hdlc_tx_flags(
        s: *mut fax_modems_state_t,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fax_modems_start_fast_modem(
        s: *mut fax_modems_state_t,
        which: ::std::os::raw::c_int,
        bit_rate: ::std::os::raw::c_int,
        short_train: ::std::os::raw::c_int,
        hdlc_mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fax_modems_start_slow_modem(
        s: *mut fax_modems_state_t,
        which: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fax_modems_set_tep_mode(
        s: *mut fax_modems_state_t,
        use_tep: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fax_modems_set_put_bit(
        s: *mut fax_modems_state_t,
        put_bit: put_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn fax_modems_set_get_bit(
        s: *mut fax_modems_state_t,
        get_bit: get_bit_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn fax_modems_set_rx_handler(
        s: *mut fax_modems_state_t,
        rx_handler: span_rx_handler_t,
        rx_user_data: *mut ::std::os::raw::c_void,
        rx_fillin_handler: span_rx_fillin_handler_t,
        rx_fillin_user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn fax_modems_set_rx_active(
        s: *mut fax_modems_state_t,
        active: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fax_modems_set_tx_handler(
        s: *mut fax_modems_state_t,
        handler: span_tx_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn fax_modems_set_next_tx_handler(
        s: *mut fax_modems_state_t,
        handler: span_tx_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn fax_modems_set_next_tx_type(
        s: *mut fax_modems_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fax_modems_restart(s: *mut fax_modems_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fax_modems_get_logging_state(
        s: *mut fax_modems_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn fax_modems_init(
        s: *mut fax_modems_state_t,
        use_tep: ::std::os::raw::c_int,
        hdlc_accept: hdlc_frame_handler_t,
        hdlc_tx_underflow: hdlc_underflow_handler_t,
        non_ecm_put_bit: put_bit_func_t,
        non_ecm_get_bit: get_bit_func_t,
        tone_callback: tone_report_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut fax_modems_state_t;
}
extern "C" {
    pub fn fax_modems_release(s: *mut fax_modems_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fax_modems_free(s: *mut fax_modems_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fax_state_s {
    _unused: [u8; 0],
}
pub type fax_state_t = fax_state_s;
extern "C" {
    pub fn fax_rx(
        s: *mut fax_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fax_rx_fillin(
        s: *mut fax_state_t,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fax_tx(
        s: *mut fax_state_t,
        amp: *mut i16,
        max_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fax_set_transmit_on_idle(
        s: *mut fax_state_t,
        transmit_on_idle: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fax_set_tep_mode(s: *mut fax_state_t, use_tep: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fax_get_t30_state(s: *mut fax_state_t) -> *mut t30_state_t;
}
extern "C" {
    pub fn fax_get_logging_state(s: *mut fax_state_t) -> *mut logging_state_t;
}
extern "C" {
    pub fn fax_restart(
        s: *mut fax_state_t,
        calling_party: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fax_init(s: *mut fax_state_t, calling_party: bool) -> *mut fax_state_t;
}
extern "C" {
    pub fn fax_release(s: *mut fax_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fax_free(s: *mut fax_state_t) -> ::std::os::raw::c_int;
}
pub const t30_indicator_types_e_T38_IND_NO_SIGNAL: t30_indicator_types_e = 0;
pub const t30_indicator_types_e_T38_IND_CNG: t30_indicator_types_e = 1;
pub const t30_indicator_types_e_T38_IND_CED: t30_indicator_types_e = 2;
pub const t30_indicator_types_e_T38_IND_V21_PREAMBLE: t30_indicator_types_e = 3;
pub const t30_indicator_types_e_T38_IND_V27TER_2400_TRAINING: t30_indicator_types_e =
    4;
pub const t30_indicator_types_e_T38_IND_V27TER_4800_TRAINING: t30_indicator_types_e =
    5;
pub const t30_indicator_types_e_T38_IND_V29_7200_TRAINING: t30_indicator_types_e = 6;
pub const t30_indicator_types_e_T38_IND_V29_9600_TRAINING: t30_indicator_types_e = 7;
pub const t30_indicator_types_e_T38_IND_V17_7200_SHORT_TRAINING:
    t30_indicator_types_e = 8;
pub const t30_indicator_types_e_T38_IND_V17_7200_LONG_TRAINING:
    t30_indicator_types_e = 9;
pub const t30_indicator_types_e_T38_IND_V17_9600_SHORT_TRAINING:
    t30_indicator_types_e = 10;
pub const t30_indicator_types_e_T38_IND_V17_9600_LONG_TRAINING:
    t30_indicator_types_e = 11;
pub const t30_indicator_types_e_T38_IND_V17_12000_SHORT_TRAINING:
    t30_indicator_types_e = 12;
pub const t30_indicator_types_e_T38_IND_V17_12000_LONG_TRAINING:
    t30_indicator_types_e = 13;
pub const t30_indicator_types_e_T38_IND_V17_14400_SHORT_TRAINING:
    t30_indicator_types_e = 14;
pub const t30_indicator_types_e_T38_IND_V17_14400_LONG_TRAINING:
    t30_indicator_types_e = 15;
pub const t30_indicator_types_e_T38_IND_V8_ANSAM: t30_indicator_types_e = 16;
pub const t30_indicator_types_e_T38_IND_V8_SIGNAL: t30_indicator_types_e = 17;
pub const t30_indicator_types_e_T38_IND_V34_CNTL_CHANNEL_1200:
    t30_indicator_types_e = 18;
pub const t30_indicator_types_e_T38_IND_V34_PRI_CHANNEL: t30_indicator_types_e = 19;
pub const t30_indicator_types_e_T38_IND_V34_CC_RETRAIN: t30_indicator_types_e = 20;
pub const t30_indicator_types_e_T38_IND_V33_12000_TRAINING: t30_indicator_types_e =
    21;
pub const t30_indicator_types_e_T38_IND_V33_14400_TRAINING: t30_indicator_types_e =
    22;
pub type t30_indicator_types_e = ::std::os::raw::c_uint;
pub const t38_data_types_e_T38_DATA_NONE: t38_data_types_e = -1;
pub const t38_data_types_e_T38_DATA_V21: t38_data_types_e = 0;
pub const t38_data_types_e_T38_DATA_V27TER_2400: t38_data_types_e = 1;
pub const t38_data_types_e_T38_DATA_V27TER_4800: t38_data_types_e = 2;
pub const t38_data_types_e_T38_DATA_V29_7200: t38_data_types_e = 3;
pub const t38_data_types_e_T38_DATA_V29_9600: t38_data_types_e = 4;
pub const t38_data_types_e_T38_DATA_V17_7200: t38_data_types_e = 5;
pub const t38_data_types_e_T38_DATA_V17_9600: t38_data_types_e = 6;
pub const t38_data_types_e_T38_DATA_V17_12000: t38_data_types_e = 7;
pub const t38_data_types_e_T38_DATA_V17_14400: t38_data_types_e = 8;
pub const t38_data_types_e_T38_DATA_V8: t38_data_types_e = 9;
pub const t38_data_types_e_T38_DATA_V34_PRI_RATE: t38_data_types_e = 10;
pub const t38_data_types_e_T38_DATA_V34_CC_1200: t38_data_types_e = 11;
pub const t38_data_types_e_T38_DATA_V34_PRI_CH: t38_data_types_e = 12;
pub const t38_data_types_e_T38_DATA_V33_12000: t38_data_types_e = 13;
pub const t38_data_types_e_T38_DATA_V33_14400: t38_data_types_e = 14;
pub type t38_data_types_e = ::std::os::raw::c_int;
pub const t38_field_types_e_T38_FIELD_HDLC_DATA: t38_field_types_e = 0;
pub const t38_field_types_e_T38_FIELD_HDLC_SIG_END: t38_field_types_e = 1;
pub const t38_field_types_e_T38_FIELD_HDLC_FCS_OK: t38_field_types_e = 2;
pub const t38_field_types_e_T38_FIELD_HDLC_FCS_BAD: t38_field_types_e = 3;
pub const t38_field_types_e_T38_FIELD_HDLC_FCS_OK_SIG_END: t38_field_types_e = 4;
pub const t38_field_types_e_T38_FIELD_HDLC_FCS_BAD_SIG_END: t38_field_types_e = 5;
pub const t38_field_types_e_T38_FIELD_T4_NON_ECM_DATA: t38_field_types_e = 6;
pub const t38_field_types_e_T38_FIELD_T4_NON_ECM_SIG_END: t38_field_types_e = 7;
pub const t38_field_types_e_T38_FIELD_CM_MESSAGE: t38_field_types_e = 8;
pub const t38_field_types_e_T38_FIELD_JM_MESSAGE: t38_field_types_e = 9;
pub const t38_field_types_e_T38_FIELD_CI_MESSAGE: t38_field_types_e = 10;
pub const t38_field_types_e_T38_FIELD_V34RATE: t38_field_types_e = 11;
pub type t38_field_types_e = ::std::os::raw::c_uint;
pub const t38_field_classes_e_T38_FIELD_CLASS_NONE: t38_field_classes_e = 0;
pub const t38_field_classes_e_T38_FIELD_CLASS_HDLC: t38_field_classes_e = 1;
pub const t38_field_classes_e_T38_FIELD_CLASS_NON_ECM: t38_field_classes_e = 2;
pub type t38_field_classes_e = ::std::os::raw::c_uint;
pub const t38_message_types_e_T38_TYPE_OF_MSG_T30_INDICATOR: t38_message_types_e = 0;
pub const t38_message_types_e_T38_TYPE_OF_MSG_T30_DATA: t38_message_types_e = 1;
pub type t38_message_types_e = ::std::os::raw::c_uint;
pub const t38_transport_types_e_T38_TRANSPORT_UDPTL: t38_transport_types_e = 0;
pub const t38_transport_types_e_T38_TRANSPORT_RTP: t38_transport_types_e = 1;
pub const t38_transport_types_e_T38_TRANSPORT_TCP: t38_transport_types_e = 2;
pub const t38_transport_types_e_T38_TRANSPORT_TCP_TPKT: t38_transport_types_e = 3;
pub type t38_transport_types_e = ::std::os::raw::c_uint;
pub const t38_data_rate_management_types_e_T38_DATA_RATE_MANAGEMENT_LOCAL_TCF:
    t38_data_rate_management_types_e = 1;
pub const t38_data_rate_management_types_e_T38_DATA_RATE_MANAGEMENT_TRANSFERRED_TCF : t38_data_rate_management_types_e = 2 ;
pub type t38_data_rate_management_types_e = ::std::os::raw::c_uint;
pub const t38_packet_categories_e_T38_PACKET_CATEGORY_INDICATOR:
    t38_packet_categories_e = 0;
pub const t38_packet_categories_e_T38_PACKET_CATEGORY_CONTROL_DATA:
    t38_packet_categories_e = 1;
pub const t38_packet_categories_e_T38_PACKET_CATEGORY_CONTROL_DATA_END:
    t38_packet_categories_e = 2;
pub const t38_packet_categories_e_T38_PACKET_CATEGORY_IMAGE_DATA:
    t38_packet_categories_e = 3;
pub const t38_packet_categories_e_T38_PACKET_CATEGORY_IMAGE_DATA_END:
    t38_packet_categories_e = 4;
pub type t38_packet_categories_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t38_data_field_t {
    pub field_type: ::std::os::raw::c_int,
    pub field: *const u8,
    pub field_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_t38_data_field_t() {
    assert_eq!(
        ::std::mem::size_of::<t38_data_field_t>(),
        24usize,
        concat!("Size of: ", stringify!(t38_data_field_t))
    );
    assert_eq!(
        ::std::mem::align_of::<t38_data_field_t>(),
        8usize,
        concat!("Alignment of ", stringify!(t38_data_field_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t38_data_field_t>())).field_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t38_data_field_t),
            "::",
            stringify!(field_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t38_data_field_t>())).field as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t38_data_field_t),
            "::",
            stringify!(field)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t38_data_field_t>())).field_len as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(t38_data_field_t),
            "::",
            stringify!(field_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t38_core_state_s {
    _unused: [u8; 0],
}
pub type t38_core_state_t = t38_core_state_s;
pub type t38_tx_packet_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut t38_core_state_t,
        user_data: *mut ::std::os::raw::c_void,
        buf: *const u8,
        len: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type t38_rx_indicator_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut t38_core_state_t,
        user_data: *mut ::std::os::raw::c_void,
        indicator: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type t38_rx_data_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut t38_core_state_t,
        user_data: *mut ::std::os::raw::c_void,
        data_type: ::std::os::raw::c_int,
        field_type: ::std::os::raw::c_int,
        buf: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type t38_rx_missing_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut t38_core_state_t,
        user_data: *mut ::std::os::raw::c_void,
        rx_seq_no: ::std::os::raw::c_int,
        expected_seq_no: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn t38_indicator_to_str(
        indicator: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t38_data_type_to_str(
        data_type: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t38_field_type_to_str(
        field_type: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t38_cm_profile_to_str(
        profile: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t38_jm_to_str(
        data: *const u8,
        len: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn t38_v34rate_to_bps(
        data: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_core_send_indicator(
        s: *mut t38_core_state_t,
        indicator: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_core_send_flags_delay(
        s: *mut t38_core_state_t,
        indicator: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_core_send_training_delay(
        s: *mut t38_core_state_t,
        indicator: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_core_send_data(
        s: *mut t38_core_state_t,
        data_type: ::std::os::raw::c_int,
        field_type: ::std::os::raw::c_int,
        field: *const u8,
        field_len: ::std::os::raw::c_int,
        category: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_core_send_data_multi_field(
        s: *mut t38_core_state_t,
        data_type: ::std::os::raw::c_int,
        field: *const t38_data_field_t,
        fields: ::std::os::raw::c_int,
        category: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_core_rx_ifp_packet(
        s: *mut t38_core_state_t,
        buf: *const u8,
        len: ::std::os::raw::c_int,
        seq_no: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_core_rx_ifp_stream(
        s: *mut t38_core_state_t,
        buf: *const u8,
        len: ::std::os::raw::c_int,
        log_seq_no: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_set_data_rate_management_method(
        s: *mut t38_core_state_t,
        method: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t38_set_data_transport_protocol(
        s: *mut t38_core_state_t,
        data_transport_protocol: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t38_set_fill_bit_removal(
        s: *mut t38_core_state_t,
        fill_bit_removal: bool,
    );
}
extern "C" {
    pub fn t38_set_mmr_transcoding(s: *mut t38_core_state_t, mmr_transcoding: bool);
}
extern "C" {
    pub fn t38_set_jbig_transcoding(
        s: *mut t38_core_state_t,
        jbig_transcoding: bool,
    );
}
extern "C" {
    pub fn t38_set_max_buffer_size(
        s: *mut t38_core_state_t,
        max_buffer_size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t38_set_max_datagram_size(
        s: *mut t38_core_state_t,
        max_datagram_size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t38_set_redundancy_control(
        s: *mut t38_core_state_t,
        category: ::std::os::raw::c_int,
        setting: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t38_set_pace_transmission(
        s: *mut t38_core_state_t,
        pace_transmission: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t38_set_fastest_image_data_rate(
        s: *mut t38_core_state_t,
        max_rate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t38_get_fastest_image_data_rate(
        s: *mut t38_core_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_set_t38_version(
        s: *mut t38_core_state_t,
        t38_version: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t38_set_sequence_number_handling(s: *mut t38_core_state_t, check: bool);
}
extern "C" {
    pub fn t38_set_tep_handling(s: *mut t38_core_state_t, allow_for_tep: bool);
}
extern "C" {
    pub fn t38_core_get_logging_state(
        s: *mut t38_core_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn t38_core_restart(s: *mut t38_core_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_core_init(
        s: *mut t38_core_state_t,
        rx_indicator_handler: t38_rx_indicator_handler_t,
        rx_data_handler: t38_rx_data_handler_t,
        rx_missing_handler: t38_rx_missing_handler_t,
        rx_user_data: *mut ::std::os::raw::c_void,
        tx_packet_handler: t38_tx_packet_handler_t,
        tx_packet_user_data: *mut ::std::os::raw::c_void,
    ) -> *mut t38_core_state_t;
}
extern "C" {
    pub fn t38_core_release(s: *mut t38_core_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_core_free(s: *mut t38_core_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t38_non_ecm_buffer_state_s {
    _unused: [u8; 0],
}
pub type t38_non_ecm_buffer_state_t = t38_non_ecm_buffer_state_s;
extern "C" {
    pub fn t38_non_ecm_buffer_init(
        s: *mut t38_non_ecm_buffer_state_t,
        image_mode: bool,
        min_row_bits: ::std::os::raw::c_int,
    ) -> *mut t38_non_ecm_buffer_state_t;
}
extern "C" {
    pub fn t38_non_ecm_buffer_release(
        s: *mut t38_non_ecm_buffer_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_non_ecm_buffer_free(
        s: *mut t38_non_ecm_buffer_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_non_ecm_buffer_set_mode(
        s: *mut t38_non_ecm_buffer_state_t,
        image_mode: bool,
        min_row_bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t38_non_ecm_buffer_inject(
        s: *mut t38_non_ecm_buffer_state_t,
        buf: *const u8,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t38_non_ecm_buffer_push(s: *mut t38_non_ecm_buffer_state_t);
}
extern "C" {
    pub fn t38_non_ecm_buffer_report_input_status(
        s: *mut t38_non_ecm_buffer_state_t,
        logging: *mut logging_state_t,
    );
}
extern "C" {
    pub fn t38_non_ecm_buffer_report_output_status(
        s: *mut t38_non_ecm_buffer_state_t,
        logging: *mut logging_state_t,
    );
}
extern "C" {
    pub fn t38_non_ecm_buffer_get_bit(
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t38_gateway_state_s {
    _unused: [u8; 0],
}
pub type t38_gateway_state_t = t38_gateway_state_s;
pub type t38_gateway_real_time_frame_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        incoming: bool,
        msg: *const u8,
        len: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t38_stats_t {
    pub bit_rate: ::std::os::raw::c_int,
    pub error_correcting_mode: bool,
    pub pages_transferred: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_t38_stats_t() {
    assert_eq!(
        ::std::mem::size_of::<t38_stats_t>(),
        12usize,
        concat!("Size of: ", stringify!(t38_stats_t))
    );
    assert_eq!(
        ::std::mem::align_of::<t38_stats_t>(),
        4usize,
        concat!("Alignment of ", stringify!(t38_stats_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t38_stats_t>())).bit_rate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t38_stats_t),
            "::",
            stringify!(bit_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t38_stats_t>())).error_correcting_mode as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(t38_stats_t),
            "::",
            stringify!(error_correcting_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t38_stats_t>())).pages_transferred as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t38_stats_t),
            "::",
            stringify!(pages_transferred)
        )
    );
}
extern "C" {
    pub fn t38_gateway_init(
        s: *mut t38_gateway_state_t,
        tx_packet_handler: t38_tx_packet_handler_t,
        tx_packet_user_data: *mut ::std::os::raw::c_void,
    ) -> *mut t38_gateway_state_t;
}
extern "C" {
    pub fn t38_gateway_release(s: *mut t38_gateway_state_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_gateway_free(s: *mut t38_gateway_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_gateway_rx(
        s: *mut t38_gateway_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_gateway_rx_fillin(
        s: *mut t38_gateway_state_t,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_gateway_tx(
        s: *mut t38_gateway_state_t,
        amp: *mut i16,
        max_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_gateway_set_ecm_capability(
        s: *mut t38_gateway_state_t,
        ecm_allowed: bool,
    );
}
extern "C" {
    pub fn t38_gateway_set_transmit_on_idle(
        s: *mut t38_gateway_state_t,
        transmit_on_idle: bool,
    );
}
extern "C" {
    pub fn t38_gateway_set_supported_modems(
        s: *mut t38_gateway_state_t,
        supported_modems: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t38_gateway_set_nsx_suppression(
        s: *mut t38_gateway_state_t,
        from_t38: *const u8,
        from_t38_len: ::std::os::raw::c_int,
        from_modem: *const u8,
        from_modem_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t38_gateway_set_tep_mode(s: *mut t38_gateway_state_t, use_tep: bool);
}
extern "C" {
    pub fn t38_gateway_set_fill_bit_removal(
        s: *mut t38_gateway_state_t,
        remove: bool,
    );
}
extern "C" {
    pub fn t38_gateway_get_transfer_statistics(
        s: *mut t38_gateway_state_t,
        t: *mut t38_stats_t,
    );
}
extern "C" {
    pub fn t38_gateway_get_t38_core_state(
        s: *mut t38_gateway_state_t,
    ) -> *mut t38_core_state_t;
}
extern "C" {
    pub fn t38_gateway_get_logging_state(
        s: *mut t38_gateway_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn t38_gateway_set_real_time_frame_handler(
        s: *mut t38_gateway_state_t,
        handler: t38_gateway_real_time_frame_handler_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub const T38_TERMINAL_OPTION_NO_PACING: ::std::os::raw::c_uint = 1;
pub const T38_TERMINAL_OPTION_REGULAR_INDICATORS: ::std::os::raw::c_uint = 2;
pub const T38_TERMINAL_OPTION_2S_REPEATING_INDICATORS: ::std::os::raw::c_uint = 4;
pub const T38_TERMINAL_OPTION_NO_INDICATORS: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t38_terminal_state_s {
    _unused: [u8; 0],
}
pub type t38_terminal_state_t = t38_terminal_state_s;
extern "C" {
    pub fn t38_terminal_send_timeout(
        s: *mut t38_terminal_state_t,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_terminal_set_config(
        s: *mut t38_terminal_state_t,
        config: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn t38_terminal_set_tep_mode(s: *mut t38_terminal_state_t, use_tep: bool);
}
extern "C" {
    pub fn t38_terminal_set_fill_bit_removal(
        s: *mut t38_terminal_state_t,
        remove: bool,
    );
}
extern "C" {
    pub fn t38_terminal_get_t30_state(
        s: *mut t38_terminal_state_t,
    ) -> *mut t30_state_t;
}
extern "C" {
    pub fn t38_terminal_get_t38_core_state(
        s: *mut t38_terminal_state_t,
    ) -> *mut t38_core_state_t;
}
extern "C" {
    pub fn t38_terminal_get_logging_state(
        s: *mut t38_terminal_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn t38_terminal_restart(
        s: *mut t38_terminal_state_t,
        calling_party: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_terminal_init(
        s: *mut t38_terminal_state_t,
        calling_party: bool,
        tx_packet_handler: t38_tx_packet_handler_t,
        tx_packet_user_data: *mut ::std::os::raw::c_void,
    ) -> *mut t38_terminal_state_t;
}
extern "C" {
    pub fn t38_terminal_release(
        s: *mut t38_terminal_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t38_terminal_free(s: *mut t38_terminal_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t31_state_s {
    _unused: [u8; 0],
}
pub type t31_state_t = t31_state_s;
pub type t31_modem_control_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut t31_state_t,
        user_data: *mut ::std::os::raw::c_void,
        op: ::std::os::raw::c_int,
        num: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn t31_call_event(s: *mut t31_state_t, event: ::std::os::raw::c_int);
}
extern "C" {
    pub fn t31_at_rx_free_space(s: *mut t31_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t31_at_rx(
        s: *mut t31_state_t,
        t: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t31_rx(
        s: *mut t31_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t31_rx_fillin(
        s: *mut t31_state_t,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t31_tx(
        s: *mut t31_state_t,
        amp: *mut i16,
        max_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t31_t38_send_timeout(
        s: *mut t31_state_t,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t31_set_transmit_on_idle(s: *mut t31_state_t, transmit_on_idle: bool);
}
extern "C" {
    pub fn t31_set_tep_mode(s: *mut t31_state_t, use_tep: bool);
}
extern "C" {
    pub fn t31_set_t38_config(s: *mut t31_state_t, without_pacing: bool);
}
extern "C" {
    pub fn t31_set_mode(s: *mut t31_state_t, t38_mode: bool);
}
extern "C" {
    pub fn t31_get_logging_state(s: *mut t31_state_t) -> *mut logging_state_t;
}
extern "C" {
    pub fn t31_get_at_state(s: *mut t31_state_t) -> *mut at_state_t;
}
extern "C" {
    pub fn t31_get_t38_core_state(s: *mut t31_state_t) -> *mut t38_core_state_t;
}
extern "C" {
    pub fn t31_init(
        s: *mut t31_state_t,
        at_tx_handler: at_tx_handler_t,
        at_tx_user_data: *mut ::std::os::raw::c_void,
        modem_control_handler: t31_modem_control_handler_t,
        modem_control_user_data: *mut ::std::os::raw::c_void,
        tx_t38_packet_handler: t38_tx_packet_handler_t,
        tx_t38_packet_user_data: *mut ::std::os::raw::c_void,
    ) -> *mut t31_state_t;
}
extern "C" {
    pub fn t31_release(s: *mut t31_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn t31_free(s: *mut t31_state_t) -> ::std::os::raw::c_int;
}
pub const ADSI_STANDARD_NONE: ::std::os::raw::c_uint = 0;
pub const ADSI_STANDARD_CLASS: ::std::os::raw::c_uint = 1;
pub const ADSI_STANDARD_CLIP: ::std::os::raw::c_uint = 2;
pub const ADSI_STANDARD_ACLIP: ::std::os::raw::c_uint = 3;
pub const ADSI_STANDARD_JCLIP: ::std::os::raw::c_uint = 4;
pub const ADSI_STANDARD_CLIP_DTMF: ::std::os::raw::c_uint = 5;
pub const ADSI_STANDARD_TDD: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
pub const CLASS_SDMF_CALLERID: ::std::os::raw::c_uint = 4;
pub const CLASS_MDMF_CALLERID: ::std::os::raw::c_uint = 128;
pub const CLASS_SDMF_MSG_WAITING: ::std::os::raw::c_uint = 6;
pub const CLASS_MDMF_MSG_WAITING: ::std::os::raw::c_uint = 130;
pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
pub const MCLASS_DATETIME: ::std::os::raw::c_uint = 1;
pub const MCLASS_CALLER_NUMBER: ::std::os::raw::c_uint = 2;
pub const MCLASS_DIALED_NUMBER: ::std::os::raw::c_uint = 3;
pub const MCLASS_ABSENCE1: ::std::os::raw::c_uint = 4;
pub const MCLASS_REDIRECT: ::std::os::raw::c_uint = 5;
pub const MCLASS_QUALIFIER: ::std::os::raw::c_uint = 6;
pub const MCLASS_CALLER_NAME: ::std::os::raw::c_uint = 7;
pub const MCLASS_ABSENCE2: ::std::os::raw::c_uint = 8;
pub const MCLASS_ALT_ROUTE: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
pub const CLIP_MDMF_CALLERID: ::std::os::raw::c_uint = 128;
pub const CLIP_MDMF_MSG_WAITING: ::std::os::raw::c_uint = 130;
pub const CLIP_MDMF_CHARGE_INFO: ::std::os::raw::c_uint = 134;
pub const CLIP_MDMF_SMS: ::std::os::raw::c_uint = 137;
pub type _bindgen_ty_42 = ::std::os::raw::c_uint;
pub const CLIP_DATETIME: ::std::os::raw::c_uint = 1;
pub const CLIP_CALLER_NUMBER: ::std::os::raw::c_uint = 2;
pub const CLIP_DIALED_NUMBER: ::std::os::raw::c_uint = 3;
pub const CLIP_ABSENCE1: ::std::os::raw::c_uint = 4;
pub const CLIP_CALLER_NAME: ::std::os::raw::c_uint = 7;
pub const CLIP_ABSENCE2: ::std::os::raw::c_uint = 8;
pub const CLIP_VISUAL_INDICATOR: ::std::os::raw::c_uint = 11;
pub const CLIP_MESSAGE_ID: ::std::os::raw::c_uint = 13;
pub const CLIP_COMPLEMENTARY_CALLER_NUMBER: ::std::os::raw::c_uint = 16;
pub const CLIP_CALLTYPE: ::std::os::raw::c_uint = 17;
pub const CLIP_NUM_MSG: ::std::os::raw::c_uint = 19;
pub const CLIP_TYPE_OF_FORWARDED_CALL: ::std::os::raw::c_uint = 21;
pub const CLIP_TYPE_OF_CALLING_USER: ::std::os::raw::c_uint = 22;
pub const CLIP_REDIR_NUMBER: ::std::os::raw::c_uint = 26;
pub const CLIP_CHARGE: ::std::os::raw::c_uint = 32;
pub const CLIP_DURATION: ::std::os::raw::c_uint = 35;
pub const CLIP_ADD_CHARGE: ::std::os::raw::c_uint = 33;
pub const CLIP_DISPLAY_INFO: ::std::os::raw::c_uint = 80;
pub const CLIP_SERVICE_INFO: ::std::os::raw::c_uint = 85;
pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
pub const ACLIP_SDMF_CALLERID: ::std::os::raw::c_uint = 4;
pub const ACLIP_MDMF_CALLERID: ::std::os::raw::c_uint = 128;
pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
pub const ACLIP_DATETIME: ::std::os::raw::c_uint = 1;
pub const ACLIP_CALLER_NUMBER: ::std::os::raw::c_uint = 2;
pub const ACLIP_DIALED_NUMBER: ::std::os::raw::c_uint = 3;
pub const ACLIP_NUMBER_ABSENCE: ::std::os::raw::c_uint = 4;
pub const ACLIP_REDIRECT: ::std::os::raw::c_uint = 5;
pub const ACLIP_QUALIFIER: ::std::os::raw::c_uint = 6;
pub const ACLIP_CALLER_NAME: ::std::os::raw::c_uint = 7;
pub const ACLIP_NAME_ABSENCE: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_45 = ::std::os::raw::c_uint;
pub const JCLIP_CALLER_NUMBER: ::std::os::raw::c_uint = 2;
pub const JCLIP_CALLER_NUM_DES: ::std::os::raw::c_uint = 33;
pub const JCLIP_DIALED_NUMBER: ::std::os::raw::c_uint = 9;
pub const JCLIP_DIALED_NUM_DES: ::std::os::raw::c_uint = 34;
pub const JCLIP_ABSENCE: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_46 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct adsi_tx_state_s {
    _unused: [u8; 0],
}
pub type adsi_tx_state_t = adsi_tx_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct adsi_rx_state_s {
    _unused: [u8; 0],
}
pub type adsi_rx_state_t = adsi_rx_state_s;
extern "C" {
    pub fn adsi_rx_get_logging_state(
        s: *mut adsi_rx_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn adsi_rx_init(
        s: *mut adsi_rx_state_t,
        standard: ::std::os::raw::c_int,
        put_msg: put_msg_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut adsi_rx_state_t;
}
extern "C" {
    pub fn adsi_rx_release(s: *mut adsi_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adsi_rx_free(s: *mut adsi_rx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adsi_rx(
        s: *mut adsi_rx_state_t,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adsi_tx_get_logging_state(
        s: *mut adsi_tx_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn adsi_tx_init(
        s: *mut adsi_tx_state_t,
        standard: ::std::os::raw::c_int,
    ) -> *mut adsi_tx_state_t;
}
extern "C" {
    pub fn adsi_tx_release(s: *mut adsi_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adsi_tx_free(s: *mut adsi_tx_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adsi_tx_set_preamble(
        s: *mut adsi_tx_state_t,
        preamble_len: ::std::os::raw::c_int,
        preamble_ones_len: ::std::os::raw::c_int,
        postamble_ones_len: ::std::os::raw::c_int,
        stop_bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn adsi_tx(
        s: *mut adsi_tx_state_t,
        amp: *mut i16,
        max_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adsi_tx_send_alert_tone(s: *mut adsi_tx_state_t);
}
extern "C" {
    pub fn adsi_tx_put_message(
        s: *mut adsi_tx_state_t,
        msg: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adsi_next_field(
        s: *mut adsi_rx_state_t,
        msg: *const u8,
        msg_len: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
        field_type: *mut u8,
        field_body: *mut *const u8,
        field_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adsi_add_field(
        s: *mut adsi_tx_state_t,
        msg: *mut u8,
        len: ::std::os::raw::c_int,
        field_type: u8,
        field_body: *const u8,
        field_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adsi_standard_to_str(
        standard: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub const ADEMCO_CONTACTID_MESSAGE_TYPE_18: ::std::os::raw::c_uint = 24;
pub const ADEMCO_CONTACTID_MESSAGE_TYPE_98: ::std::os::raw::c_uint = 152;
pub type _bindgen_ty_47 = ::std::os::raw::c_uint;
pub const ADEMCO_CONTACTID_QUALIFIER_NEW_EVENT: ::std::os::raw::c_uint = 1;
pub const ADEMCO_CONTACTID_QUALIFIER_NEW_RESTORE: ::std::os::raw::c_uint = 3;
pub const ADEMCO_CONTACTID_QUALIFIER_STATUS_REPORT: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_48 = ::std::os::raw::c_uint;
pub const ADEMCO_CONTACTID_DATA_IS_ZONE: ::std::os::raw::c_uint = 0;
pub const ADEMCO_CONTACTID_DATA_IS_USER: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_49 = ::std::os::raw::c_uint;
pub const ADEMCO_CONTACTID_MEDICAL: ::std::os::raw::c_uint = 256;
pub const ADEMCO_CONTACTID_PERSONAL_EMERGENCY: ::std::os::raw::c_uint = 257;
pub const ADEMCO_CONTACTID_FAIL_TO_REPORT_IN: ::std::os::raw::c_uint = 258;
pub const ADEMCO_CONTACTID_FIRE: ::std::os::raw::c_uint = 272;
pub const ADEMCO_CONTACTID_SMOKE: ::std::os::raw::c_uint = 273;
pub const ADEMCO_CONTACTID_COMBUSTION: ::std::os::raw::c_uint = 274;
pub const ADEMCO_CONTACTID_WATER_FLOW: ::std::os::raw::c_uint = 275;
pub const ADEMCO_CONTACTID_HEAT: ::std::os::raw::c_uint = 276;
pub const ADEMCO_CONTACTID_PULL_STATION: ::std::os::raw::c_uint = 277;
pub const ADEMCO_CONTACTID_DUCT: ::std::os::raw::c_uint = 278;
pub const ADEMCO_CONTACTID_FLAME: ::std::os::raw::c_uint = 279;
pub const ADEMCO_CONTACTID_NEAR_ALARM_A: ::std::os::raw::c_uint = 280;
pub const ADEMCO_CONTACTID_PANIC: ::std::os::raw::c_uint = 288;
pub const ADEMCO_CONTACTID_DURESS: ::std::os::raw::c_uint = 289;
pub const ADEMCO_CONTACTID_SILENT: ::std::os::raw::c_uint = 290;
pub const ADEMCO_CONTACTID_AUDIBLE: ::std::os::raw::c_uint = 291;
pub const ADEMCO_CONTACTID_DURESS_ACCESS_GRANTED: ::std::os::raw::c_uint = 292;
pub const ADEMCO_CONTACTID_DURESS_EGRESS_GRANTED: ::std::os::raw::c_uint = 293;
pub const ADEMCO_CONTACTID_BURGLARY: ::std::os::raw::c_uint = 304;
pub const ADEMCO_CONTACTID_PERIMETER: ::std::os::raw::c_uint = 305;
pub const ADEMCO_CONTACTID_INTERIOR: ::std::os::raw::c_uint = 306;
pub const ADEMCO_CONTACTID_24_HOUR_SAFE: ::std::os::raw::c_uint = 307;
pub const ADEMCO_CONTACTID_ENTRY_EXIT: ::std::os::raw::c_uint = 308;
pub const ADEMCO_CONTACTID_DAY_NIGHT: ::std::os::raw::c_uint = 309;
pub const ADEMCO_CONTACTID_OUTDOOR: ::std::os::raw::c_uint = 310;
pub const ADEMCO_CONTACTID_TAMPER: ::std::os::raw::c_uint = 311;
pub const ADEMCO_CONTACTID_NEAR_ALARM_B: ::std::os::raw::c_uint = 312;
pub const ADEMCO_CONTACTID_INTRUSION_VERIFIER: ::std::os::raw::c_uint = 313;
pub const ADEMCO_CONTACTID_GENERAL_ALARM: ::std::os::raw::c_uint = 320;
pub const ADEMCO_CONTACTID_POLLING_LOOP_OPEN_A: ::std::os::raw::c_uint = 321;
pub const ADEMCO_CONTACTID_POLLING_LOOP_SHORT_A: ::std::os::raw::c_uint = 322;
pub const ADEMCO_CONTACTID_EXPANSION_MODULE_FAILURE_A: ::std::os::raw::c_uint = 323;
pub const ADEMCO_CONTACTID_SENSOR_TAMPER_A: ::std::os::raw::c_uint = 324;
pub const ADEMCO_CONTACTID_EXPANSION_MODULE_TAMPER: ::std::os::raw::c_uint = 325;
pub const ADEMCO_CONTACTID_SILENT_BURGLARY: ::std::os::raw::c_uint = 326;
pub const ADEMCO_CONTACTID_SENSOR_SUPERVISION_FAILURE: ::std::os::raw::c_uint = 327;
pub const ADEMCO_CONTACTID_24_HOUR_NONBURGLARY: ::std::os::raw::c_uint = 336;
pub const ADEMCO_CONTACTID_GAS_DETECTED: ::std::os::raw::c_uint = 337;
pub const ADEMCO_CONTACTID_REFRIGERATION: ::std::os::raw::c_uint = 338;
pub const ADEMCO_CONTACTID_LOSS_OF_HEAT: ::std::os::raw::c_uint = 339;
pub const ADEMCO_CONTACTID_WATER_LEAKAGE: ::std::os::raw::c_uint = 340;
pub const ADEMCO_CONTACTID_FOIL_BREAK: ::std::os::raw::c_uint = 341;
pub const ADEMCO_CONTACTID_DAY_TROUBLE: ::std::os::raw::c_uint = 342;
pub const ADEMCO_CONTACTID_LOW_BOTTLED_GAS_LEVEL: ::std::os::raw::c_uint = 343;
pub const ADEMCO_CONTACTID_HIGH_TEMP: ::std::os::raw::c_uint = 344;
pub const ADEMCO_CONTACTID_LOW_TEMP: ::std::os::raw::c_uint = 345;
pub const ADEMCO_CONTACTID_LOSS_OF_AIR_FLOW: ::std::os::raw::c_uint = 353;
pub const ADEMCO_CONTACTID_CARBON_MONOXIDE_DETECTED: ::std::os::raw::c_uint = 354;
pub const ADEMCO_CONTACTID_TANK_LEVEL: ::std::os::raw::c_uint = 355;
pub const ADEMCO_CONTACTID_FIRE_SUPERVISORY: ::std::os::raw::c_uint = 512;
pub const ADEMCO_CONTACTID_LOW_WATER_PRESSURE: ::std::os::raw::c_uint = 513;
pub const ADEMCO_CONTACTID_LOW_CO2: ::std::os::raw::c_uint = 514;
pub const ADEMCO_CONTACTID_GATE_VALVE_SENSOR: ::std::os::raw::c_uint = 515;
pub const ADEMCO_CONTACTID_LOW_WATER_LEVEL: ::std::os::raw::c_uint = 516;
pub const ADEMCO_CONTACTID_PUMP_ACTIVATED: ::std::os::raw::c_uint = 517;
pub const ADEMCO_CONTACTID_PUMP_FAILURE: ::std::os::raw::c_uint = 518;
pub const ADEMCO_CONTACTID_SYSTEM_TROUBLE: ::std::os::raw::c_uint = 768;
pub const ADEMCO_CONTACTID_AC_LOSS: ::std::os::raw::c_uint = 769;
pub const ADEMCO_CONTACTID_LOW_SYSTEM_BATTERY: ::std::os::raw::c_uint = 770;
pub const ADEMCO_CONTACTID_RAM_CHECKSUM_BAD: ::std::os::raw::c_uint = 771;
pub const ADEMCO_CONTACTID_ROM_CHECKSUM_BAD: ::std::os::raw::c_uint = 772;
pub const ADEMCO_CONTACTID_SYSTEM_RESET: ::std::os::raw::c_uint = 773;
pub const ADEMCO_CONTACTID_PANEL_PROGRAMMING_CHANGED: ::std::os::raw::c_uint = 774;
pub const ADEMCO_CONTACTID_SELFTEST_FAILURE: ::std::os::raw::c_uint = 775;
pub const ADEMCO_CONTACTID_SYSTEM_SHUTDOWN: ::std::os::raw::c_uint = 776;
pub const ADEMCO_CONTACTID_BATTERY_TEST_FAILURE: ::std::os::raw::c_uint = 777;
pub const ADEMCO_CONTACTID_GROUND_FAULT: ::std::os::raw::c_uint = 784;
pub const ADEMCO_CONTACTID_BATTERY_MISSING_DEAD: ::std::os::raw::c_uint = 785;
pub const ADEMCO_CONTACTID_POWER_SUPPLY_OVERCURRENT: ::std::os::raw::c_uint = 786;
pub const ADEMCO_CONTACTID_ENGINEER_RESET: ::std::os::raw::c_uint = 787;
pub const ADEMCO_CONTACTID_SOUNDER_RELAY: ::std::os::raw::c_uint = 800;
pub const ADEMCO_CONTACTID_BELL_1: ::std::os::raw::c_uint = 801;
pub const ADEMCO_CONTACTID_BELL_2: ::std::os::raw::c_uint = 802;
pub const ADEMCO_CONTACTID_ALARM_RELAY: ::std::os::raw::c_uint = 803;
pub const ADEMCO_CONTACTID_TROUBLE_RELAY: ::std::os::raw::c_uint = 804;
pub const ADEMCO_CONTACTID_REVERSING_RELAY: ::std::os::raw::c_uint = 805;
pub const ADEMCO_CONTACTID_NOTIFICATION_APPLIANCE_CKT_3: ::std::os::raw::c_uint =
    806;
pub const ADEMCO_CONTACTID_NOTIFICATION_APPLIANCE_CKT_4: ::std::os::raw::c_uint =
    807;
pub const ADEMCO_CONTACTID_SYSTEM_PERIPHERAL_TROUBLE: ::std::os::raw::c_uint = 816;
pub const ADEMCO_CONTACTID_POLLING_LOOP_OPEN_B: ::std::os::raw::c_uint = 817;
pub const ADEMCO_CONTACTID_POLLING_LOOP_SHORT_B: ::std::os::raw::c_uint = 818;
pub const ADEMCO_CONTACTID_EXPANSION_MODULE_FAILURE_B: ::std::os::raw::c_uint = 819;
pub const ADEMCO_CONTACTID_REPEATER_FAILURE: ::std::os::raw::c_uint = 820;
pub const ADEMCO_CONTACTID_LOCAL_PRINTER_OUT_OF_PAPER: ::std::os::raw::c_uint = 821;
pub const ADEMCO_CONTACTID_LOCAL_PRINTER_FAILURE: ::std::os::raw::c_uint = 822;
pub const ADEMCO_CONTACTID_EXP_MODULE_DC_LOSS: ::std::os::raw::c_uint = 823;
pub const ADEMCO_CONTACTID_EXP_MODULE_LOW_BATTERY: ::std::os::raw::c_uint = 824;
pub const ADEMCO_CONTACTID_EXP_MODULE_RESET: ::std::os::raw::c_uint = 825;
pub const ADEMCO_CONTACTID_EXP_MODULE_TAMPER: ::std::os::raw::c_uint = 833;
pub const ADEMCO_CONTACTID_EXP_MODULE_AC_LOSS: ::std::os::raw::c_uint = 834;
pub const ADEMCO_CONTACTID_EXP_MODULE_SELFTEST_FAIL: ::std::os::raw::c_uint = 835;
pub const ADEMCO_CONTACTID_RF_RECEIVER_JAM_DETECT: ::std::os::raw::c_uint = 836;
pub const ADEMCO_CONTACTID_COMMUNICATION_TROUBLE: ::std::os::raw::c_uint = 848;
pub const ADEMCO_CONTACTID_TELCO_1_FAULT: ::std::os::raw::c_uint = 849;
pub const ADEMCO_CONTACTID_TELCO_2_FAULT: ::std::os::raw::c_uint = 850;
pub const ADEMCO_CONTACTID_LONG_RANGE_RADIO_TRANSMITTER_FAULT:
    ::std::os::raw::c_uint = 851;
pub const ADEMCO_CONTACTID_FAILURE_TO_COMMUNICATE_EVENT: ::std::os::raw::c_uint =
    852;
pub const ADEMCO_CONTACTID_LOSS_OF_RADIO_SUPERVISION: ::std::os::raw::c_uint = 853;
pub const ADEMCO_CONTACTID_LOSS_OF_CENTRAL_POLLING: ::std::os::raw::c_uint = 854;
pub const ADEMCO_CONTACTID_LONG_RANGE_RADIO_VSWR_PROBLEM: ::std::os::raw::c_uint =
    855;
pub const ADEMCO_CONTACTID_PROTECTION_LOOP: ::std::os::raw::c_uint = 880;
pub const ADEMCO_CONTACTID_PROTECTION_LOOP_OPEN: ::std::os::raw::c_uint = 881;
pub const ADEMCO_CONTACTID_PROTECTION_LOOP_SHORT: ::std::os::raw::c_uint = 882;
pub const ADEMCO_CONTACTID_FIRE_TROUBLE: ::std::os::raw::c_uint = 883;
pub const ADEMCO_CONTACTID_EXIT_ERROR_ALARM_ZONE: ::std::os::raw::c_uint = 884;
pub const ADEMCO_CONTACTID_PANIC_ZONE_TROUBLE: ::std::os::raw::c_uint = 885;
pub const ADEMCO_CONTACTID_HOLDUP_ZONE_TROUBLE: ::std::os::raw::c_uint = 886;
pub const ADEMCO_CONTACTID_SWINGER_TROUBLE: ::std::os::raw::c_uint = 887;
pub const ADEMCO_CONTACTID_CROSSZONE_TROUBLE: ::std::os::raw::c_uint = 888;
pub const ADEMCO_CONTACTID_SENSOR_TROUBLE: ::std::os::raw::c_uint = 896;
pub const ADEMCO_CONTACTID_LOSS_OF_SUPERVISION__RF: ::std::os::raw::c_uint = 897;
pub const ADEMCO_CONTACTID_LOSS_OF_SUPERVISION__RPM: ::std::os::raw::c_uint = 898;
pub const ADEMCO_CONTACTID_SENSOR_TAMPER_B: ::std::os::raw::c_uint = 899;
pub const ADEMCO_CONTACTID_RF_LOW_BATTERY: ::std::os::raw::c_uint = 900;
pub const ADEMCO_CONTACTID_SMOKE_DETECTOR_HIGH_SENSITIVITY: ::std::os::raw::c_uint =
    901;
pub const ADEMCO_CONTACTID_SMOKE_DETECTOR_LOW_SENSITIVITY: ::std::os::raw::c_uint =
    902;
pub const ADEMCO_CONTACTID_INTRUSION_DETECTOR_HIGH_SENSITIVITY:
    ::std::os::raw::c_uint = 903;
pub const ADEMCO_CONTACTID_INTRUSION_DETECTOR_LOW_SENSITIVITY:
    ::std::os::raw::c_uint = 904;
pub const ADEMCO_CONTACTID_SENSOR_SELFTEST_FAILURE: ::std::os::raw::c_uint = 905;
pub const ADEMCO_CONTACTID_SENSOR_WATCH_TROUBLE: ::std::os::raw::c_uint = 913;
pub const ADEMCO_CONTACTID_DRIFT_COMPENSATION_ERROR: ::std::os::raw::c_uint = 914;
pub const ADEMCO_CONTACTID_MAINTENANCE_ALERT: ::std::os::raw::c_uint = 915;
pub const ADEMCO_CONTACTID_OPEN_CLOSE: ::std::os::raw::c_uint = 1024;
pub const ADEMCO_CONTACTID_OC_BY_USER: ::std::os::raw::c_uint = 1025;
pub const ADEMCO_CONTACTID_GROUP_OC: ::std::os::raw::c_uint = 1026;
pub const ADEMCO_CONTACTID_AUTOMATIC_OC: ::std::os::raw::c_uint = 1027;
pub const ADEMCO_CONTACTID_LATE_TO_OC: ::std::os::raw::c_uint = 1028;
pub const ADEMCO_CONTACTID_DEFERRED_OC: ::std::os::raw::c_uint = 1029;
pub const ADEMCO_CONTACTID_CANCEL: ::std::os::raw::c_uint = 1030;
pub const ADEMCO_CONTACTID_REMOTE_ARM_DISARM: ::std::os::raw::c_uint = 1031;
pub const ADEMCO_CONTACTID_QUICK_ARM: ::std::os::raw::c_uint = 1032;
pub const ADEMCO_CONTACTID_KEYSWITCH_OC: ::std::os::raw::c_uint = 1033;
pub const ADEMCO_CONTACTID_ARMED_STAY: ::std::os::raw::c_uint = 1089;
pub const ADEMCO_CONTACTID_KEYSWITCH_ARMED_STAY: ::std::os::raw::c_uint = 1090;
pub const ADEMCO_CONTACTID_EXCEPTION_OC: ::std::os::raw::c_uint = 1104;
pub const ADEMCO_CONTACTID_EARLY_OC: ::std::os::raw::c_uint = 1105;
pub const ADEMCO_CONTACTID_LATE_OC: ::std::os::raw::c_uint = 1106;
pub const ADEMCO_CONTACTID_FAILED_TO_OPEN: ::std::os::raw::c_uint = 1107;
pub const ADEMCO_CONTACTID_FAILED_TO_CLOSE: ::std::os::raw::c_uint = 1108;
pub const ADEMCO_CONTACTID_AUTOARM_FAILED: ::std::os::raw::c_uint = 1109;
pub const ADEMCO_CONTACTID_PARTIAL_ARM: ::std::os::raw::c_uint = 1110;
pub const ADEMCO_CONTACTID_EXIT_ERROR_USER: ::std::os::raw::c_uint = 1111;
pub const ADEMCO_CONTACTID_USER_ON_PREMISES: ::std::os::raw::c_uint = 1112;
pub const ADEMCO_CONTACTID_RECENT_CLOSE: ::std::os::raw::c_uint = 1113;
pub const ADEMCO_CONTACTID_WRONG_CODE_ENTRY: ::std::os::raw::c_uint = 1121;
pub const ADEMCO_CONTACTID_LEGAL_CODE_ENTRY: ::std::os::raw::c_uint = 1122;
pub const ADEMCO_CONTACTID_REARM_AFTER_ALARM: ::std::os::raw::c_uint = 1123;
pub const ADEMCO_CONTACTID_AUTOARM_TIME_EXTENDED: ::std::os::raw::c_uint = 1124;
pub const ADEMCO_CONTACTID_PANIC_ALARM_RESET: ::std::os::raw::c_uint = 1125;
pub const ADEMCO_CONTACTID_SERVICE_ON_OFF_PREMISES: ::std::os::raw::c_uint = 1126;
pub const ADEMCO_CONTACTID_CALLBACK_REQUEST_MADE: ::std::os::raw::c_uint = 1041;
pub const ADEMCO_CONTACTID_SUCCESSFUL_DOWNLOAD_ACCESS: ::std::os::raw::c_uint = 1042;
pub const ADEMCO_CONTACTID_UNSUCCESSFUL_ACCESS: ::std::os::raw::c_uint = 1043;
pub const ADEMCO_CONTACTID_SYSTEM_SHUTDOWN_COMMAND_RECEIVED: ::std::os::raw::c_uint =
    1044;
pub const ADEMCO_CONTACTID_DIALER_SHUTDOWN_COMMAND_RECEIVED: ::std::os::raw::c_uint =
    1045;
pub const ADEMCO_CONTACTID_SUCCESSFUL_UPLOAD: ::std::os::raw::c_uint = 1046;
pub const ADEMCO_CONTACTID_ACCESS_DENIED: ::std::os::raw::c_uint = 1057;
pub const ADEMCO_CONTACTID_ACCESS_REPORT_BY_USER: ::std::os::raw::c_uint = 1058;
pub const ADEMCO_CONTACTID_FORCED_ACCESS: ::std::os::raw::c_uint = 1059;
pub const ADEMCO_CONTACTID_EGRESS_DENIED: ::std::os::raw::c_uint = 1060;
pub const ADEMCO_CONTACTID_EGRESS_GRANTED: ::std::os::raw::c_uint = 1061;
pub const ADEMCO_CONTACTID_ACCESS_DOOR_PROPPED_OPEN: ::std::os::raw::c_uint = 1062;
pub const ADEMCO_CONTACTID_ACCESS_POINT_DOOR_STATUS_MONITOR_TROUBLE:
    ::std::os::raw::c_uint = 1063;
pub const ADEMCO_CONTACTID_ACCESS_POINT_REQUEST_TO_EXIT_TROUBLE:
    ::std::os::raw::c_uint = 1064;
pub const ADEMCO_CONTACTID_ACCESS_PROGRAM_MODE_ENTRY: ::std::os::raw::c_uint = 1065;
pub const ADEMCO_CONTACTID_ACCESS_PROGRAM_MODE_EXIT: ::std::os::raw::c_uint = 1072;
pub const ADEMCO_CONTACTID_ACCESS_THREAT_LEVEL_CHANGE: ::std::os::raw::c_uint = 1073;
pub const ADEMCO_CONTACTID_ACCESS_RELAY_TRIGGER_FAIL: ::std::os::raw::c_uint = 1074;
pub const ADEMCO_CONTACTID_ACCESS_RTE_SHUNT: ::std::os::raw::c_uint = 1075;
pub const ADEMCO_CONTACTID_ACCESS_DSM_SHUNT: ::std::os::raw::c_uint = 1076;
pub const ADEMCO_CONTACTID_ACCESS_READER_DISABLE: ::std::os::raw::c_uint = 1281;
pub const ADEMCO_CONTACTID_SOUNDER_RELAY_DISABLE: ::std::os::raw::c_uint = 1312;
pub const ADEMCO_CONTACTID_BELL_1_DISABLE: ::std::os::raw::c_uint = 1313;
pub const ADEMCO_CONTACTID_BELL_2_DISABLE: ::std::os::raw::c_uint = 1314;
pub const ADEMCO_CONTACTID_ALARM_RELAY_DISABLE: ::std::os::raw::c_uint = 1315;
pub const ADEMCO_CONTACTID_TROUBLE_RELAY_DISABLE: ::std::os::raw::c_uint = 1316;
pub const ADEMCO_CONTACTID_REVERSING_RELAY_DISABLE: ::std::os::raw::c_uint = 1317;
pub const ADEMCO_CONTACTID_NOTIFICATION_APPLIANCE_CKT_3_DISABLE:
    ::std::os::raw::c_uint = 1318;
pub const ADEMCO_CONTACTID_NOTIFICATION_APPLIANCE_CKT_4_DISABLE:
    ::std::os::raw::c_uint = 1319;
pub const ADEMCO_CONTACTID_MODULE_ADDED: ::std::os::raw::c_uint = 1329;
pub const ADEMCO_CONTACTID_MODULE_REMOVED: ::std::os::raw::c_uint = 1330;
pub const ADEMCO_CONTACTID_DIALER_DISABLED: ::std::os::raw::c_uint = 1361;
pub const ADEMCO_CONTACTID_RADIO_TRANSMITTER_DISABLED: ::std::os::raw::c_uint = 1362;
pub const ADEMCO_CONTACTID_REMOTE_UPLOAD_DOWNLOAD_DISABLED: ::std::os::raw::c_uint =
    1363;
pub const ADEMCO_CONTACTID_ZONE_SENSOR_BYPASS: ::std::os::raw::c_uint = 1392;
pub const ADEMCO_CONTACTID_FIRE_BYPASS: ::std::os::raw::c_uint = 1393;
pub const ADEMCO_CONTACTID_24_HOUR_ZONE_BYPASS: ::std::os::raw::c_uint = 1394;
pub const ADEMCO_CONTACTID_BURG_BYPASS: ::std::os::raw::c_uint = 1395;
pub const ADEMCO_CONTACTID_GROUP_BYPASS: ::std::os::raw::c_uint = 1396;
pub const ADEMCO_CONTACTID_SWINGER_BYPASS: ::std::os::raw::c_uint = 1397;
pub const ADEMCO_CONTACTID_ACCESS_ZONE_SHUNT: ::std::os::raw::c_uint = 1398;
pub const ADEMCO_CONTACTID_ACCESS_POINT_BYPASS: ::std::os::raw::c_uint = 1399;
pub const ADEMCO_CONTACTID_MANUAL_TRIGGER_TEST_REPORT: ::std::os::raw::c_uint = 1537;
pub const ADEMCO_CONTACTID_PERIODIC_TEST_REPORT: ::std::os::raw::c_uint = 1538;
pub const ADEMCO_CONTACTID_PERIODIC_RF_TRANSMISSION: ::std::os::raw::c_uint = 1539;
pub const ADEMCO_CONTACTID_FIRE_TEST: ::std::os::raw::c_uint = 1540;
pub const ADEMCO_CONTACTID_STATUS_REPORT_TO_FOLLOW: ::std::os::raw::c_uint = 1541;
pub const ADEMCO_CONTACTID_LISTENIN_TO_FOLLOW: ::std::os::raw::c_uint = 1542;
pub const ADEMCO_CONTACTID_WALK_TEST_MODE: ::std::os::raw::c_uint = 1543;
pub const ADEMCO_CONTACTID_PERIODIC_TEST__SYSTEM_TROUBLE_PRESENT:
    ::std::os::raw::c_uint = 1544;
pub const ADEMCO_CONTACTID_VIDEO_TRANSMITTER_ACTIVE: ::std::os::raw::c_uint = 1545;
pub const ADEMCO_CONTACTID_POINT_TESTED_OK: ::std::os::raw::c_uint = 1553;
pub const ADEMCO_CONTACTID_POINT_NOT_TESTED: ::std::os::raw::c_uint = 1554;
pub const ADEMCO_CONTACTID_INTRUSION_ZONE_WALK_TESTED: ::std::os::raw::c_uint = 1555;
pub const ADEMCO_CONTACTID_FIRE_ZONE_WALK_TESTED: ::std::os::raw::c_uint = 1556;
pub const ADEMCO_CONTACTID_PANIC_ZONE_WALK_TESTED: ::std::os::raw::c_uint = 1557;
pub const ADEMCO_CONTACTID_SERVICE_REQUEST: ::std::os::raw::c_uint = 1558;
pub const ADEMCO_CONTACTID_EVENT_LOG_RESET: ::std::os::raw::c_uint = 1569;
pub const ADEMCO_CONTACTID_EVENT_LOG_50PC_FULL: ::std::os::raw::c_uint = 1570;
pub const ADEMCO_CONTACTID_EVENT_LOG_90PC_FULL: ::std::os::raw::c_uint = 1571;
pub const ADEMCO_CONTACTID_EVENT_LOG_OVERFLOW: ::std::os::raw::c_uint = 1572;
pub const ADEMCO_CONTACTID_TIME_DATE_RESET: ::std::os::raw::c_uint = 1573;
pub const ADEMCO_CONTACTID_TIME_DATE_INACCURATE: ::std::os::raw::c_uint = 1574;
pub const ADEMCO_CONTACTID_PROGRAM_MODE_ENTRY: ::std::os::raw::c_uint = 1575;
pub const ADEMCO_CONTACTID_PROGRAM_MODE_EXIT: ::std::os::raw::c_uint = 1576;
pub const ADEMCO_CONTACTID_32_HOUR_EVENT_LOG_MARKER: ::std::os::raw::c_uint = 1577;
pub const ADEMCO_CONTACTID_SCHEDULE_CHANGE: ::std::os::raw::c_uint = 1584;
pub const ADEMCO_CONTACTID_EXCEPTION_SCHEDULE_CHANGE: ::std::os::raw::c_uint = 1585;
pub const ADEMCO_CONTACTID_ACCESS_SCHEDULE_CHANGE: ::std::os::raw::c_uint = 1586;
pub const ADEMCO_CONTACTID_SENIOR_WATCH_TROUBLE: ::std::os::raw::c_uint = 1601;
pub const ADEMCO_CONTACTID_LATCHKEY_SUPERVISION: ::std::os::raw::c_uint = 1602;
pub const ADEMCO_CONTACTID_RESERVED_FOR_ADEMCO_USE_1: ::std::os::raw::c_uint = 1617;
pub const ADEMCO_CONTACTID_RESERVED_FOR_ADEMCO_USE_2: ::std::os::raw::c_uint = 1618;
pub const ADEMCO_CONTACTID_RESERVED_FOR_ADEMCO_USE_3: ::std::os::raw::c_uint = 1619;
pub const ADEMCO_CONTACTID_SYSTEM_INACTIVITY: ::std::os::raw::c_uint = 1620;
pub const ADEMCO_CONTACTID_DOWNLOAD_ABORT: ::std::os::raw::c_uint = 2304;
pub const ADEMCO_CONTACTID_DOWNLOAD_START_END: ::std::os::raw::c_uint = 2305;
pub const ADEMCO_CONTACTID_DOWNLOAD_INTERRUPTED: ::std::os::raw::c_uint = 2306;
pub const ADEMCO_CONTACTID_AUTOCLOSE_WITH_BYPASS: ::std::os::raw::c_uint = 2320;
pub const ADEMCO_CONTACTID_BYPASS_CLOSING: ::std::os::raw::c_uint = 2321;
pub const ADEMCO_CONTACTID_32_HOUR_NO_READ_OF_EVENT_LOG: ::std::os::raw::c_uint =
    2457;
pub type _bindgen_ty_50 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ademco_contactid_sender_state_s {
    _unused: [u8; 0],
}
pub type ademco_contactid_sender_state_t = ademco_contactid_sender_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ademco_contactid_receiver_state_s {
    _unused: [u8; 0],
}
pub type ademco_contactid_receiver_state_t = ademco_contactid_receiver_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ademco_contactid_report_t {
    pub acct: ::std::os::raw::c_int,
    pub mt: ::std::os::raw::c_int,
    pub q: ::std::os::raw::c_int,
    pub xyz: ::std::os::raw::c_int,
    pub gg: ::std::os::raw::c_int,
    pub ccc: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ademco_contactid_report_t() {
    assert_eq!(
        ::std::mem::size_of::<ademco_contactid_report_t>(),
        24usize,
        concat!("Size of: ", stringify!(ademco_contactid_report_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ademco_contactid_report_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ademco_contactid_report_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ademco_contactid_report_t>())).acct as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ademco_contactid_report_t),
            "::",
            stringify!(acct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ademco_contactid_report_t>())).mt as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ademco_contactid_report_t),
            "::",
            stringify!(mt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ademco_contactid_report_t>())).q as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ademco_contactid_report_t),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ademco_contactid_report_t>())).xyz as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ademco_contactid_report_t),
            "::",
            stringify!(xyz)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ademco_contactid_report_t>())).gg as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ademco_contactid_report_t),
            "::",
            stringify!(gg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ademco_contactid_report_t>())).ccc as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ademco_contactid_report_t),
            "::",
            stringify!(ccc)
        )
    );
}
pub type ademco_contactid_report_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        report: *const ademco_contactid_report_t,
    ),
>;
extern "C" {
    pub fn ademco_contactid_msg_qualifier_to_str(
        q: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ademco_contactid_event_to_str(
        xyz: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn encode_msg(
        buf: *mut ::std::os::raw::c_char,
        report: *const ademco_contactid_report_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn decode_msg(
        report: *mut ademco_contactid_report_t,
        buf: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ademco_contactid_receiver_log_msg(
        s: *mut ademco_contactid_receiver_state_t,
        report: *const ademco_contactid_report_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ademco_contactid_receiver_tx(
        s: *mut ademco_contactid_receiver_state_t,
        amp: *mut i16,
        max_samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ademco_contactid_receiver_rx(
        s: *mut ademco_contactid_receiver_state_t,
        amp: *const i16,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ademco_contactid_receiver_fillin(
        s: *mut ademco_contactid_receiver_state_t,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ademco_contactid_receiver_get_logging_state(
        s: *mut ademco_contactid_receiver_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn ademco_contactid_receiver_set_realtime_callback(
        s: *mut ademco_contactid_receiver_state_t,
        callback: ademco_contactid_report_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ademco_contactid_receiver_init(
        s: *mut ademco_contactid_receiver_state_t,
        callback: ademco_contactid_report_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut ademco_contactid_receiver_state_t;
}
extern "C" {
    pub fn ademco_contactid_receiver_release(
        s: *mut ademco_contactid_receiver_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ademco_contactid_receiver_free(
        s: *mut ademco_contactid_receiver_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ademco_contactid_sender_tx(
        s: *mut ademco_contactid_sender_state_t,
        amp: *mut i16,
        max_samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ademco_contactid_sender_rx(
        s: *mut ademco_contactid_sender_state_t,
        amp: *const i16,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ademco_contactid_sender_fillin(
        s: *mut ademco_contactid_sender_state_t,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ademco_contactid_sender_put(
        s: *mut ademco_contactid_sender_state_t,
        report: *const ademco_contactid_report_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ademco_contactid_sender_get_logging_state(
        s: *mut ademco_contactid_sender_state_t,
    ) -> *mut logging_state_t;
}
extern "C" {
    pub fn ademco_contactid_sender_set_realtime_callback(
        s: *mut ademco_contactid_sender_state_t,
        callback: tone_report_func_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ademco_contactid_sender_init(
        s: *mut ademco_contactid_sender_state_t,
        callback: tone_report_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut ademco_contactid_sender_state_t;
}
extern "C" {
    pub fn ademco_contactid_sender_release(
        s: *mut ademco_contactid_sender_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ademco_contactid_sender_free(
        s: *mut ademco_contactid_sender_state_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oki_adpcm_state_s {
    _unused: [u8; 0],
}
pub type oki_adpcm_state_t = oki_adpcm_state_s;
extern "C" {
    pub fn oki_adpcm_init(
        s: *mut oki_adpcm_state_t,
        bit_rate: ::std::os::raw::c_int,
    ) -> *mut oki_adpcm_state_t;
}
extern "C" {
    pub fn oki_adpcm_release(s: *mut oki_adpcm_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn oki_adpcm_free(s: *mut oki_adpcm_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn oki_adpcm_decode(
        s: *mut oki_adpcm_state_t,
        amp: *mut i16,
        oki_data: *const u8,
        oki_bytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn oki_adpcm_encode(
        s: *mut oki_adpcm_state_t,
        oki_data: *mut u8,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const IMA_ADPCM_IMA4: ::std::os::raw::c_uint = 0;
pub const IMA_ADPCM_DVI4: ::std::os::raw::c_uint = 1;
pub const IMA_ADPCM_VDVI: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_51 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ima_adpcm_state_s {
    _unused: [u8; 0],
}
pub type ima_adpcm_state_t = ima_adpcm_state_s;
extern "C" {
    pub fn ima_adpcm_init(
        s: *mut ima_adpcm_state_t,
        variant: ::std::os::raw::c_int,
        chunk_size: ::std::os::raw::c_int,
    ) -> *mut ima_adpcm_state_t;
}
extern "C" {
    pub fn ima_adpcm_release(s: *mut ima_adpcm_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ima_adpcm_free(s: *mut ima_adpcm_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ima_adpcm_encode(
        s: *mut ima_adpcm_state_t,
        ima_data: *mut u8,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ima_adpcm_decode(
        s: *mut ima_adpcm_state_t,
        amp: *mut i16,
        ima_data: *const u8,
        ima_bytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const G722_SAMPLE_RATE_8000: ::std::os::raw::c_uint = 1;
pub const G722_PACKED: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_52 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct g722_encode_state_s {
    _unused: [u8; 0],
}
pub type g722_encode_state_t = g722_encode_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct g722_decode_state_s {
    _unused: [u8; 0],
}
pub type g722_decode_state_t = g722_decode_state_s;
extern "C" {
    pub fn g722_encode_init(
        s: *mut g722_encode_state_t,
        rate: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
    ) -> *mut g722_encode_state_t;
}
extern "C" {
    pub fn g722_encode_release(s: *mut g722_encode_state_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn g722_encode_free(s: *mut g722_encode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn g722_encode(
        s: *mut g722_encode_state_t,
        g722_data: *mut u8,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn g722_decode_init(
        s: *mut g722_decode_state_t,
        rate: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
    ) -> *mut g722_decode_state_t;
}
extern "C" {
    pub fn g722_decode_release(s: *mut g722_decode_state_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn g722_decode_free(s: *mut g722_decode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn g722_decode(
        s: *mut g722_decode_state_t,
        amp: *mut i16,
        g722_data: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const G726_ENCODING_LINEAR: ::std::os::raw::c_uint = 0;
pub const G726_ENCODING_ULAW: ::std::os::raw::c_uint = 1;
pub const G726_ENCODING_ALAW: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_53 = ::std::os::raw::c_uint;
pub const G726_PACKING_NONE: ::std::os::raw::c_uint = 0;
pub const G726_PACKING_LEFT: ::std::os::raw::c_uint = 1;
pub const G726_PACKING_RIGHT: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_54 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct g726_state_s {
    _unused: [u8; 0],
}
pub type g726_state_t = g726_state_s;
pub type g726_decoder_func_t = ::std::option::Option<
    unsafe extern "C" fn(s: *mut g726_state_t, code: u8) -> i16,
>;
pub type g726_encoder_func_t = ::std::option::Option<
    unsafe extern "C" fn(s: *mut g726_state_t, amp: i16) -> u8,
>;
extern "C" {
    pub fn g726_init(
        s: *mut g726_state_t,
        bit_rate: ::std::os::raw::c_int,
        ext_coding: ::std::os::raw::c_int,
        packing: ::std::os::raw::c_int,
    ) -> *mut g726_state_t;
}
extern "C" {
    pub fn g726_release(s: *mut g726_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn g726_free(s: *mut g726_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn g726_decode(
        s: *mut g726_state_t,
        amp: *mut i16,
        g726_data: *const u8,
        g726_bytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn g726_encode(
        s: *mut g726_state_t,
        g726_data: *mut u8,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lpc10_frame_t {
    pub ipitch: i32,
    pub irms: i32,
    pub irc: [i32; 10usize],
}
#[test]
fn bindgen_test_layout_lpc10_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<lpc10_frame_t>(),
        48usize,
        concat!("Size of: ", stringify!(lpc10_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lpc10_frame_t>(),
        4usize,
        concat!("Alignment of ", stringify!(lpc10_frame_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lpc10_frame_t>())).ipitch as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lpc10_frame_t),
            "::",
            stringify!(ipitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lpc10_frame_t>())).irms as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lpc10_frame_t),
            "::",
            stringify!(irms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lpc10_frame_t>())).irc as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lpc10_frame_t),
            "::",
            stringify!(irc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lpc10_encode_state_s {
    _unused: [u8; 0],
}
pub type lpc10_encode_state_t = lpc10_encode_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lpc10_decode_state_s {
    _unused: [u8; 0],
}
pub type lpc10_decode_state_t = lpc10_decode_state_s;
extern "C" {
    pub fn lpc10_encode_init(
        s: *mut lpc10_encode_state_t,
        error_correction: ::std::os::raw::c_int,
    ) -> *mut lpc10_encode_state_t;
}
extern "C" {
    pub fn lpc10_encode_release(
        s: *mut lpc10_encode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lpc10_encode_free(s: *mut lpc10_encode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lpc10_encode(
        s: *mut lpc10_encode_state_t,
        code: *mut u8,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lpc10_decode_init(
        st: *mut lpc10_decode_state_t,
        error_correction: ::std::os::raw::c_int,
    ) -> *mut lpc10_decode_state_t;
}
extern "C" {
    pub fn lpc10_decode_release(
        s: *mut lpc10_decode_state_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lpc10_decode_free(s: *mut lpc10_decode_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lpc10_decode(
        s: *mut lpc10_decode_state_t,
        amp: *mut i16,
        code: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const GSM0610_PACKING_NONE: ::std::os::raw::c_uint = 0;
pub const GSM0610_PACKING_WAV49: ::std::os::raw::c_uint = 1;
pub const GSM0610_PACKING_VOIP: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_55 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gsm0610_frame_t {
    pub LARc: [i16; 8usize],
    pub Nc: [i16; 4usize],
    pub bc: [i16; 4usize],
    pub Mc: [i16; 4usize],
    pub xmaxc: [i16; 4usize],
    pub xMc: [[i16; 13usize]; 4usize],
}
#[test]
fn bindgen_test_layout_gsm0610_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<gsm0610_frame_t>(),
        152usize,
        concat!("Size of: ", stringify!(gsm0610_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<gsm0610_frame_t>(),
        2usize,
        concat!("Alignment of ", stringify!(gsm0610_frame_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gsm0610_frame_t>())).LARc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gsm0610_frame_t),
            "::",
            stringify!(LARc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gsm0610_frame_t>())).Nc as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gsm0610_frame_t),
            "::",
            stringify!(Nc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gsm0610_frame_t>())).bc as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gsm0610_frame_t),
            "::",
            stringify!(bc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gsm0610_frame_t>())).Mc as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(gsm0610_frame_t),
            "::",
            stringify!(Mc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gsm0610_frame_t>())).xmaxc as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(gsm0610_frame_t),
            "::",
            stringify!(xmaxc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gsm0610_frame_t>())).xMc as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(gsm0610_frame_t),
            "::",
            stringify!(xMc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gsm0610_state_s {
    _unused: [u8; 0],
}
pub type gsm0610_state_t = gsm0610_state_s;
extern "C" {
    pub fn gsm0610_init(
        s: *mut gsm0610_state_t,
        packing: ::std::os::raw::c_int,
    ) -> *mut gsm0610_state_t;
}
extern "C" {
    pub fn gsm0610_release(s: *mut gsm0610_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsm0610_free(s: *mut gsm0610_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsm0610_set_packing(
        s: *mut gsm0610_state_t,
        packing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsm0610_encode(
        s: *mut gsm0610_state_t,
        code: *mut u8,
        amp: *const i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsm0610_decode(
        s: *mut gsm0610_state_t,
        amp: *mut i16,
        code: *const u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsm0610_pack_none(
        c: *mut u8,
        s: *const gsm0610_frame_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsm0610_pack_wav49(
        c: *mut u8,
        s: *const gsm0610_frame_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsm0610_pack_voip(
        c: *mut u8,
        s: *const gsm0610_frame_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsm0610_unpack_none(
        s: *mut gsm0610_frame_t,
        c: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsm0610_unpack_wav49(
        s: *mut gsm0610_frame_t,
        c: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsm0610_unpack_voip(
        s: *mut gsm0610_frame_t,
        c: *const u8,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plc_state_s {
    _unused: [u8; 0],
}
pub type plc_state_t = plc_state_s;
extern "C" {
    pub fn plc_rx(
        s: *mut plc_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plc_fillin(
        s: *mut plc_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plc_init(s: *mut plc_state_t) -> *mut plc_state_t;
}
extern "C" {
    pub fn plc_release(s: *mut plc_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plc_free(s: *mut plc_state_t) -> ::std::os::raw::c_int;
}
pub const PLAYOUT_OK: ::std::os::raw::c_uint = 0;
pub const PLAYOUT_ERROR: ::std::os::raw::c_uint = 1;
pub const PLAYOUT_EMPTY: ::std::os::raw::c_uint = 2;
pub const PLAYOUT_NOFRAME: ::std::os::raw::c_uint = 3;
pub const PLAYOUT_FILLIN: ::std::os::raw::c_uint = 4;
pub const PLAYOUT_DROP: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_56 = ::std::os::raw::c_uint;
pub type timestamp_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playout_frame_s {
    _unused: [u8; 0],
}
pub type playout_frame_t = playout_frame_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playout_state_s {
    _unused: [u8; 0],
}
pub type playout_state_t = playout_state_s;
extern "C" {
    pub fn playout_put(
        s: *mut playout_state_t,
        data: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_int,
        sender_len: timestamp_t,
        sender_stamp: timestamp_t,
        receiver_stamp: timestamp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn playout_get(
        s: *mut playout_state_t,
        frame: *mut playout_frame_t,
        sender_stamp: timestamp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn playout_get_unconditional(
        s: *mut playout_state_t,
    ) -> *mut playout_frame_t;
}
extern "C" {
    pub fn playout_current_length(s: *mut playout_state_t) -> timestamp_t;
}
extern "C" {
    pub fn playout_next_due(s: *mut playout_state_t) -> timestamp_t;
}
extern "C" {
    pub fn playout_restart(
        s: *mut playout_state_t,
        min_length: ::std::os::raw::c_int,
        max_length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn playout_init(
        min_length: ::std::os::raw::c_int,
        max_length: ::std::os::raw::c_int,
    ) -> *mut playout_state_t;
}
extern "C" {
    pub fn playout_release(s: *mut playout_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn playout_free(s: *mut playout_state_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
